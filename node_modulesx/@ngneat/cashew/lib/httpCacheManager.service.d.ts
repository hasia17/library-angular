import { HttpResponse } from '@angular/common/http';
import { HttpCacheConfig } from './httpCacheConfig';
import { HttpCacheStorage } from './httpCacheStorage';
import { TTLManager } from './ttlManager';
import { HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
import { HttpCacheRequest } from './types';
import { CacheBucket } from './cacheBucket';
import * as ɵngcc0 from '@angular/core';
export declare class HttpCacheManager {
    private queue;
    private storage;
    private guard;
    private ttlManager;
    private config;
    constructor(queue: RequestsQueue, storage: HttpCacheStorage, guard: HttpCacheGuard, ttlManager: TTLManager, config: HttpCacheConfig);
    validate(key: string): boolean;
    get<T = any>(key: string): HttpResponse<T>;
    has(key: string): boolean;
    set(key: string, body: HttpResponse<any> | any, { ttl, bucket }?: {
        ttl?: number;
        bucket?: CacheBucket;
    }): void;
    delete(key?: string | RegExp | CacheBucket): void;
    _getQueue(): RequestsQueue;
    _isCacheable(canActivate: boolean, cache: any): any;
    _set(key: string, response: HttpResponse<any>, ttl: number): void;
    _canActivate(request: HttpCacheRequest): boolean;
    _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HttpCacheManager, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<HttpCacheManager>;
}

//# sourceMappingURL=httpCacheManager.service.d.ts.map