{"version":3,"file":"httpCacheManager.service.d.ts","sources":["httpCacheManager.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheStorage } from './httpCacheStorage';\nimport { TTLManager } from './ttlManager';\nimport { HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\nimport { HttpCacheRequest } from './types';\nimport { CacheBucket } from './cacheBucket';\nexport declare class HttpCacheManager {\n    private queue;\n    private storage;\n    private guard;\n    private ttlManager;\n    private config;\n    constructor(queue: RequestsQueue, storage: HttpCacheStorage, guard: HttpCacheGuard, ttlManager: TTLManager, config: HttpCacheConfig);\n    validate(key: string): boolean;\n    get<T = any>(key: string): HttpResponse<T>;\n    has(key: string): boolean;\n    set(key: string, body: HttpResponse<any> | any, { ttl, bucket }?: {\n        ttl?: number;\n        bucket?: CacheBucket;\n    }): void;\n    delete(key?: string | RegExp | CacheBucket): void;\n    _getQueue(): RequestsQueue;\n    _isCacheable(canActivate: boolean, cache: any): any;\n    _set(key: string, response: HttpResponse<any>, ttl: number): void;\n    _canActivate(request: HttpCacheRequest): boolean;\n    _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T>;\n}\n"]}