/**
 * @fileoverview added by tsickle
 * Generated from: lib/ttlManager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { deleteByRegex } from './deleteByRegex';
/**
 * @abstract
 */
export class TTLManager {
}
if (false) {
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    TTLManager.prototype.isValid = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    TTLManager.prototype.set = function (key, ttl) { };
    /**
     * @abstract
     * @param {?=} key
     * @return {?}
     */
    TTLManager.prototype.delete = function (key) { };
}
export class DefaultTTLManager {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.cache = new Map();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isValid(key) {
        return this.cache.get(key) > new Date().getTime();
    }
    /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    set(key, ttl) {
        /** @type {?} */
        let resolveTTL = ttl || this.config.ttl;
        this.cache.set(key, new Date().setMilliseconds(resolveTTL));
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    delete(key) {
        if (!key) {
            this.cache.clear();
            return;
        }
        if (typeof key === 'string') {
            this.cache.delete((/** @type {?} */ (key)));
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), this.cache);
    }
}
DefaultTTLManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DefaultTTLManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultTTLManager.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    DefaultTTLManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL3R0bE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFDdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBRWhELE1BQU0sT0FBZ0IsVUFBVTtDQUkvQjs7Ozs7OztJQUhDLGtEQUF1Qzs7Ozs7OztJQUN2QyxtREFBOEM7Ozs7OztJQUM5QyxpREFBNkM7O0FBSS9DLE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUFHNUIsWUFBK0MsTUFBdUI7UUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFGOUQsVUFBSyxHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO0lBRStCLENBQUM7Ozs7O0lBRTFFLE9BQU8sQ0FBQyxHQUFXO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwRCxDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLEdBQVk7O1lBQ3ZCLFVBQVUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHO1FBRXZDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLEdBQXFCO1FBQzFCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25CLE9BQU87U0FDUjtRQUVELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLG1CQUFBLEdBQUcsRUFBVSxDQUFDLENBQUM7WUFDakMsT0FBTztTQUNSO1FBRUQsYUFBYSxDQUFDLG1CQUFBLEdBQUcsRUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7WUE1QkYsVUFBVTs7Ozs0Q0FJSSxNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7O0lBRnJDLGtDQUEwQzs7Ozs7SUFFOUIsbUNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0NBQ0hFX0NPTkZJRywgSHR0cENhY2hlQ29uZmlnIH0gZnJvbSAnLi9odHRwQ2FjaGVDb25maWcnO1xuaW1wb3J0IHsgZGVsZXRlQnlSZWdleCB9IGZyb20gJy4vZGVsZXRlQnlSZWdleCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUVExNYW5hZ2VyIHtcbiAgYWJzdHJhY3QgaXNWYWxpZChrZXk6IHN0cmluZyk6IGJvb2xlYW47XG4gIGFic3RyYWN0IHNldChrZXk6IHN0cmluZywgdHRsPzogbnVtYmVyKTogdm9pZDtcbiAgYWJzdHJhY3QgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQ7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWZhdWx0VFRMTWFuYWdlciB7XG4gIHByaXZhdGUgY2FjaGUgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWcpIHt9XG5cbiAgaXNWYWxpZChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpID4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHR0bD86IG51bWJlcik6IHZvaWQge1xuICAgIGxldCByZXNvbHZlVFRMID0gdHRsIHx8IHRoaXMuY29uZmlnLnR0bDtcblxuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgbmV3IERhdGUoKS5zZXRNaWxsaXNlY29uZHMocmVzb2x2ZVRUTCkpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQge1xuICAgIGlmICgha2V5KSB7XG4gICAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkgYXMgc3RyaW5nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWxldGVCeVJlZ2V4KGtleSBhcyBSZWdFeHAsIHRoaXMuY2FjaGUpO1xuICB9XG59XG4iXX0=