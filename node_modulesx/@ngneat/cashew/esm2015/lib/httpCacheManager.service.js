/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheManager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheStorage } from './httpCacheStorage';
import { TTLManager } from './ttlManager';
import { HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
import { CacheBucket } from './cacheBucket';
export class HttpCacheManager {
    /**
     * @param {?} queue
     * @param {?} storage
     * @param {?} guard
     * @param {?} ttlManager
     * @param {?} config
     */
    constructor(queue, storage, guard, ttlManager, config) {
        this.queue = queue;
        this.storage = storage;
        this.guard = guard;
        this.ttlManager = ttlManager;
        this.config = config;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    validate(key) {
        /** @type {?} */
        const has = this.storage.has(key);
        /** @type {?} */
        const isValid = this.ttlManager.isValid(key);
        if (has && isValid)
            return true;
        this.storage.delete(key);
        return false;
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return this._resolveResponse(this.storage.get(key));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return this.storage.has(key);
    }
    /**
     * @param {?} key
     * @param {?} body
     * @param {?=} __2
     * @return {?}
     */
    set(key, body, { ttl, bucket } = {}) {
        /** @type {?} */
        let response = body;
        if (!(body instanceof HttpResponse)) {
            response = new HttpResponse({
                body,
                status: 200,
                url: key
            });
        }
        this._set(key, response, ttl);
        bucket && bucket.add(key);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    delete(key) {
        if (key instanceof CacheBucket) {
            key.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => this.delete(value)));
            key.clear();
            return;
        }
        this.storage.delete(key);
        this.ttlManager.delete(key);
    }
    /**
     * @return {?}
     */
    _getQueue() {
        return this.queue;
    }
    /**
     * @param {?} canActivate
     * @param {?} cache
     * @return {?}
     */
    _isCacheable(canActivate, cache) {
        /** @type {?} */
        const strategy = this.config.strategy;
        if (strategy === 'explicit') {
            return cache;
        }
        if (canActivate && strategy === 'implicit') {
            return cache !== false;
        }
        return false;
    }
    /**
     * @param {?} key
     * @param {?} response
     * @param {?} ttl
     * @return {?}
     */
    _set(key, response, ttl) {
        this.storage.set(key, response);
        this.ttlManager.set(key, ttl);
    }
    /**
     * @param {?} request
     * @return {?}
     */
    _canActivate(request) {
        return this.guard.canActivate(request);
    }
    /**
     * @template T
     * @param {?} event
     * @return {?}
     */
    _resolveResponse(event) {
        return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;
    }
}
HttpCacheManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpCacheManager.ctorParameters = () => [
    { type: RequestsQueue },
    { type: HttpCacheStorage },
    { type: HttpCacheGuard },
    { type: TTLManager },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.queue;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.guard;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.ttlManager;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc1QyxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7OztJQUMzQixZQUNVLEtBQW9CLEVBQ3BCLE9BQXlCLEVBQ3pCLEtBQXFCLEVBQ3JCLFVBQXNCLEVBQ0ssTUFBdUI7UUFKbEQsVUFBSyxHQUFMLEtBQUssQ0FBZTtRQUNwQixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ0ssV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFDekQsQ0FBQzs7Ozs7SUFFSixRQUFRLENBQUMsR0FBVzs7Y0FDWixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDOztjQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzVDLElBQUksR0FB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YTtZQUhiLGdCQUFnQjtZQUVoQixjQUFjO1lBRGQsVUFBVTs0Q0FhZCxNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7O0lBSnpCLGlDQUE0Qjs7Ozs7SUFDNUIsbUNBQWlDOzs7OztJQUNqQyxpQ0FBNkI7Ozs7O0lBQzdCLHNDQUE4Qjs7Ozs7SUFDOUIsa0NBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0NBQ0hFX0NPTkZJRywgSHR0cENhY2hlQ29uZmlnIH0gZnJvbSAnLi9odHRwQ2FjaGVDb25maWcnO1xuaW1wb3J0IHsgSHR0cENhY2hlU3RvcmFnZSB9IGZyb20gJy4vaHR0cENhY2hlU3RvcmFnZSc7XG5pbXBvcnQgeyBUVExNYW5hZ2VyIH0gZnJvbSAnLi90dGxNYW5hZ2VyJztcbmltcG9ydCB7IEh0dHBDYWNoZUd1YXJkIH0gZnJvbSAnLi9odHRwQ2FjaGVHdWFyZCc7XG5pbXBvcnQgeyBSZXF1ZXN0c1F1ZXVlIH0gZnJvbSAnLi9yZXF1ZXN0c1F1ZXVlJztcbmltcG9ydCB7IEh0dHBDYWNoZVJlcXVlc3QgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IENhY2hlQnVja2V0IH0gZnJvbSAnLi9jYWNoZUJ1Y2tldCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwQ2FjaGVNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBxdWV1ZTogUmVxdWVzdHNRdWV1ZSxcbiAgICBwcml2YXRlIHN0b3JhZ2U6IEh0dHBDYWNoZVN0b3JhZ2UsXG4gICAgcHJpdmF0ZSBndWFyZDogSHR0cENhY2hlR3VhcmQsXG4gICAgcHJpdmF0ZSB0dGxNYW5hZ2VyOiBUVExNYW5hZ2VyLFxuICAgIEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWdcbiAgKSB7fVxuXG4gIHZhbGlkYXRlKGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgaGFzID0gdGhpcy5zdG9yYWdlLmhhcyhrZXkpO1xuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLnR0bE1hbmFnZXIuaXNWYWxpZChrZXkpO1xuICAgIGlmIChoYXMgJiYgaXNWYWxpZCkgcmV0dXJuIHRydWU7XG5cbiAgICB0aGlzLnN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0PFQgPSBhbnk+KGtleTogc3RyaW5nKTogSHR0cFJlc3BvbnNlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVJlc3BvbnNlPFQ+KHRoaXMuc3RvcmFnZS5nZXQoa2V5KSk7XG4gIH1cblxuICBoYXMoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmhhcyhrZXkpO1xuICB9XG5cbiAgc2V0KGtleTogc3RyaW5nLCBib2R5OiBIdHRwUmVzcG9uc2U8YW55PiB8IGFueSwgeyB0dGwsIGJ1Y2tldCB9OiB7IHR0bD86IG51bWJlcjsgYnVja2V0PzogQ2FjaGVCdWNrZXQgfSA9IHt9KSB7XG4gICAgbGV0IHJlc3BvbnNlID0gYm9keTtcblxuICAgIGlmICghKGJvZHkgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpKSB7XG4gICAgICByZXNwb25zZSA9IG5ldyBIdHRwUmVzcG9uc2Uoe1xuICAgICAgICBib2R5LFxuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgdXJsOiBrZXlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX3NldChrZXksIHJlc3BvbnNlLCB0dGwpO1xuICAgIGJ1Y2tldCAmJiBidWNrZXQuYWRkKGtleSk7XG4gIH1cblxuICBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwIHwgQ2FjaGVCdWNrZXQpOiB2b2lkIHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgQ2FjaGVCdWNrZXQpIHtcbiAgICAgIGtleS5mb3JFYWNoKHZhbHVlID0+IHRoaXMuZGVsZXRlKHZhbHVlKSk7XG4gICAgICBrZXkuY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgdGhpcy50dGxNYW5hZ2VyLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgX2dldFF1ZXVlKCk6IFJlcXVlc3RzUXVldWUge1xuICAgIHJldHVybiB0aGlzLnF1ZXVlO1xuICB9XG5cbiAgX2lzQ2FjaGVhYmxlKGNhbkFjdGl2YXRlOiBib29sZWFuLCBjYWNoZTogYW55KSB7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSB0aGlzLmNvbmZpZy5zdHJhdGVneTtcbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdleHBsaWNpdCcpIHtcbiAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG5cbiAgICBpZiAoY2FuQWN0aXZhdGUgJiYgc3RyYXRlZ3kgPT09ICdpbXBsaWNpdCcpIHtcbiAgICAgIHJldHVybiBjYWNoZSAhPT0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgX3NldChrZXk6IHN0cmluZywgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+LCB0dGw6IG51bWJlcikge1xuICAgIHRoaXMuc3RvcmFnZS5zZXQoa2V5LCByZXNwb25zZSk7XG4gICAgdGhpcy50dGxNYW5hZ2VyLnNldChrZXksIHR0bCk7XG4gIH1cblxuICBfY2FuQWN0aXZhdGUocmVxdWVzdDogSHR0cENhY2hlUmVxdWVzdCkge1xuICAgIHJldHVybiB0aGlzLmd1YXJkLmNhbkFjdGl2YXRlKHJlcXVlc3QpO1xuICB9XG5cbiAgX3Jlc29sdmVSZXNwb25zZTxUID0gYW55PihldmVudDogSHR0cFJlc3BvbnNlPFQ+KTogSHR0cFJlc3BvbnNlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucmVzcG9uc2VTZXJpYWxpemVyID8gZXZlbnQuY2xvbmUoeyBib2R5OiB0aGlzLmNvbmZpZy5yZXNwb25zZVNlcmlhbGl6ZXIoZXZlbnQuYm9keSkgfSkgOiBldmVudDtcbiAgfVxufVxuIl19