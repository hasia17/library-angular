/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheInterceptor.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { HttpCacheInterceptor } from './httpCacheInterceptor';
import { DefaultKeySerializer, KeySerializer } from './keySerializer';
import { DefaultHttpCacheStorage, HttpCacheStorage } from './httpCacheStorage';
import { defaultConfig, HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { DefaultTTLManager, TTLManager } from './ttlManager';
import { DefaultHttpCacheGuard, HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
export class HttpCacheInterceptorModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            providers: [
                { provide: HTTP_CACHE_CONFIG, useValue: Object.assign({}, defaultConfig, config) },
                { provide: KeySerializer, useClass: DefaultKeySerializer },
                { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },
                { provide: TTLManager, useClass: DefaultTTLManager },
                { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },
                { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },
                HttpCacheManager,
                RequestsQueue
            ],
            ngModule: HttpCacheInterceptorModule
        };
    }
}
HttpCacheInterceptorModule.decorators = [
    { type: NgModule, args: [{},] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvaHR0cENhY2hlSW50ZXJjZXB0b3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFDdEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR2hELE1BQU0sT0FBTywwQkFBMEI7Ozs7O0lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBbUMsRUFBRTtRQUNsRCxPQUFPO1lBQ0wsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsb0JBQU8sYUFBYSxFQUFLLE1BQU0sQ0FBRSxFQUFFO2dCQUN6RSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFO2dCQUMxRCxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUU7Z0JBQ2hFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7Z0JBQ3BELEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUscUJBQXFCLEVBQUU7Z0JBQzVELEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO2dCQUMzRSxnQkFBZ0I7Z0JBQ2hCLGFBQWE7YUFDZDtZQUNELFFBQVEsRUFBRSwwQkFBMEI7U0FDckMsQ0FBQztJQUNKLENBQUM7OztZQWhCRixRQUFRLFNBQUMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDYWNoZUludGVyY2VwdG9yIH0gZnJvbSAnLi9odHRwQ2FjaGVJbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBEZWZhdWx0S2V5U2VyaWFsaXplciwgS2V5U2VyaWFsaXplciB9IGZyb20gJy4va2V5U2VyaWFsaXplcic7XG5pbXBvcnQgeyBEZWZhdWx0SHR0cENhY2hlU3RvcmFnZSwgSHR0cENhY2hlU3RvcmFnZSB9IGZyb20gJy4vaHR0cENhY2hlU3RvcmFnZSc7XG5pbXBvcnQgeyBkZWZhdWx0Q29uZmlnLCBIVFRQX0NBQ0hFX0NPTkZJRywgSHR0cENhY2hlQ29uZmlnIH0gZnJvbSAnLi9odHRwQ2FjaGVDb25maWcnO1xuaW1wb3J0IHsgSHR0cENhY2hlTWFuYWdlciB9IGZyb20gJy4vaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IERlZmF1bHRUVExNYW5hZ2VyLCBUVExNYW5hZ2VyIH0gZnJvbSAnLi90dGxNYW5hZ2VyJztcbmltcG9ydCB7IERlZmF1bHRIdHRwQ2FjaGVHdWFyZCwgSHR0cENhY2hlR3VhcmQgfSBmcm9tICcuL2h0dHBDYWNoZUd1YXJkJztcbmltcG9ydCB7IFJlcXVlc3RzUXVldWUgfSBmcm9tICcuL3JlcXVlc3RzUXVldWUnO1xuXG5ATmdNb2R1bGUoe30pXG5leHBvcnQgY2xhc3MgSHR0cENhY2hlSW50ZXJjZXB0b3JNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFBhcnRpYWw8SHR0cENhY2hlQ29uZmlnPiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxIdHRwQ2FjaGVJbnRlcmNlcHRvck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBIVFRQX0NBQ0hFX0NPTkZJRywgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH0gfSxcbiAgICAgICAgeyBwcm92aWRlOiBLZXlTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdEtleVNlcmlhbGl6ZXIgfSxcbiAgICAgICAgeyBwcm92aWRlOiBIdHRwQ2FjaGVTdG9yYWdlLCB1c2VDbGFzczogRGVmYXVsdEh0dHBDYWNoZVN0b3JhZ2UgfSxcbiAgICAgICAgeyBwcm92aWRlOiBUVExNYW5hZ2VyLCB1c2VDbGFzczogRGVmYXVsdFRUTE1hbmFnZXIgfSxcbiAgICAgICAgeyBwcm92aWRlOiBIdHRwQ2FjaGVHdWFyZCwgdXNlQ2xhc3M6IERlZmF1bHRIdHRwQ2FjaGVHdWFyZCB9LFxuICAgICAgICB7IHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogSHR0cENhY2hlSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlIH0sXG4gICAgICAgIEh0dHBDYWNoZU1hbmFnZXIsXG4gICAgICAgIFJlcXVlc3RzUXVldWVcbiAgICAgIF0sXG4gICAgICBuZ01vZHVsZTogSHR0cENhY2hlSW50ZXJjZXB0b3JNb2R1bGVcbiAgICB9O1xuICB9XG59XG4iXX0=