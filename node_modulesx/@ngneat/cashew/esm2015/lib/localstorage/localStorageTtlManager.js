/**
 * @fileoverview added by tsickle
 * Generated from: lib/localstorage/localStorageTtlManager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from '../httpCacheConfig';
import { DefaultTTLManager } from '../ttlManager';
import { deleteByRegex } from '../deleteByRegex';
import { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';
export class LocalStorageTTLManager {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.ttlStorageKey = `${config.localStorageKey}TTL`;
        this.ttl = new DefaultTTLManager(config);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    isValid(key) {
        /** @type {?} */
        const valid = this.ttl.isValid(key);
        if (valid) {
            return true;
        }
        /** @type {?} */
        const localStorageTimeStamp = getStorageCache(this.ttlStorageKey).get(key);
        /** @type {?} */
        const validInStorage = localStorageTimeStamp > new Date().getTime();
        if (validInStorage) {
            this.ttl.set(key, localStorageTimeStamp - new Date().getTime());
        }
        return validInStorage;
    }
    /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    set(key, ttl) {
        /** @type {?} */
        const resolveTTL = ttl || this.config.ttl;
        /** @type {?} */
        const storage = getStorageCache(this.ttlStorageKey);
        storage.set(key, new Date().setMilliseconds(resolveTTL));
        setCacheInStorage(this.ttlStorageKey, storage);
        this.ttl.set(key, resolveTTL);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    delete(key) {
        this.ttl.delete(key);
        if (!key) {
            clearStorageCache(this.ttlStorageKey);
            return;
        }
        if (typeof key === 'string') {
            /** @type {?} */
            const storage = getStorageCache(this.ttlStorageKey);
            storage.delete(key);
            setCacheInStorage(this.ttlStorageKey, storage);
            return;
        }
        /** @type {?} */
        const storage = getStorageCache(this.ttlStorageKey);
        deleteByRegex((/** @type {?} */ (key)), storage);
        setCacheInStorage(this.ttlStorageKey, storage);
    }
}
LocalStorageTTLManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalStorageTTLManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.ttl;
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.ttlStorageKey;
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlVHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL2xvY2Fsc3RvcmFnZS9sb2NhbFN0b3JhZ2VUdGxNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFtQixNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3ZGLE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFJakMsWUFBK0MsTUFBdUI7UUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDcEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLE1BQU0sQ0FBQyxlQUFlLEtBQUssQ0FBQztRQUNwRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsR0FBVzs7Y0FDWCxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ25DLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxJQUFJLENBQUM7U0FDYjs7Y0FFSyxxQkFBcUIsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7O2NBQ3BFLGNBQWMsR0FBRyxxQkFBcUIsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRTtRQUVuRSxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFZOztjQUNyQixVQUFVLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRzs7Y0FDbkMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDekQsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBcUI7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN0QyxPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTs7a0JBQ3JCLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNuRCxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0MsT0FBTztTQUNSOztjQUVLLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNuRCxhQUFhLENBQUMsbUJBQUEsR0FBRyxFQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7WUFwREYsVUFBVTs7Ozs0Q0FLSSxNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7O0lBSHJDLHFDQUF3Qzs7Ozs7SUFDeEMsK0NBQXVDOzs7OztJQUUzQix3Q0FBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuLi9odHRwQ2FjaGVDb25maWcnO1xuaW1wb3J0IHsgRGVmYXVsdFRUTE1hbmFnZXIgfSBmcm9tICcuLi90dGxNYW5hZ2VyJztcbmltcG9ydCB7IGRlbGV0ZUJ5UmVnZXggfSBmcm9tICcuLi9kZWxldGVCeVJlZ2V4JztcbmltcG9ydCB7IHNldENhY2hlSW5TdG9yYWdlLCBnZXRTdG9yYWdlQ2FjaGUsIGNsZWFyU3RvcmFnZUNhY2hlIH0gZnJvbSAnLi9sb2NhbHN0b3JhZ2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlVFRMTWFuYWdlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHRsOiBEZWZhdWx0VFRMTWFuYWdlcjtcbiAgcHJpdmF0ZSByZWFkb25seSB0dGxTdG9yYWdlS2V5OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChIVFRQX0NBQ0hFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEh0dHBDYWNoZUNvbmZpZykge1xuICAgIHRoaXMudHRsU3RvcmFnZUtleSA9IGAke2NvbmZpZy5sb2NhbFN0b3JhZ2VLZXl9VFRMYDtcbiAgICB0aGlzLnR0bCA9IG5ldyBEZWZhdWx0VFRMTWFuYWdlcihjb25maWcpO1xuICB9XG5cbiAgaXNWYWxpZChrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHZhbGlkID0gdGhpcy50dGwuaXNWYWxpZChrZXkpO1xuICAgIGlmICh2YWxpZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbG9jYWxTdG9yYWdlVGltZVN0YW1wID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMudHRsU3RvcmFnZUtleSkuZ2V0KGtleSk7XG4gICAgY29uc3QgdmFsaWRJblN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VUaW1lU3RhbXAgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGlmICh2YWxpZEluU3RvcmFnZSkge1xuICAgICAgdGhpcy50dGwuc2V0KGtleSwgbG9jYWxTdG9yYWdlVGltZVN0YW1wIC0gbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZEluU3RvcmFnZTtcbiAgfVxuXG4gIHNldChrZXk6IHN0cmluZywgdHRsPzogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzb2x2ZVRUTCA9IHR0bCB8fCB0aGlzLmNvbmZpZy50dGw7XG4gICAgY29uc3Qgc3RvcmFnZSA9IGdldFN0b3JhZ2VDYWNoZSh0aGlzLnR0bFN0b3JhZ2VLZXkpO1xuICAgIHN0b3JhZ2Uuc2V0KGtleSwgbmV3IERhdGUoKS5zZXRNaWxsaXNlY29uZHMocmVzb2x2ZVRUTCkpO1xuICAgIHNldENhY2hlSW5TdG9yYWdlKHRoaXMudHRsU3RvcmFnZUtleSwgc3RvcmFnZSk7XG4gICAgdGhpcy50dGwuc2V0KGtleSwgcmVzb2x2ZVRUTCk7XG4gIH1cblxuICBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwKSB7XG4gICAgdGhpcy50dGwuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgY2xlYXJTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICAgIHN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnR0bFN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICBkZWxldGVCeVJlZ2V4KGtleSBhcyBSZWdFeHAsIHN0b3JhZ2UpO1xuICAgIHNldENhY2hlSW5TdG9yYWdlKHRoaXMudHRsU3RvcmFnZUtleSwgc3RvcmFnZSk7XG4gIH1cbn1cbiJdfQ==