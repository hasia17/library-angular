/**
 * @fileoverview added by tsickle
 * Generated from: lib/localstorage/httpCacheLocalStorage.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { deleteByRegex } from '../deleteByRegex';
import { DefaultHttpCacheStorage } from '../httpCacheStorage';
import { HTTP_CACHE_CONFIG } from '../httpCacheConfig';
import { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';
export class HttpCacheLocalStorage {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.cache = new DefaultHttpCacheStorage();
        this.storageKey = config.localStorageKey;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return this.cache.has(key) || getStorageCache(this.storageKey).has(key);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        /** @type {?} */
        const cacheValue = this.cache.get(key);
        if (cacheValue) {
            return cacheValue;
        }
        /** @type {?} */
        const value = getStorageCache(this.storageKey).get(key);
        if (value) {
            /** @type {?} */
            const response = new HttpResponse(value);
            this.cache.set(key, response);
        }
        return this.cache.get(key);
    }
    /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    set(key, response) {
        /** @type {?} */
        const storage = getStorageCache(this.storageKey);
        storage.set(key, response);
        setCacheInStorage(this.storageKey, storage);
        this.cache.set(key, response);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    delete(key) {
        this.cache.delete(key);
        if (!key) {
            clearStorageCache(this.storageKey);
            return;
        }
        /** @type {?} */
        const storage = getStorageCache(this.storageKey);
        if (typeof key === 'string') {
            storage.delete(key);
            setCacheInStorage(this.storageKey, storage);
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), storage);
        setCacheInStorage(this.storageKey, storage);
    }
}
HttpCacheLocalStorage.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpCacheLocalStorage.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.storageKey;
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlTG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvbG9jYWxzdG9yYWdlL2h0dHBDYWNoZUxvY2FsU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHVCQUF1QixFQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdkYsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUloQyxZQUErQyxNQUF1QjtRQUF2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUhyRCxVQUFLLEdBQUcsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBSXJELElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxRSxDQUFDOzs7OztJQUVELEdBQUcsQ0FBQyxHQUFXOztjQUNQLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDdEMsSUFBSSxVQUFVLEVBQUU7WUFDZCxPQUFPLFVBQVUsQ0FBQztTQUNuQjs7Y0FFSyxLQUFLLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3ZELElBQUksS0FBSyxFQUFFOztrQkFDSCxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMvQjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxRQUEyQjs7Y0FDcEMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLEdBQXFCO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkMsT0FBTztTQUNSOztjQUVLLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUVoRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDNUMsT0FBTztTQUNSO1FBRUQsYUFBYSxDQUFDLG1CQUFBLEdBQUcsRUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7O1lBckRGLFVBQVU7Ozs7NENBS0ksTUFBTSxTQUFDLGlCQUFpQjs7Ozs7OztJQUhyQyxzQ0FBdUQ7Ozs7O0lBQ3ZELDJDQUFvQzs7Ozs7SUFFeEIsdUNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWxldGVCeVJlZ2V4IH0gZnJvbSAnLi4vZGVsZXRlQnlSZWdleCc7XG5pbXBvcnQgeyBEZWZhdWx0SHR0cENhY2hlU3RvcmFnZSwgSHR0cENhY2hlU3RvcmFnZSB9IGZyb20gJy4uL2h0dHBDYWNoZVN0b3JhZ2UnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4uL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBzZXRDYWNoZUluU3RvcmFnZSwgZ2V0U3RvcmFnZUNhY2hlLCBjbGVhclN0b3JhZ2VDYWNoZSB9IGZyb20gJy4vbG9jYWxzdG9yYWdlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZUxvY2FsU3RvcmFnZSBpbXBsZW1lbnRzIEh0dHBDYWNoZVN0b3JhZ2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlID0gbmV3IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWcpIHtcbiAgICB0aGlzLnN0b3JhZ2VLZXkgPSBjb25maWcubG9jYWxTdG9yYWdlS2V5O1xuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSkgfHwgZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSkuaGFzKGtleSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcpOiBIdHRwUmVzcG9uc2U8YW55PiB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKGNhY2hlVmFsdWUpIHtcbiAgICAgIHJldHVybiBjYWNoZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSkuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBIdHRwUmVzcG9uc2UodmFsdWUpO1xuICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55Pik6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy5zdG9yYWdlS2V5KTtcbiAgICBzdG9yYWdlLnNldChrZXksIHJlc3BvbnNlKTtcbiAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgcmVzcG9uc2UpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgY2xlYXJTdG9yYWdlQ2FjaGUodGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSk7XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGV0ZUJ5UmVnZXgoa2V5IGFzIFJlZ0V4cCwgc3RvcmFnZSk7XG4gICAgc2V0Q2FjaGVJblN0b3JhZ2UodGhpcy5zdG9yYWdlS2V5LCBzdG9yYWdlKTtcbiAgfVxufVxuIl19