/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheStorage.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { deleteByRegex } from './deleteByRegex';
/**
 * @abstract
 */
export class HttpCacheStorage {
}
if (false) {
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    HttpCacheStorage.prototype.has = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    HttpCacheStorage.prototype.get = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    HttpCacheStorage.prototype.set = function (key, response) { };
    /**
     * @abstract
     * @param {?=} key
     * @return {?}
     */
    HttpCacheStorage.prototype.delete = function (key) { };
}
export class DefaultHttpCacheStorage {
    constructor() {
        this.cache = new Map();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return this.cache.has(key);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return this.cache.get(key);
    }
    /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    set(key, response) {
        this.cache.set(key, response);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    delete(key) {
        if (!key) {
            this.cache.clear();
            return;
        }
        if (typeof key === 'string') {
            this.cache.delete((/** @type {?} */ (key)));
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), this.cache);
    }
}
DefaultHttpCacheStorage.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultHttpCacheStorage.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlU3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL2h0dHBDYWNoZVN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUVoRCxNQUFNLE9BQWdCLGdCQUFnQjtDQUtyQzs7Ozs7OztJQUpDLG9EQUFtQzs7Ozs7O0lBQ25DLG9EQUE2Qzs7Ozs7OztJQUM3Qyw4REFBNkQ7Ozs7OztJQUM3RCx1REFBNkM7O0FBSS9DLE1BQU0sT0FBTyx1QkFBdUI7SUFEcEM7UUFFVSxVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7SUEyQnZELENBQUM7Ozs7O0lBekJDLEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQTJCO1FBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxHQUFxQjtRQUMxQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxHQUFHLEVBQVUsQ0FBQyxDQUFDO1lBQ2pDLE9BQU87U0FDUjtRQUVELGFBQWEsQ0FBQyxtQkFBQSxHQUFHLEVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7O1lBNUJGLFVBQVU7Ozs7Ozs7SUFFVCx3Q0FBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWxldGVCeVJlZ2V4IH0gZnJvbSAnLi9kZWxldGVCeVJlZ2V4JztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEh0dHBDYWNoZVN0b3JhZ2Uge1xuICBhYnN0cmFjdCBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuO1xuICBhYnN0cmFjdCBnZXQoa2V5OiBzdHJpbmcpOiBIdHRwUmVzcG9uc2U8YW55PjtcbiAgYWJzdHJhY3Qgc2V0KGtleTogc3RyaW5nLCByZXNwb25zZTogSHR0cFJlc3BvbnNlPGFueT4pOiB2b2lkO1xuICBhYnN0cmFjdCBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwKTogdm9pZDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlIGltcGxlbWVudHMgSHR0cENhY2hlU3RvcmFnZSB7XG4gIHByaXZhdGUgY2FjaGUgPSBuZXcgTWFwPHN0cmluZywgSHR0cFJlc3BvbnNlPGFueT4+KCk7XG5cbiAgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgfVxuXG4gIHNldChrZXk6IHN0cmluZywgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCByZXNwb25zZSk7XG4gIH1cblxuICBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwKTogdm9pZCB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSBhcyBzdHJpbmcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGV0ZUJ5UmVnZXgoa2V5IGFzIFJlZ0V4cCwgdGhpcy5jYWNoZSk7XG4gIH1cbn1cbiJdfQ==