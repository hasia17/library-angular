/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheInterceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { finalize, share, tap } from 'rxjs/operators';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { cloneWithoutParams } from './cloneWithoutParams';
import { KeySerializer } from './keySerializer';
export class HttpCacheInterceptor {
    /**
     * @param {?} httpCacheManager
     * @param {?} keySerializer
     * @param {?} config
     */
    constructor(httpCacheManager, keySerializer, config) {
        this.httpCacheManager = httpCacheManager;
        this.keySerializer = keySerializer;
        this.config = config;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const canActivate = this.httpCacheManager._canActivate(request);
        /** @type {?} */
        const cache = request.params.get('cache$');
        /** @type {?} */
        const ttl = request.params.get('ttl$');
        /** @type {?} */
        const customKey = request.params.get('key$');
        /** @type {?} */
        const bucket = request.params.get('bucket$');
        /** @type {?} */
        const localParameterCodec = request.params.get('parameterCodec$');
        /** @type {?} */
        const globalParameterCodec = this.config.parameterCodec;
        /** @type {?} */
        const parameterCodec = localParameterCodec || globalParameterCodec;
        /** @type {?} */
        const clone = cloneWithoutParams(request, customKey, parameterCodec);
        /** @type {?} */
        const key = this.keySerializer.serialize(clone);
        /** @type {?} */
        const queue = this.httpCacheManager._getQueue();
        if (this.httpCacheManager._isCacheable(canActivate, cache)) {
            bucket && ((/** @type {?} */ (bucket))).add(key);
            if (queue.has(key)) {
                return queue.get(key);
            }
            if (this.httpCacheManager.validate(key)) {
                return of(this.httpCacheManager.get(key));
            }
            /** @type {?} */
            const shared = next.handle(clone).pipe(tap((/**
             * @param {?} event
             * @return {?}
             */
            event => {
                if (event instanceof HttpResponse) {
                    /** @type {?} */
                    const cache = this.httpCacheManager._resolveResponse(event);
                    this.httpCacheManager._set(key, cache, +ttl);
                }
            })), finalize((/**
             * @return {?}
             */
            () => {
                queue.delete(key);
            })), share());
            queue.set(key, shared);
            return shared;
        }
        return next.handle(clone);
    }
}
HttpCacheInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpCacheInterceptor.ctorParameters = () => [
    { type: HttpCacheManager },
    { type: KeySerializer },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.httpCacheManager;
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.keySerializer;
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmduZWF0L2Nhc2hldy8iLCJzb3VyY2VzIjpbImxpYi9odHRwQ2FjaGVJbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBd0QsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUcsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSWhELE1BQU0sT0FBTyxvQkFBb0I7Ozs7OztJQUMvQixZQUNVLGdCQUFrQyxFQUNsQyxhQUE0QixFQUNELE1BQXVCO1FBRmxELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDRCxXQUFNLEdBQU4sTUFBTSxDQUFpQjtJQUN6RCxDQUFDOzs7Ozs7SUFFSixTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjs7Y0FDOUMsV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDOztjQUN6RCxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDOztjQUNwQyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDOztjQUNoQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDOztjQUN0QyxNQUFNLEdBQVEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDOztjQUUzQyxtQkFBbUIsR0FBUSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQzs7Y0FDaEUsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjOztjQUNqRCxjQUFjLEdBQUcsbUJBQW1CLElBQUksb0JBQW9COztjQUU1RCxLQUFLLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUM7O2NBQzlELEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7O2NBQ3pDLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1FBRS9DLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDMUQsTUFBTSxJQUFJLENBQUMsbUJBQUEsTUFBTSxFQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFM0MsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7WUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzQzs7a0JBQ0ssTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUNwQyxHQUFHOzs7O1lBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFOzswQkFDM0IsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7b0JBQzNELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM5QztZQUNILENBQUMsRUFBQyxFQUNGLFFBQVE7OztZQUFDLEdBQUcsRUFBRTtnQkFDWixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsRUFBQyxFQUNGLEtBQUssRUFBRSxDQUNSO1lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFdkIsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7WUFwREYsVUFBVTs7OztZQUxGLGdCQUFnQjtZQUVoQixhQUFhOzRDQVFqQixNQUFNLFNBQUMsaUJBQWlCOzs7Ozs7O0lBRnpCLGdEQUEwQzs7Ozs7SUFDMUMsNkNBQW9DOzs7OztJQUNwQyxzQ0FBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSwgc2hhcmUsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuL2h0dHBDYWNoZUNvbmZpZyc7XG5cbmltcG9ydCB7IEh0dHBDYWNoZU1hbmFnZXIgfSBmcm9tICcuL2h0dHBDYWNoZU1hbmFnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBjbG9uZVdpdGhvdXRQYXJhbXMgfSBmcm9tICcuL2Nsb25lV2l0aG91dFBhcmFtcyc7XG5pbXBvcnQgeyBLZXlTZXJpYWxpemVyIH0gZnJvbSAnLi9rZXlTZXJpYWxpemVyJztcbmltcG9ydCB7IENhY2hlQnVja2V0IH0gZnJvbSAnLi9jYWNoZUJ1Y2tldCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwQ2FjaGVJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cENhY2hlTWFuYWdlcjogSHR0cENhY2hlTWFuYWdlcixcbiAgICBwcml2YXRlIGtleVNlcmlhbGl6ZXI6IEtleVNlcmlhbGl6ZXIsXG4gICAgQEluamVjdChIVFRQX0NBQ0hFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEh0dHBDYWNoZUNvbmZpZ1xuICApIHt9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGNvbnN0IGNhbkFjdGl2YXRlID0gdGhpcy5odHRwQ2FjaGVNYW5hZ2VyLl9jYW5BY3RpdmF0ZShyZXF1ZXN0KTtcbiAgICBjb25zdCBjYWNoZSA9IHJlcXVlc3QucGFyYW1zLmdldCgnY2FjaGUkJyk7XG4gICAgY29uc3QgdHRsID0gcmVxdWVzdC5wYXJhbXMuZ2V0KCd0dGwkJyk7XG4gICAgY29uc3QgY3VzdG9tS2V5ID0gcmVxdWVzdC5wYXJhbXMuZ2V0KCdrZXkkJyk7XG4gICAgY29uc3QgYnVja2V0OiBhbnkgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ2J1Y2tldCQnKTtcblxuICAgIGNvbnN0IGxvY2FsUGFyYW1ldGVyQ29kZWM6IGFueSA9IHJlcXVlc3QucGFyYW1zLmdldCgncGFyYW1ldGVyQ29kZWMkJyk7XG4gICAgY29uc3QgZ2xvYmFsUGFyYW1ldGVyQ29kZWMgPSB0aGlzLmNvbmZpZy5wYXJhbWV0ZXJDb2RlYztcbiAgICBjb25zdCBwYXJhbWV0ZXJDb2RlYyA9IGxvY2FsUGFyYW1ldGVyQ29kZWMgfHwgZ2xvYmFsUGFyYW1ldGVyQ29kZWM7XG5cbiAgICBjb25zdCBjbG9uZSA9IGNsb25lV2l0aG91dFBhcmFtcyhyZXF1ZXN0LCBjdXN0b21LZXksIHBhcmFtZXRlckNvZGVjKTtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmtleVNlcmlhbGl6ZXIuc2VyaWFsaXplKGNsb25lKTtcbiAgICBjb25zdCBxdWV1ZSA9IHRoaXMuaHR0cENhY2hlTWFuYWdlci5fZ2V0UXVldWUoKTtcblxuICAgIGlmICh0aGlzLmh0dHBDYWNoZU1hbmFnZXIuX2lzQ2FjaGVhYmxlKGNhbkFjdGl2YXRlLCBjYWNoZSkpIHtcbiAgICAgIGJ1Y2tldCAmJiAoYnVja2V0IGFzIENhY2hlQnVja2V0KS5hZGQoa2V5KTtcblxuICAgICAgaWYgKHF1ZXVlLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiBxdWV1ZS5nZXQoa2V5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaHR0cENhY2hlTWFuYWdlci52YWxpZGF0ZShrZXkpKSB7XG4gICAgICAgIHJldHVybiBvZih0aGlzLmh0dHBDYWNoZU1hbmFnZXIuZ2V0KGtleSkpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2hhcmVkID0gbmV4dC5oYW5kbGUoY2xvbmUpLnBpcGUoXG4gICAgICAgIHRhcChldmVudCA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuaHR0cENhY2hlTWFuYWdlci5fcmVzb2x2ZVJlc3BvbnNlKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuaHR0cENhY2hlTWFuYWdlci5fc2V0KGtleSwgY2FjaGUsICt0dGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICBxdWV1ZS5kZWxldGUoa2V5KTtcbiAgICAgICAgfSksXG4gICAgICAgIHNoYXJlKClcbiAgICAgICk7XG5cbiAgICAgIHF1ZXVlLnNldChrZXksIHNoYXJlZCk7XG5cbiAgICAgIHJldHVybiBzaGFyZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKGNsb25lKTtcbiAgfVxufVxuIl19