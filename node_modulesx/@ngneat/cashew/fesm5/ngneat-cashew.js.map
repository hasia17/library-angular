{"version":3,"file":"ngneat-cashew.js.map","sources":["ng://@ngneat/cashew/lib/keySerializer.ts","ng://@ngneat/cashew/lib/httpCacheConfig.ts","ng://@ngneat/cashew/lib/deleteByRegex.ts","ng://@ngneat/cashew/lib/httpCacheStorage.ts","ng://@ngneat/cashew/lib/ttlManager.ts","ng://@ngneat/cashew/lib/httpCacheGuard.ts","ng://@ngneat/cashew/lib/requestsQueue.ts","ng://@ngneat/cashew/lib/cacheBucket.ts","ng://@ngneat/cashew/lib/httpCacheManager.service.ts","ng://@ngneat/cashew/lib/filterParams.ts","ng://@ngneat/cashew/lib/cloneWithoutParams.ts","ng://@ngneat/cashew/lib/httpCacheInterceptor.ts","ng://@ngneat/cashew/lib/httpCacheInterceptor.module.ts","ng://@ngneat/cashew/lib/localstorage/localstorage.ts","ng://@ngneat/cashew/lib/localstorage/httpCacheLocalStorage.ts","ng://@ngneat/cashew/lib/localstorage/localStorageTtlManager.ts","ng://@ngneat/cashew/lib/localstorage/useHttpCacheLocalStorage.ts"],"sourcesContent":["import { HttpCacheRequest } from './types';\n\nexport abstract class KeySerializer {\n  abstract serialize(request: HttpCacheRequest): string;\n}\n\nexport class DefaultKeySerializer extends KeySerializer {\n  serialize(request: HttpCacheRequest) {\n    return request.customKey || request.urlWithParams;\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\nimport { InjectionToken } from '@angular/core';\nimport { CacheBucket } from './cacheBucket';\n\nexport interface HttpCacheConfig {\n  strategy: 'implicit' | 'explicit';\n  ttl: number;\n  responseSerializer?: (value: any) => any;\n  localStorageKey?: string;\n  parameterCodec?: HttpParameterCodec;\n}\n\nexport const defaultConfig: HttpCacheConfig = {\n  strategy: 'explicit',\n  ttl: 3600000, // One hour\n  localStorageKey: 'httpCache'\n};\n\ntype Params = {\n  cache$?: boolean;\n  ttl$?: number;\n  key$?: string;\n  bucket$?: CacheBucket;\n  parameterCodec$?: HttpParameterCodec;\n  [key: string]: any;\n};\n\nexport function withCache(params: Params = {}): { params: Params } {\n  return {\n    params: {\n      cache$: true,\n      ...params\n    }\n  };\n}\n\nexport function cashewConfig(config: Partial<HttpCacheConfig> = defaultConfig): HttpCacheConfig {\n  return {\n    strategy: config.strategy || defaultConfig.strategy,\n    ttl: config.ttl || defaultConfig.ttl,\n    localStorageKey: config.localStorageKey || defaultConfig.localStorageKey,\n    responseSerializer: config.responseSerializer,\n    parameterCodec: config.parameterCodec\n  };\n}\n\nexport const HTTP_CACHE_CONFIG = new InjectionToken<HttpCacheConfig>('HTTP_CACHE_CONFIG');\n","export function deleteByRegex(pattern: RegExp, cache: Map<any, any>) {\n  for (const [key] of Array.from(cache)) {\n    if ((pattern as RegExp).test(key)) {\n      cache.delete(key);\n      break;\n    }\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { deleteByRegex } from './deleteByRegex';\n\nexport abstract class HttpCacheStorage {\n  abstract has(key: string): boolean;\n  abstract get(key: string): HttpResponse<any>;\n  abstract set(key: string, response: HttpResponse<any>): void;\n  abstract delete(key?: string | RegExp): void;\n}\n\n@Injectable()\nexport class DefaultHttpCacheStorage implements HttpCacheStorage {\n  private cache = new Map<string, HttpResponse<any>>();\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  get(key: string) {\n    return this.cache.get(key);\n  }\n\n  set(key: string, response: HttpResponse<any>): void {\n    this.cache.set(key, response);\n  }\n\n  delete(key?: string | RegExp): void {\n    if (!key) {\n      this.cache.clear();\n      return;\n    }\n\n    if (typeof key === 'string') {\n      this.cache.delete(key as string);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, this.cache);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { deleteByRegex } from './deleteByRegex';\n\nexport abstract class TTLManager {\n  abstract isValid(key: string): boolean;\n  abstract set(key: string, ttl?: number): void;\n  abstract delete(key?: string | RegExp): void;\n}\n\n@Injectable()\nexport class DefaultTTLManager {\n  private cache = new Map<string, number>();\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {}\n\n  isValid(key: string): boolean {\n    return this.cache.get(key) > new Date().getTime();\n  }\n\n  set(key: string, ttl?: number): void {\n    let resolveTTL = ttl || this.config.ttl;\n\n    this.cache.set(key, new Date().setMilliseconds(resolveTTL));\n  }\n\n  delete(key?: string | RegExp): void {\n    if (!key) {\n      this.cache.clear();\n      return;\n    }\n\n    if (typeof key === 'string') {\n      this.cache.delete(key as string);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, this.cache);\n  }\n}\n","import { HttpCacheRequest } from './types';\n\nexport abstract class HttpCacheGuard {\n  abstract canActivate(request: HttpCacheRequest): boolean;\n}\n\nexport class DefaultHttpCacheGuard implements HttpCacheGuard {\n  canActivate(request: HttpCacheRequest): boolean {\n    return request.method === 'GET' && request.responseType === 'json';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RequestsQueue {\n  private queue = new Map();\n\n  get(key: string) {\n    return this.queue.get(key);\n  }\n\n  has(key: string) {\n    return this.queue.has(key);\n  }\n\n  set(key: string, shared: Observable<HttpEvent<any>>) {\n    this.queue.set(key, shared);\n  }\n\n  delete(key: string) {\n    this.queue.delete(key);\n  }\n}\n","export class CacheBucket {\n  private keys = new Set();\n\n  add(key: string) {\n    this.keys.add(key);\n  }\n\n  has(key: string) {\n    return this.keys.has(key);\n  }\n\n  forEach(cb) {\n    this.keys.forEach(cb);\n  }\n\n  delete(key: string) {\n    this.keys.delete(key);\n  }\n\n  clear() {\n    this.keys.clear();\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheStorage } from './httpCacheStorage';\nimport { TTLManager } from './ttlManager';\nimport { HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\nimport { HttpCacheRequest } from './types';\nimport { CacheBucket } from './cacheBucket';\n\n@Injectable()\nexport class HttpCacheManager {\n  constructor(\n    private queue: RequestsQueue,\n    private storage: HttpCacheStorage,\n    private guard: HttpCacheGuard,\n    private ttlManager: TTLManager,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  validate(key: string) {\n    const has = this.storage.has(key);\n    const isValid = this.ttlManager.isValid(key);\n    if (has && isValid) return true;\n\n    this.storage.delete(key);\n    return false;\n  }\n\n  get<T = any>(key: string): HttpResponse<T> {\n    return this._resolveResponse<T>(this.storage.get(key));\n  }\n\n  has(key: string) {\n    return this.storage.has(key);\n  }\n\n  set(key: string, body: HttpResponse<any> | any, { ttl, bucket }: { ttl?: number; bucket?: CacheBucket } = {}) {\n    let response = body;\n\n    if (!(body instanceof HttpResponse)) {\n      response = new HttpResponse({\n        body,\n        status: 200,\n        url: key\n      });\n    }\n\n    this._set(key, response, ttl);\n    bucket && bucket.add(key);\n  }\n\n  delete(key?: string | RegExp | CacheBucket): void {\n    if (key instanceof CacheBucket) {\n      key.forEach(value => this.delete(value));\n      key.clear();\n      return;\n    }\n\n    this.storage.delete(key);\n    this.ttlManager.delete(key);\n  }\n\n  _getQueue(): RequestsQueue {\n    return this.queue;\n  }\n\n  _isCacheable(canActivate: boolean, cache: any) {\n    const strategy = this.config.strategy;\n    if (strategy === 'explicit') {\n      return cache;\n    }\n\n    if (canActivate && strategy === 'implicit') {\n      return cache !== false;\n    }\n\n    return false;\n  }\n\n  _set(key: string, response: HttpResponse<any>, ttl: number) {\n    this.storage.set(key, response);\n    this.ttlManager.set(key, ttl);\n  }\n\n  _canActivate(request: HttpCacheRequest) {\n    return this.guard.canActivate(request);\n  }\n\n  _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T> {\n    return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;\n  }\n}\n","import { HttpCacheRequest } from './types';\n\nconst filterKeys = ['ttl$', 'cache$', 'key$', 'bucket$', 'parameterCodec$'];\n\nexport function filterParams(request: HttpCacheRequest) {\n  return request.params.keys().reduce((acc, key) => {\n    if (filterKeys.includes(key) === false) {\n      acc[key] = request.params.getAll(key);\n    }\n\n    return acc;\n  }, {});\n}\n","import { HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { filterParams } from './filterParams';\nimport { HttpCacheRequest } from './types';\n\nexport function cloneWithoutParams(\n  request: HttpCacheRequest,\n  customKey: string,\n  parameterCodec?: HttpParameterCodec\n): HttpCacheRequest {\n  const filteredParams = filterParams(request);\n\n  const clone = request.clone({\n    params: new HttpParams({\n      fromObject: filteredParams,\n      ...(parameterCodec && { encoder: parameterCodec })\n    })\n  });\n\n  (clone as HttpCacheRequest).customKey = customKey;\n\n  return clone as HttpCacheRequest;\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { finalize, share, tap } from 'rxjs/operators';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\n\nimport { HttpCacheManager } from './httpCacheManager.service';\nimport { cloneWithoutParams } from './cloneWithoutParams';\nimport { KeySerializer } from './keySerializer';\nimport { CacheBucket } from './cacheBucket';\n\n@Injectable()\nexport class HttpCacheInterceptor implements HttpInterceptor {\n  constructor(\n    private httpCacheManager: HttpCacheManager,\n    private keySerializer: KeySerializer,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const canActivate = this.httpCacheManager._canActivate(request);\n    const cache = request.params.get('cache$');\n    const ttl = request.params.get('ttl$');\n    const customKey = request.params.get('key$');\n    const bucket: any = request.params.get('bucket$');\n\n    const localParameterCodec: any = request.params.get('parameterCodec$');\n    const globalParameterCodec = this.config.parameterCodec;\n    const parameterCodec = localParameterCodec || globalParameterCodec;\n\n    const clone = cloneWithoutParams(request, customKey, parameterCodec);\n    const key = this.keySerializer.serialize(clone);\n    const queue = this.httpCacheManager._getQueue();\n\n    if (this.httpCacheManager._isCacheable(canActivate, cache)) {\n      bucket && (bucket as CacheBucket).add(key);\n\n      if (queue.has(key)) {\n        return queue.get(key);\n      }\n\n      if (this.httpCacheManager.validate(key)) {\n        return of(this.httpCacheManager.get(key));\n      }\n      const shared = next.handle(clone).pipe(\n        tap(event => {\n          if (event instanceof HttpResponse) {\n            const cache = this.httpCacheManager._resolveResponse(event);\n            this.httpCacheManager._set(key, cache, +ttl);\n          }\n        }),\n        finalize(() => {\n          queue.delete(key);\n        }),\n        share()\n      );\n\n      queue.set(key, shared);\n\n      return shared;\n    }\n\n    return next.handle(clone);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpCacheInterceptor } from './httpCacheInterceptor';\nimport { DefaultKeySerializer, KeySerializer } from './keySerializer';\nimport { DefaultHttpCacheStorage, HttpCacheStorage } from './httpCacheStorage';\nimport { defaultConfig, HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheManager } from './httpCacheManager.service';\nimport { DefaultTTLManager, TTLManager } from './ttlManager';\nimport { DefaultHttpCacheGuard, HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\n\n@NgModule({})\nexport class HttpCacheInterceptorModule {\n  static forRoot(config: Partial<HttpCacheConfig> = {}): ModuleWithProviders<HttpCacheInterceptorModule> {\n    return {\n      providers: [\n        { provide: HTTP_CACHE_CONFIG, useValue: { ...defaultConfig, ...config } },\n        { provide: KeySerializer, useClass: DefaultKeySerializer },\n        { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },\n        { provide: TTLManager, useClass: DefaultTTLManager },\n        { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },\n        { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },\n        HttpCacheManager,\n        RequestsQueue\n      ],\n      ngModule: HttpCacheInterceptorModule\n    };\n  }\n}\n","export function setCacheInStorage(key: string, storage: Map<string, any>) {\n  localStorage.setItem(key, JSON.stringify(mapToObj(storage)));\n}\n\nexport function getStorageCache(key: string): Map<string, any> {\n  const storage = JSON.parse(localStorage.getItem(key) || '{}');\n  const map = new Map();\n  Object.keys(storage).forEach(key => map.set(key, storage[key]));\n\n  return map;\n}\n\nexport function clearStorageCache(key: string) {\n  localStorage.removeItem(key);\n}\n\nfunction mapToObj(map: Map<any, any>) {\n  return Array.from(map).reduce((obj, [key, value]) => {\n    obj[key] = value;\n    return obj;\n  }, {});\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { deleteByRegex } from '../deleteByRegex';\nimport { DefaultHttpCacheStorage, HttpCacheStorage } from '../httpCacheStorage';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from '../httpCacheConfig';\nimport { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';\n\n@Injectable()\nexport class HttpCacheLocalStorage implements HttpCacheStorage {\n  private readonly cache = new DefaultHttpCacheStorage();\n  private readonly storageKey: string;\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    this.storageKey = config.localStorageKey;\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key) || getStorageCache(this.storageKey).has(key);\n  }\n\n  get(key: string): HttpResponse<any> {\n    const cacheValue = this.cache.get(key);\n    if (cacheValue) {\n      return cacheValue;\n    }\n\n    const value = getStorageCache(this.storageKey).get(key);\n    if (value) {\n      const response = new HttpResponse(value);\n      this.cache.set(key, response);\n    }\n\n    return this.cache.get(key);\n  }\n\n  set(key: string, response: HttpResponse<any>): void {\n    const storage = getStorageCache(this.storageKey);\n    storage.set(key, response);\n    setCacheInStorage(this.storageKey, storage);\n    this.cache.set(key, response);\n  }\n\n  delete(key?: string | RegExp): void {\n    this.cache.delete(key);\n\n    if (!key) {\n      clearStorageCache(this.storageKey);\n      return;\n    }\n\n    const storage = getStorageCache(this.storageKey);\n\n    if (typeof key === 'string') {\n      storage.delete(key);\n      setCacheInStorage(this.storageKey, storage);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, storage);\n    setCacheInStorage(this.storageKey, storage);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from '../httpCacheConfig';\nimport { DefaultTTLManager } from '../ttlManager';\nimport { deleteByRegex } from '../deleteByRegex';\nimport { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';\n\n@Injectable()\nexport class LocalStorageTTLManager {\n  private readonly ttl: DefaultTTLManager;\n  private readonly ttlStorageKey: string;\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    this.ttlStorageKey = `${config.localStorageKey}TTL`;\n    this.ttl = new DefaultTTLManager(config);\n  }\n\n  isValid(key: string): boolean {\n    const valid = this.ttl.isValid(key);\n    if (valid) {\n      return true;\n    }\n\n    const localStorageTimeStamp = getStorageCache(this.ttlStorageKey).get(key);\n    const validInStorage = localStorageTimeStamp > new Date().getTime();\n\n    if (validInStorage) {\n      this.ttl.set(key, localStorageTimeStamp - new Date().getTime());\n    }\n\n    return validInStorage;\n  }\n\n  set(key: string, ttl?: number) {\n    const resolveTTL = ttl || this.config.ttl;\n    const storage = getStorageCache(this.ttlStorageKey);\n    storage.set(key, new Date().setMilliseconds(resolveTTL));\n    setCacheInStorage(this.ttlStorageKey, storage);\n    this.ttl.set(key, resolveTTL);\n  }\n\n  delete(key?: string | RegExp) {\n    this.ttl.delete(key);\n\n    if (!key) {\n      clearStorageCache(this.ttlStorageKey);\n      return;\n    }\n\n    if (typeof key === 'string') {\n      const storage = getStorageCache(this.ttlStorageKey);\n      storage.delete(key);\n      setCacheInStorage(this.ttlStorageKey, storage);\n      return;\n    }\n\n    const storage = getStorageCache(this.ttlStorageKey);\n    deleteByRegex(key as RegExp, storage);\n    setCacheInStorage(this.ttlStorageKey, storage);\n  }\n}\n","import { TTLManager } from '../ttlManager';\nimport { HttpCacheStorage } from '../httpCacheStorage';\nimport { HttpCacheLocalStorage } from './httpCacheLocalStorage';\nimport { LocalStorageTTLManager } from './localStorageTtlManager';\n\nexport const useHttpCacheLocalStorage = [\n  { provide: HttpCacheStorage, useClass: HttpCacheLocalStorage },\n  { provide: TTLManager, useClass: LocalStorageTTLManager }\n];\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}
