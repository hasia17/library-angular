/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheInterceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { finalize, share, tap } from 'rxjs/operators';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { cloneWithoutParams } from './cloneWithoutParams';
import { KeySerializer } from './keySerializer';
var HttpCacheInterceptor = /** @class */ (function () {
    function HttpCacheInterceptor(httpCacheManager, keySerializer, config) {
        this.httpCacheManager = httpCacheManager;
        this.keySerializer = keySerializer;
        this.config = config;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    HttpCacheInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var canActivate = this.httpCacheManager._canActivate(request);
        /** @type {?} */
        var cache = request.params.get('cache$');
        /** @type {?} */
        var ttl = request.params.get('ttl$');
        /** @type {?} */
        var customKey = request.params.get('key$');
        /** @type {?} */
        var bucket = request.params.get('bucket$');
        /** @type {?} */
        var localParameterCodec = request.params.get('parameterCodec$');
        /** @type {?} */
        var globalParameterCodec = this.config.parameterCodec;
        /** @type {?} */
        var parameterCodec = localParameterCodec || globalParameterCodec;
        /** @type {?} */
        var clone = cloneWithoutParams(request, customKey, parameterCodec);
        /** @type {?} */
        var key = this.keySerializer.serialize(clone);
        /** @type {?} */
        var queue = this.httpCacheManager._getQueue();
        if (this.httpCacheManager._isCacheable(canActivate, cache)) {
            bucket && ((/** @type {?} */ (bucket))).add(key);
            if (queue.has(key)) {
                return queue.get(key);
            }
            if (this.httpCacheManager.validate(key)) {
                return of(this.httpCacheManager.get(key));
            }
            /** @type {?} */
            var shared = next.handle(clone).pipe(tap((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof HttpResponse) {
                    /** @type {?} */
                    var cache_1 = _this.httpCacheManager._resolveResponse(event);
                    _this.httpCacheManager._set(key, cache_1, +ttl);
                }
            })), finalize((/**
             * @return {?}
             */
            function () {
                queue.delete(key);
            })), share());
            queue.set(key, shared);
            return shared;
        }
        return next.handle(clone);
    };
    HttpCacheInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpCacheInterceptor.ctorParameters = function () { return [
        { type: HttpCacheManager },
        { type: KeySerializer },
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
    ]; };
    return HttpCacheInterceptor;
}());
export { HttpCacheInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.httpCacheManager;
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.keySerializer;
    /**
     * @type {?}
     * @private
     */
    HttpCacheInterceptor.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmduZWF0L2Nhc2hldy8iLCJzb3VyY2VzIjpbImxpYi9odHRwQ2FjaGVJbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBd0QsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUcsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR2hEO0lBRUUsOEJBQ1UsZ0JBQWtDLEVBQ2xDLGFBQTRCLEVBQ0QsTUFBdUI7UUFGbEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUNELFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQ3pELENBQUM7Ozs7OztJQUVKLHdDQUFTOzs7OztJQUFULFVBQVUsT0FBeUIsRUFBRSxJQUFpQjtRQUF0RCxpQkE0Q0M7O1lBM0NPLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7WUFDekQsS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQzs7WUFDcEMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQzs7WUFDaEMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQzs7WUFDdEMsTUFBTSxHQUFRLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQzs7WUFFM0MsbUJBQW1CLEdBQVEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7O1lBQ2hFLG9CQUFvQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYzs7WUFDakQsY0FBYyxHQUFHLG1CQUFtQixJQUFJLG9CQUFvQjs7WUFFNUQsS0FBSyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDOztZQUM5RCxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDOztZQUN6QyxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtRQUUvQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzFELE1BQU0sSUFBSSxDQUFDLG1CQUFBLE1BQU0sRUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTNDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO1lBRUQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDM0M7O2dCQUNLLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDcEMsR0FBRzs7OztZQUFDLFVBQUEsS0FBSztnQkFDUCxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7O3dCQUMzQixPQUFLLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQztvQkFDM0QsS0FBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQzlDO1lBQ0gsQ0FBQyxFQUFDLEVBQ0YsUUFBUTs7O1lBQUM7Z0JBQ1AsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQixDQUFDLEVBQUMsRUFDRixLQUFLLEVBQUUsQ0FDUjtZQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXZCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Z0JBcERGLFVBQVU7Ozs7Z0JBTEYsZ0JBQWdCO2dCQUVoQixhQUFhO2dEQVFqQixNQUFNLFNBQUMsaUJBQWlCOztJQWdEN0IsMkJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXBEWSxvQkFBb0I7Ozs7OztJQUU3QixnREFBMEM7Ozs7O0lBQzFDLDZDQUFvQzs7Ozs7SUFDcEMsc0NBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUsIHNoYXJlLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIVFRQX0NBQ0hFX0NPTkZJRywgSHR0cENhY2hlQ29uZmlnIH0gZnJvbSAnLi9odHRwQ2FjaGVDb25maWcnO1xuXG5pbXBvcnQgeyBIdHRwQ2FjaGVNYW5hZ2VyIH0gZnJvbSAnLi9odHRwQ2FjaGVNYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgY2xvbmVXaXRob3V0UGFyYW1zIH0gZnJvbSAnLi9jbG9uZVdpdGhvdXRQYXJhbXMnO1xuaW1wb3J0IHsgS2V5U2VyaWFsaXplciB9IGZyb20gJy4va2V5U2VyaWFsaXplcic7XG5pbXBvcnQgeyBDYWNoZUJ1Y2tldCB9IGZyb20gJy4vY2FjaGVCdWNrZXQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cENhY2hlSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHBDYWNoZU1hbmFnZXI6IEh0dHBDYWNoZU1hbmFnZXIsXG4gICAgcHJpdmF0ZSBrZXlTZXJpYWxpemVyOiBLZXlTZXJpYWxpemVyLFxuICAgIEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWdcbiAgKSB7fVxuXG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBjYW5BY3RpdmF0ZSA9IHRoaXMuaHR0cENhY2hlTWFuYWdlci5fY2FuQWN0aXZhdGUocmVxdWVzdCk7XG4gICAgY29uc3QgY2FjaGUgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ2NhY2hlJCcpO1xuICAgIGNvbnN0IHR0bCA9IHJlcXVlc3QucGFyYW1zLmdldCgndHRsJCcpO1xuICAgIGNvbnN0IGN1c3RvbUtleSA9IHJlcXVlc3QucGFyYW1zLmdldCgna2V5JCcpO1xuICAgIGNvbnN0IGJ1Y2tldDogYW55ID0gcmVxdWVzdC5wYXJhbXMuZ2V0KCdidWNrZXQkJyk7XG5cbiAgICBjb25zdCBsb2NhbFBhcmFtZXRlckNvZGVjOiBhbnkgPSByZXF1ZXN0LnBhcmFtcy5nZXQoJ3BhcmFtZXRlckNvZGVjJCcpO1xuICAgIGNvbnN0IGdsb2JhbFBhcmFtZXRlckNvZGVjID0gdGhpcy5jb25maWcucGFyYW1ldGVyQ29kZWM7XG4gICAgY29uc3QgcGFyYW1ldGVyQ29kZWMgPSBsb2NhbFBhcmFtZXRlckNvZGVjIHx8IGdsb2JhbFBhcmFtZXRlckNvZGVjO1xuXG4gICAgY29uc3QgY2xvbmUgPSBjbG9uZVdpdGhvdXRQYXJhbXMocmVxdWVzdCwgY3VzdG9tS2V5LCBwYXJhbWV0ZXJDb2RlYyk7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5rZXlTZXJpYWxpemVyLnNlcmlhbGl6ZShjbG9uZSk7XG4gICAgY29uc3QgcXVldWUgPSB0aGlzLmh0dHBDYWNoZU1hbmFnZXIuX2dldFF1ZXVlKCk7XG5cbiAgICBpZiAodGhpcy5odHRwQ2FjaGVNYW5hZ2VyLl9pc0NhY2hlYWJsZShjYW5BY3RpdmF0ZSwgY2FjaGUpKSB7XG4gICAgICBidWNrZXQgJiYgKGJ1Y2tldCBhcyBDYWNoZUJ1Y2tldCkuYWRkKGtleSk7XG5cbiAgICAgIGlmIChxdWV1ZS5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gcXVldWUuZ2V0KGtleSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmh0dHBDYWNoZU1hbmFnZXIudmFsaWRhdGUoa2V5KSkge1xuICAgICAgICByZXR1cm4gb2YodGhpcy5odHRwQ2FjaGVNYW5hZ2VyLmdldChrZXkpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNoYXJlZCA9IG5leHQuaGFuZGxlKGNsb25lKS5waXBlKFxuICAgICAgICB0YXAoZXZlbnQgPT4ge1xuICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmh0dHBDYWNoZU1hbmFnZXIuX3Jlc29sdmVSZXNwb25zZShldmVudCk7XG4gICAgICAgICAgICB0aGlzLmh0dHBDYWNoZU1hbmFnZXIuX3NldChrZXksIGNhY2hlLCArdHRsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgICAgcXVldWUuZGVsZXRlKGtleSk7XG4gICAgICAgIH0pLFxuICAgICAgICBzaGFyZSgpXG4gICAgICApO1xuXG4gICAgICBxdWV1ZS5zZXQoa2V5LCBzaGFyZWQpO1xuXG4gICAgICByZXR1cm4gc2hhcmVkO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShjbG9uZSk7XG4gIH1cbn1cbiJdfQ==