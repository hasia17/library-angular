/**
 * @fileoverview added by tsickle
 * Generated from: lib/ttlManager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { deleteByRegex } from './deleteByRegex';
/**
 * @abstract
 */
var /**
 * @abstract
 */
TTLManager = /** @class */ (function () {
    function TTLManager() {
    }
    return TTLManager;
}());
/**
 * @abstract
 */
export { TTLManager };
if (false) {
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    TTLManager.prototype.isValid = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    TTLManager.prototype.set = function (key, ttl) { };
    /**
     * @abstract
     * @param {?=} key
     * @return {?}
     */
    TTLManager.prototype.delete = function (key) { };
}
var DefaultTTLManager = /** @class */ (function () {
    function DefaultTTLManager(config) {
        this.config = config;
        this.cache = new Map();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    DefaultTTLManager.prototype.isValid = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cache.get(key) > new Date().getTime();
    };
    /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    DefaultTTLManager.prototype.set = /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    function (key, ttl) {
        /** @type {?} */
        var resolveTTL = ttl || this.config.ttl;
        this.cache.set(key, new Date().setMilliseconds(resolveTTL));
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    DefaultTTLManager.prototype.delete = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (!key) {
            this.cache.clear();
            return;
        }
        if (typeof key === 'string') {
            this.cache.delete((/** @type {?} */ (key)));
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), this.cache);
    };
    DefaultTTLManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultTTLManager.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
    ]; };
    return DefaultTTLManager;
}());
export { DefaultTTLManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultTTLManager.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    DefaultTTLManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL3R0bE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sbUJBQW1CLENBQUM7QUFDdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBRWhEOzs7O0lBQUE7SUFJQSxDQUFDO0lBQUQsaUJBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQzs7Ozs7Ozs7Ozs7SUFIQyxrREFBdUM7Ozs7Ozs7SUFDdkMsbURBQThDOzs7Ozs7SUFDOUMsaURBQTZDOztBQUcvQztJQUlFLDJCQUErQyxNQUF1QjtRQUF2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUY5RCxVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7SUFFK0IsQ0FBQzs7Ozs7SUFFMUUsbUNBQU87Ozs7SUFBUCxVQUFRLEdBQVc7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7OztJQUVELCtCQUFHOzs7OztJQUFILFVBQUksR0FBVyxFQUFFLEdBQVk7O1lBQ3ZCLFVBQVUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHO1FBRXZDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7O0lBRUQsa0NBQU07Ozs7SUFBTixVQUFPLEdBQXFCO1FBQzFCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25CLE9BQU87U0FDUjtRQUVELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLG1CQUFBLEdBQUcsRUFBVSxDQUFDLENBQUM7WUFDakMsT0FBTztTQUNSO1FBRUQsYUFBYSxDQUFDLG1CQUFBLEdBQUcsRUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDOztnQkE1QkYsVUFBVTs7OztnREFJSSxNQUFNLFNBQUMsaUJBQWlCOztJQXlCdkMsd0JBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTVCWSxpQkFBaUI7Ozs7OztJQUM1QixrQ0FBMEM7Ozs7O0lBRTlCLG1DQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4vaHR0cENhY2hlQ29uZmlnJztcbmltcG9ydCB7IGRlbGV0ZUJ5UmVnZXggfSBmcm9tICcuL2RlbGV0ZUJ5UmVnZXgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVFRMTWFuYWdlciB7XG4gIGFic3RyYWN0IGlzVmFsaWQoa2V5OiBzdHJpbmcpOiBib29sZWFuO1xuICBhYnN0cmFjdCBzZXQoa2V5OiBzdHJpbmcsIHR0bD86IG51bWJlcik6IHZvaWQ7XG4gIGFic3RyYWN0IGRlbGV0ZShrZXk/OiBzdHJpbmcgfCBSZWdFeHApOiB2b2lkO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRUTE1hbmFnZXIge1xuICBwcml2YXRlIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEhUVFBfQ0FDSEVfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogSHR0cENhY2hlQ29uZmlnKSB7fVxuXG4gIGlzVmFsaWQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoa2V5KSA+IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbiAgc2V0KGtleTogc3RyaW5nLCB0dGw/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQgcmVzb2x2ZVRUTCA9IHR0bCB8fCB0aGlzLmNvbmZpZy50dGw7XG5cbiAgICB0aGlzLmNhY2hlLnNldChrZXksIG5ldyBEYXRlKCkuc2V0TWlsbGlzZWNvbmRzKHJlc29sdmVUVEwpKTtcbiAgfVxuXG4gIGRlbGV0ZShrZXk/OiBzdHJpbmcgfCBSZWdFeHApOiB2b2lkIHtcbiAgICBpZiAoIWtleSkge1xuICAgICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5IGFzIHN0cmluZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlQnlSZWdleChrZXkgYXMgUmVnRXhwLCB0aGlzLmNhY2hlKTtcbiAgfVxufVxuIl19