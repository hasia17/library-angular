/**
 * @fileoverview added by tsickle
 * Generated from: lib/localstorage/httpCacheLocalStorage.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { deleteByRegex } from '../deleteByRegex';
import { DefaultHttpCacheStorage } from '../httpCacheStorage';
import { HTTP_CACHE_CONFIG } from '../httpCacheConfig';
import { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';
var HttpCacheLocalStorage = /** @class */ (function () {
    function HttpCacheLocalStorage(config) {
        this.config = config;
        this.cache = new DefaultHttpCacheStorage();
        this.storageKey = config.localStorageKey;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    HttpCacheLocalStorage.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cache.has(key) || getStorageCache(this.storageKey).has(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HttpCacheLocalStorage.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var cacheValue = this.cache.get(key);
        if (cacheValue) {
            return cacheValue;
        }
        /** @type {?} */
        var value = getStorageCache(this.storageKey).get(key);
        if (value) {
            /** @type {?} */
            var response = new HttpResponse(value);
            this.cache.set(key, response);
        }
        return this.cache.get(key);
    };
    /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    HttpCacheLocalStorage.prototype.set = /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    function (key, response) {
        /** @type {?} */
        var storage = getStorageCache(this.storageKey);
        storage.set(key, response);
        setCacheInStorage(this.storageKey, storage);
        this.cache.set(key, response);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    HttpCacheLocalStorage.prototype.delete = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        this.cache.delete(key);
        if (!key) {
            clearStorageCache(this.storageKey);
            return;
        }
        /** @type {?} */
        var storage = getStorageCache(this.storageKey);
        if (typeof key === 'string') {
            storage.delete(key);
            setCacheInStorage(this.storageKey, storage);
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), storage);
        setCacheInStorage(this.storageKey, storage);
    };
    HttpCacheLocalStorage.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpCacheLocalStorage.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
    ]; };
    return HttpCacheLocalStorage;
}());
export { HttpCacheLocalStorage };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.storageKey;
    /**
     * @type {?}
     * @private
     */
    HttpCacheLocalStorage.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlTG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvbG9jYWxzdG9yYWdlL2h0dHBDYWNoZUxvY2FsU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHVCQUF1QixFQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkY7SUFLRSwrQkFBK0MsTUFBdUI7UUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFIckQsVUFBSyxHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQztRQUlyRCxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCxtQ0FBRzs7OztJQUFILFVBQUksR0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7Ozs7SUFFRCxtQ0FBRzs7OztJQUFILFVBQUksR0FBVzs7WUFDUCxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQ3RDLElBQUksVUFBVSxFQUFFO1lBQ2QsT0FBTyxVQUFVLENBQUM7U0FDbkI7O1lBRUssS0FBSyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUN2RCxJQUFJLEtBQUssRUFBRTs7Z0JBQ0gsUUFBUSxHQUFHLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQztZQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDL0I7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUVELG1DQUFHOzs7OztJQUFILFVBQUksR0FBVyxFQUFFLFFBQTJCOztZQUNwQyxPQUFPLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0IsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxzQ0FBTTs7OztJQUFOLFVBQU8sR0FBcUI7UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuQyxPQUFPO1NBQ1I7O1lBRUssT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRWhELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1QyxPQUFPO1NBQ1I7UUFFRCxhQUFhLENBQUMsbUJBQUEsR0FBRyxFQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDOztnQkFyREYsVUFBVTs7OztnREFLSSxNQUFNLFNBQUMsaUJBQWlCOztJQWlEdkMsNEJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXJEWSxxQkFBcUI7Ozs7OztJQUNoQyxzQ0FBdUQ7Ozs7O0lBQ3ZELDJDQUFvQzs7Ozs7SUFFeEIsdUNBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWxldGVCeVJlZ2V4IH0gZnJvbSAnLi4vZGVsZXRlQnlSZWdleCc7XG5pbXBvcnQgeyBEZWZhdWx0SHR0cENhY2hlU3RvcmFnZSwgSHR0cENhY2hlU3RvcmFnZSB9IGZyb20gJy4uL2h0dHBDYWNoZVN0b3JhZ2UnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4uL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBzZXRDYWNoZUluU3RvcmFnZSwgZ2V0U3RvcmFnZUNhY2hlLCBjbGVhclN0b3JhZ2VDYWNoZSB9IGZyb20gJy4vbG9jYWxzdG9yYWdlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZUxvY2FsU3RvcmFnZSBpbXBsZW1lbnRzIEh0dHBDYWNoZVN0b3JhZ2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlID0gbmV3IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlKCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RvcmFnZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWcpIHtcbiAgICB0aGlzLnN0b3JhZ2VLZXkgPSBjb25maWcubG9jYWxTdG9yYWdlS2V5O1xuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuaGFzKGtleSkgfHwgZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSkuaGFzKGtleSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcpOiBIdHRwUmVzcG9uc2U8YW55PiB7XG4gICAgY29uc3QgY2FjaGVWYWx1ZSA9IHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKGNhY2hlVmFsdWUpIHtcbiAgICAgIHJldHVybiBjYWNoZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSkuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBIdHRwUmVzcG9uc2UodmFsdWUpO1xuICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55Pik6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy5zdG9yYWdlS2V5KTtcbiAgICBzdG9yYWdlLnNldChrZXksIHJlc3BvbnNlKTtcbiAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgcmVzcG9uc2UpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgY2xlYXJTdG9yYWdlQ2FjaGUodGhpcy5zdG9yYWdlS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMuc3RvcmFnZUtleSk7XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGV0ZUJ5UmVnZXgoa2V5IGFzIFJlZ0V4cCwgc3RvcmFnZSk7XG4gICAgc2V0Q2FjaGVJblN0b3JhZ2UodGhpcy5zdG9yYWdlS2V5LCBzdG9yYWdlKTtcbiAgfVxufVxuIl19