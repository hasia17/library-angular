/**
 * @fileoverview added by tsickle
 * Generated from: lib/localstorage/localStorageTtlManager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from '../httpCacheConfig';
import { DefaultTTLManager } from '../ttlManager';
import { deleteByRegex } from '../deleteByRegex';
import { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';
var LocalStorageTTLManager = /** @class */ (function () {
    function LocalStorageTTLManager(config) {
        this.config = config;
        this.ttlStorageKey = config.localStorageKey + "TTL";
        this.ttl = new DefaultTTLManager(config);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageTTLManager.prototype.isValid = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var valid = this.ttl.isValid(key);
        if (valid) {
            return true;
        }
        /** @type {?} */
        var localStorageTimeStamp = getStorageCache(this.ttlStorageKey).get(key);
        /** @type {?} */
        var validInStorage = localStorageTimeStamp > new Date().getTime();
        if (validInStorage) {
            this.ttl.set(key, localStorageTimeStamp - new Date().getTime());
        }
        return validInStorage;
    };
    /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    LocalStorageTTLManager.prototype.set = /**
     * @param {?} key
     * @param {?=} ttl
     * @return {?}
     */
    function (key, ttl) {
        /** @type {?} */
        var resolveTTL = ttl || this.config.ttl;
        /** @type {?} */
        var storage = getStorageCache(this.ttlStorageKey);
        storage.set(key, new Date().setMilliseconds(resolveTTL));
        setCacheInStorage(this.ttlStorageKey, storage);
        this.ttl.set(key, resolveTTL);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    LocalStorageTTLManager.prototype.delete = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        this.ttl.delete(key);
        if (!key) {
            clearStorageCache(this.ttlStorageKey);
            return;
        }
        if (typeof key === 'string') {
            /** @type {?} */
            var storage_1 = getStorageCache(this.ttlStorageKey);
            storage_1.delete(key);
            setCacheInStorage(this.ttlStorageKey, storage_1);
            return;
        }
        /** @type {?} */
        var storage = getStorageCache(this.ttlStorageKey);
        deleteByRegex((/** @type {?} */ (key)), storage);
        setCacheInStorage(this.ttlStorageKey, storage);
    };
    LocalStorageTTLManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LocalStorageTTLManager.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
    ]; };
    return LocalStorageTTLManager;
}());
export { LocalStorageTTLManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.ttl;
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.ttlStorageKey;
    /**
     * @type {?}
     * @private
     */
    LocalStorageTTLManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlVHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL2xvY2Fsc3RvcmFnZS9sb2NhbFN0b3JhZ2VUdGxNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFtQixNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZGO0lBS0UsZ0NBQStDLE1BQXVCO1FBQXZCLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3BFLElBQUksQ0FBQyxhQUFhLEdBQU0sTUFBTSxDQUFDLGVBQWUsUUFBSyxDQUFDO1FBQ3BELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVELHdDQUFPOzs7O0lBQVAsVUFBUSxHQUFXOztZQUNYLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDbkMsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNiOztZQUVLLHFCQUFxQixHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQzs7WUFDcEUsY0FBYyxHQUFHLHFCQUFxQixHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO1FBRW5FLElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFFRCxvQ0FBRzs7Ozs7SUFBSCxVQUFJLEdBQVcsRUFBRSxHQUFZOztZQUNyQixVQUFVLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRzs7WUFDbkMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDekQsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCx1Q0FBTTs7OztJQUFOLFVBQU8sR0FBcUI7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN0QyxPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTs7Z0JBQ3JCLFNBQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUNuRCxTQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsU0FBTyxDQUFDLENBQUM7WUFDL0MsT0FBTztTQUNSOztZQUVLLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNuRCxhQUFhLENBQUMsbUJBQUEsR0FBRyxFQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDOztnQkFwREYsVUFBVTs7OztnREFLSSxNQUFNLFNBQUMsaUJBQWlCOztJQWdEdkMsNkJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXBEWSxzQkFBc0I7Ozs7OztJQUNqQyxxQ0FBd0M7Ozs7O0lBQ3hDLCtDQUF1Qzs7Ozs7SUFFM0Isd0NBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0NBQ0hFX0NPTkZJRywgSHR0cENhY2hlQ29uZmlnIH0gZnJvbSAnLi4vaHR0cENhY2hlQ29uZmlnJztcbmltcG9ydCB7IERlZmF1bHRUVExNYW5hZ2VyIH0gZnJvbSAnLi4vdHRsTWFuYWdlcic7XG5pbXBvcnQgeyBkZWxldGVCeVJlZ2V4IH0gZnJvbSAnLi4vZGVsZXRlQnlSZWdleCc7XG5pbXBvcnQgeyBzZXRDYWNoZUluU3RvcmFnZSwgZ2V0U3RvcmFnZUNhY2hlLCBjbGVhclN0b3JhZ2VDYWNoZSB9IGZyb20gJy4vbG9jYWxzdG9yYWdlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVRUTE1hbmFnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHR0bDogRGVmYXVsdFRUTE1hbmFnZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHRsU3RvcmFnZUtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWcpIHtcbiAgICB0aGlzLnR0bFN0b3JhZ2VLZXkgPSBgJHtjb25maWcubG9jYWxTdG9yYWdlS2V5fVRUTGA7XG4gICAgdGhpcy50dGwgPSBuZXcgRGVmYXVsdFRUTE1hbmFnZXIoY29uZmlnKTtcbiAgfVxuXG4gIGlzVmFsaWQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCB2YWxpZCA9IHRoaXMudHRsLmlzVmFsaWQoa2V5KTtcbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGxvY2FsU3RvcmFnZVRpbWVTdGFtcCA9IGdldFN0b3JhZ2VDYWNoZSh0aGlzLnR0bFN0b3JhZ2VLZXkpLmdldChrZXkpO1xuICAgIGNvbnN0IHZhbGlkSW5TdG9yYWdlID0gbG9jYWxTdG9yYWdlVGltZVN0YW1wID4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAodmFsaWRJblN0b3JhZ2UpIHtcbiAgICAgIHRoaXMudHRsLnNldChrZXksIGxvY2FsU3RvcmFnZVRpbWVTdGFtcCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRJblN0b3JhZ2U7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHR0bD86IG51bWJlcikge1xuICAgIGNvbnN0IHJlc29sdmVUVEwgPSB0dGwgfHwgdGhpcy5jb25maWcudHRsO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICBzdG9yYWdlLnNldChrZXksIG5ldyBEYXRlKCkuc2V0TWlsbGlzZWNvbmRzKHJlc29sdmVUVEwpKTtcbiAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnR0bFN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgIHRoaXMudHRsLnNldChrZXksIHJlc29sdmVUVEwpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIHRoaXMudHRsLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGNsZWFyU3RvcmFnZUNhY2hlKHRoaXMudHRsU3RvcmFnZUtleSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMudHRsU3RvcmFnZUtleSk7XG4gICAgICBzdG9yYWdlLmRlbGV0ZShrZXkpO1xuICAgICAgc2V0Q2FjaGVJblN0b3JhZ2UodGhpcy50dGxTdG9yYWdlS2V5LCBzdG9yYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yYWdlID0gZ2V0U3RvcmFnZUNhY2hlKHRoaXMudHRsU3RvcmFnZUtleSk7XG4gICAgZGVsZXRlQnlSZWdleChrZXkgYXMgUmVnRXhwLCBzdG9yYWdlKTtcbiAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnR0bFN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICB9XG59XG4iXX0=