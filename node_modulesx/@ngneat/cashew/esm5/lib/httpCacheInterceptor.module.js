/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheInterceptor.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { HttpCacheInterceptor } from './httpCacheInterceptor';
import { DefaultKeySerializer, KeySerializer } from './keySerializer';
import { DefaultHttpCacheStorage, HttpCacheStorage } from './httpCacheStorage';
import { defaultConfig, HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { DefaultTTLManager, TTLManager } from './ttlManager';
import { DefaultHttpCacheGuard, HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
var HttpCacheInterceptorModule = /** @class */ (function () {
    function HttpCacheInterceptorModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    HttpCacheInterceptorModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            providers: [
                { provide: HTTP_CACHE_CONFIG, useValue: tslib_1.__assign({}, defaultConfig, config) },
                { provide: KeySerializer, useClass: DefaultKeySerializer },
                { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },
                { provide: TTLManager, useClass: DefaultTTLManager },
                { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },
                { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },
                HttpCacheManager,
                RequestsQueue
            ],
            ngModule: HttpCacheInterceptorModule
        };
    };
    HttpCacheInterceptorModule.decorators = [
        { type: NgModule, args: [{},] }
    ];
    return HttpCacheInterceptorModule;
}());
export { HttpCacheInterceptorModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvaHR0cENhY2hlSW50ZXJjZXB0b3IubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRDtJQUFBO0lBaUJBLENBQUM7Ozs7O0lBZlEsa0NBQU87Ozs7SUFBZCxVQUFlLE1BQXFDO1FBQXJDLHVCQUFBLEVBQUEsV0FBcUM7UUFDbEQsT0FBTztZQUNMLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLHVCQUFPLGFBQWEsRUFBSyxNQUFNLENBQUUsRUFBRTtnQkFDekUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtnQkFDMUQsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO2dCQUNoRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO2dCQUNwRCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2dCQUM1RCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDM0UsZ0JBQWdCO2dCQUNoQixhQUFhO2FBQ2Q7WUFDRCxRQUFRLEVBQUUsMEJBQTBCO1NBQ3JDLENBQUM7SUFDSixDQUFDOztnQkFoQkYsUUFBUSxTQUFDLEVBQUU7O0lBaUJaLGlDQUFDO0NBQUEsQUFqQkQsSUFpQkM7U0FoQlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENhY2hlSW50ZXJjZXB0b3IgfSBmcm9tICcuL2h0dHBDYWNoZUludGVyY2VwdG9yJztcbmltcG9ydCB7IERlZmF1bHRLZXlTZXJpYWxpemVyLCBLZXlTZXJpYWxpemVyIH0gZnJvbSAnLi9rZXlTZXJpYWxpemVyJztcbmltcG9ydCB7IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlLCBIdHRwQ2FjaGVTdG9yYWdlIH0gZnJvbSAnLi9odHRwQ2FjaGVTdG9yYWdlJztcbmltcG9ydCB7IGRlZmF1bHRDb25maWcsIEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBIdHRwQ2FjaGVNYW5hZ2VyIH0gZnJvbSAnLi9odHRwQ2FjaGVNYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGVmYXVsdFRUTE1hbmFnZXIsIFRUTE1hbmFnZXIgfSBmcm9tICcuL3R0bE1hbmFnZXInO1xuaW1wb3J0IHsgRGVmYXVsdEh0dHBDYWNoZUd1YXJkLCBIdHRwQ2FjaGVHdWFyZCB9IGZyb20gJy4vaHR0cENhY2hlR3VhcmQnO1xuaW1wb3J0IHsgUmVxdWVzdHNRdWV1ZSB9IGZyb20gJy4vcmVxdWVzdHNRdWV1ZSc7XG5cbkBOZ01vZHVsZSh7fSlcbmV4cG9ydCBjbGFzcyBIdHRwQ2FjaGVJbnRlcmNlcHRvck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogUGFydGlhbDxIdHRwQ2FjaGVDb25maWc+ID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEh0dHBDYWNoZUludGVyY2VwdG9yTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IEhUVFBfQ0FDSEVfQ09ORklHLCB1c2VWYWx1ZTogeyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEtleVNlcmlhbGl6ZXIsIHVzZUNsYXNzOiBEZWZhdWx0S2V5U2VyaWFsaXplciB9LFxuICAgICAgICB7IHByb3ZpZGU6IEh0dHBDYWNoZVN0b3JhZ2UsIHVzZUNsYXNzOiBEZWZhdWx0SHR0cENhY2hlU3RvcmFnZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IFRUTE1hbmFnZXIsIHVzZUNsYXNzOiBEZWZhdWx0VFRMTWFuYWdlciB9LFxuICAgICAgICB7IHByb3ZpZGU6IEh0dHBDYWNoZUd1YXJkLCB1c2VDbGFzczogRGVmYXVsdEh0dHBDYWNoZUd1YXJkIH0sXG4gICAgICAgIHsgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBIdHRwQ2FjaGVJbnRlcmNlcHRvciwgbXVsdGk6IHRydWUgfSxcbiAgICAgICAgSHR0cENhY2hlTWFuYWdlcixcbiAgICAgICAgUmVxdWVzdHNRdWV1ZVxuICAgICAgXSxcbiAgICAgIG5nTW9kdWxlOiBIdHRwQ2FjaGVJbnRlcmNlcHRvck1vZHVsZVxuICAgIH07XG4gIH1cbn1cbiJdfQ==