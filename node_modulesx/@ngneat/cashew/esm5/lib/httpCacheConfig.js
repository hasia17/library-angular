/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheConfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from '@angular/core';
/**
 * @record
 */
export function HttpCacheConfig() { }
if (false) {
    /** @type {?} */
    HttpCacheConfig.prototype.strategy;
    /** @type {?} */
    HttpCacheConfig.prototype.ttl;
    /** @type {?|undefined} */
    HttpCacheConfig.prototype.responseSerializer;
    /** @type {?|undefined} */
    HttpCacheConfig.prototype.localStorageKey;
    /** @type {?|undefined} */
    HttpCacheConfig.prototype.parameterCodec;
}
/** @type {?} */
export var defaultConfig = {
    strategy: 'explicit',
    ttl: 3600000,
    // One hour
    localStorageKey: 'httpCache'
};
/**
 * @param {?=} params
 * @return {?}
 */
export function withCache(params) {
    if (params === void 0) { params = {}; }
    return {
        params: tslib_1.__assign({ cache$: true }, params)
    };
}
/**
 * @param {?=} config
 * @return {?}
 */
export function cashewConfig(config) {
    if (config === void 0) { config = defaultConfig; }
    return {
        strategy: config.strategy || defaultConfig.strategy,
        ttl: config.ttl || defaultConfig.ttl,
        localStorageKey: config.localStorageKey || defaultConfig.localStorageKey,
        responseSerializer: config.responseSerializer,
        parameterCodec: config.parameterCodec
    };
}
/** @type {?} */
export var HTTP_CACHE_CONFIG = new InjectionToken('HTTP_CACHE_CONFIG');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlQ29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvaHR0cENhY2hlQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFHL0MscUNBTUM7OztJQUxDLG1DQUFrQzs7SUFDbEMsOEJBQVk7O0lBQ1osNkNBQXlDOztJQUN6QywwQ0FBeUI7O0lBQ3pCLHlDQUFvQzs7O0FBR3RDLE1BQU0sS0FBTyxhQUFhLEdBQW9CO0lBQzVDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLEdBQUcsRUFBRSxPQUFPOztJQUNaLGVBQWUsRUFBRSxXQUFXO0NBQzdCOzs7OztBQVdELE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBbUI7SUFBbkIsdUJBQUEsRUFBQSxXQUFtQjtJQUMzQyxPQUFPO1FBQ0wsTUFBTSxxQkFDSixNQUFNLEVBQUUsSUFBSSxJQUNULE1BQU0sQ0FDVjtLQUNGLENBQUM7QUFDSixDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBZ0Q7SUFBaEQsdUJBQUEsRUFBQSxzQkFBZ0Q7SUFDM0UsT0FBTztRQUNMLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLGFBQWEsQ0FBQyxRQUFRO1FBQ25ELEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxHQUFHO1FBQ3BDLGVBQWUsRUFBRSxNQUFNLENBQUMsZUFBZSxJQUFJLGFBQWEsQ0FBQyxlQUFlO1FBQ3hFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxrQkFBa0I7UUFDN0MsY0FBYyxFQUFFLE1BQU0sQ0FBQyxjQUFjO0tBQ3RDLENBQUM7QUFDSixDQUFDOztBQUVELE1BQU0sS0FBTyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsbUJBQW1CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUGFyYW1ldGVyQ29kZWMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FjaGVCdWNrZXQgfSBmcm9tICcuL2NhY2hlQnVja2V0JztcblxuZXhwb3J0IGludGVyZmFjZSBIdHRwQ2FjaGVDb25maWcge1xuICBzdHJhdGVneTogJ2ltcGxpY2l0JyB8ICdleHBsaWNpdCc7XG4gIHR0bDogbnVtYmVyO1xuICByZXNwb25zZVNlcmlhbGl6ZXI/OiAodmFsdWU6IGFueSkgPT4gYW55O1xuICBsb2NhbFN0b3JhZ2VLZXk/OiBzdHJpbmc7XG4gIHBhcmFtZXRlckNvZGVjPzogSHR0cFBhcmFtZXRlckNvZGVjO1xufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZzogSHR0cENhY2hlQ29uZmlnID0ge1xuICBzdHJhdGVneTogJ2V4cGxpY2l0JyxcbiAgdHRsOiAzNjAwMDAwLCAvLyBPbmUgaG91clxuICBsb2NhbFN0b3JhZ2VLZXk6ICdodHRwQ2FjaGUnXG59O1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgY2FjaGUkPzogYm9vbGVhbjtcbiAgdHRsJD86IG51bWJlcjtcbiAga2V5JD86IHN0cmluZztcbiAgYnVja2V0JD86IENhY2hlQnVja2V0O1xuICBwYXJhbWV0ZXJDb2RlYyQ/OiBIdHRwUGFyYW1ldGVyQ29kZWM7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ2FjaGUocGFyYW1zOiBQYXJhbXMgPSB7fSk6IHsgcGFyYW1zOiBQYXJhbXMgfSB7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zOiB7XG4gICAgICBjYWNoZSQ6IHRydWUsXG4gICAgICAuLi5wYXJhbXNcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXNoZXdDb25maWcoY29uZmlnOiBQYXJ0aWFsPEh0dHBDYWNoZUNvbmZpZz4gPSBkZWZhdWx0Q29uZmlnKTogSHR0cENhY2hlQ29uZmlnIHtcbiAgcmV0dXJuIHtcbiAgICBzdHJhdGVneTogY29uZmlnLnN0cmF0ZWd5IHx8IGRlZmF1bHRDb25maWcuc3RyYXRlZ3ksXG4gICAgdHRsOiBjb25maWcudHRsIHx8IGRlZmF1bHRDb25maWcudHRsLFxuICAgIGxvY2FsU3RvcmFnZUtleTogY29uZmlnLmxvY2FsU3RvcmFnZUtleSB8fCBkZWZhdWx0Q29uZmlnLmxvY2FsU3RvcmFnZUtleSxcbiAgICByZXNwb25zZVNlcmlhbGl6ZXI6IGNvbmZpZy5yZXNwb25zZVNlcmlhbGl6ZXIsXG4gICAgcGFyYW1ldGVyQ29kZWM6IGNvbmZpZy5wYXJhbWV0ZXJDb2RlY1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgSFRUUF9DQUNIRV9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48SHR0cENhY2hlQ29uZmlnPignSFRUUF9DQUNIRV9DT05GSUcnKTtcbiJdfQ==