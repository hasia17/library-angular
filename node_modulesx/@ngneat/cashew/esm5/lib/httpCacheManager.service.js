/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheManager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheStorage } from './httpCacheStorage';
import { TTLManager } from './ttlManager';
import { HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
import { CacheBucket } from './cacheBucket';
var HttpCacheManager = /** @class */ (function () {
    function HttpCacheManager(queue, storage, guard, ttlManager, config) {
        this.queue = queue;
        this.storage = storage;
        this.guard = guard;
        this.ttlManager = ttlManager;
        this.config = config;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    HttpCacheManager.prototype.validate = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var has = this.storage.has(key);
        /** @type {?} */
        var isValid = this.ttlManager.isValid(key);
        if (has && isValid)
            return true;
        this.storage.delete(key);
        return false;
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    HttpCacheManager.prototype.get = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._resolveResponse(this.storage.get(key));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    HttpCacheManager.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.storage.has(key);
    };
    /**
     * @param {?} key
     * @param {?} body
     * @param {?=} __2
     * @return {?}
     */
    HttpCacheManager.prototype.set = /**
     * @param {?} key
     * @param {?} body
     * @param {?=} __2
     * @return {?}
     */
    function (key, body, _a) {
        var _b = _a === void 0 ? {} : _a, ttl = _b.ttl, bucket = _b.bucket;
        /** @type {?} */
        var response = body;
        if (!(body instanceof HttpResponse)) {
            response = new HttpResponse({
                body: body,
                status: 200,
                url: key
            });
        }
        this._set(key, response, ttl);
        bucket && bucket.add(key);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    HttpCacheManager.prototype.delete = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        if (key instanceof CacheBucket) {
            key.forEach((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return _this.delete(value); }));
            key.clear();
            return;
        }
        this.storage.delete(key);
        this.ttlManager.delete(key);
    };
    /**
     * @return {?}
     */
    HttpCacheManager.prototype._getQueue = /**
     * @return {?}
     */
    function () {
        return this.queue;
    };
    /**
     * @param {?} canActivate
     * @param {?} cache
     * @return {?}
     */
    HttpCacheManager.prototype._isCacheable = /**
     * @param {?} canActivate
     * @param {?} cache
     * @return {?}
     */
    function (canActivate, cache) {
        /** @type {?} */
        var strategy = this.config.strategy;
        if (strategy === 'explicit') {
            return cache;
        }
        if (canActivate && strategy === 'implicit') {
            return cache !== false;
        }
        return false;
    };
    /**
     * @param {?} key
     * @param {?} response
     * @param {?} ttl
     * @return {?}
     */
    HttpCacheManager.prototype._set = /**
     * @param {?} key
     * @param {?} response
     * @param {?} ttl
     * @return {?}
     */
    function (key, response, ttl) {
        this.storage.set(key, response);
        this.ttlManager.set(key, ttl);
    };
    /**
     * @param {?} request
     * @return {?}
     */
    HttpCacheManager.prototype._canActivate = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return this.guard.canActivate(request);
    };
    /**
     * @template T
     * @param {?} event
     * @return {?}
     */
    HttpCacheManager.prototype._resolveResponse = /**
     * @template T
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;
    };
    HttpCacheManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpCacheManager.ctorParameters = function () { return [
        { type: RequestsQueue },
        { type: HttpCacheStorage },
        { type: HttpCacheGuard },
        { type: TTLManager },
        { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
    ]; };
    return HttpCacheManager;
}());
export { HttpCacheManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.queue;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.guard;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.ttlManager;
    /**
     * @type {?}
     * @private
     */
    HttpCacheManager.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9jYXNoZXcvIiwic291cmNlcyI6WyJsaWIvaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QztJQUVFLDBCQUNVLEtBQW9CLEVBQ3BCLE9BQXlCLEVBQ3pCLEtBQXFCLEVBQ3JCLFVBQXNCLEVBQ0ssTUFBdUI7UUFKbEQsVUFBSyxHQUFMLEtBQUssQ0FBZTtRQUNwQixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQUN6QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ0ssV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFDekQsQ0FBQzs7Ozs7SUFFSixtQ0FBUTs7OztJQUFSLFVBQVMsR0FBVzs7WUFDWixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDOztZQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzVDLElBQUksR0FBRyxJQUFJLE9BQU87WUFB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QUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BILENBQUM7O2dCQWpGRixVQUFVOzs7O2dCQUpGLGFBQWE7Z0JBSGIsZ0JBQWdCO2dCQUVoQixjQUFjO2dCQURkLFVBQVU7Z0RBYWQsTUFBTSxTQUFDLGlCQUFpQjs7SUEyRTdCLHVCQUFDO0NBQUEsQUFsRkQsSUFrRkM7U0FqRlksZ0JBQWdCOzs7Ozs7SUFFekIsaUNBQTRCOzs7OztJQUM1QixtQ0FBaUM7Ozs7O0lBQ2pDLGlDQUE2Qjs7Ozs7SUFDN0Isc0NBQThCOzs7OztJQUM5QixrQ0FBMEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBIdHRwQ2FjaGVTdG9yYWdlIH0gZnJvbSAnLi9odHRwQ2FjaGVTdG9yYWdlJztcbmltcG9ydCB7IFRUTE1hbmFnZXIgfSBmcm9tICcuL3R0bE1hbmFnZXInO1xuaW1wb3J0IHsgSHR0cENhY2hlR3VhcmQgfSBmcm9tICcuL2h0dHBDYWNoZUd1YXJkJztcbmltcG9ydCB7IFJlcXVlc3RzUXVldWUgfSBmcm9tICcuL3JlcXVlc3RzUXVldWUnO1xuaW1wb3J0IHsgSHR0cENhY2hlUmVxdWVzdCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ2FjaGVCdWNrZXQgfSBmcm9tICcuL2NhY2hlQnVja2V0JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHF1ZXVlOiBSZXF1ZXN0c1F1ZXVlLFxuICAgIHByaXZhdGUgc3RvcmFnZTogSHR0cENhY2hlU3RvcmFnZSxcbiAgICBwcml2YXRlIGd1YXJkOiBIdHRwQ2FjaGVHdWFyZCxcbiAgICBwcml2YXRlIHR0bE1hbmFnZXI6IFRUTE1hbmFnZXIsXG4gICAgQEluamVjdChIVFRQX0NBQ0hFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEh0dHBDYWNoZUNvbmZpZ1xuICApIHt9XG5cbiAgdmFsaWRhdGUoa2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBoYXMgPSB0aGlzLnN0b3JhZ2UuaGFzKGtleSk7XG4gICAgY29uc3QgaXNWYWxpZCA9IHRoaXMudHRsTWFuYWdlci5pc1ZhbGlkKGtleSk7XG4gICAgaWYgKGhhcyAmJiBpc1ZhbGlkKSByZXR1cm4gdHJ1ZTtcblxuICAgIHRoaXMuc3RvcmFnZS5kZWxldGUoa2V5KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXQ8VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBIdHRwUmVzcG9uc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUmVzcG9uc2U8VD4odGhpcy5zdG9yYWdlLmdldChrZXkpKTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuaGFzKGtleSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIGJvZHk6IEh0dHBSZXNwb25zZTxhbnk+IHwgYW55LCB7IHR0bCwgYnVja2V0IH06IHsgdHRsPzogbnVtYmVyOyBidWNrZXQ/OiBDYWNoZUJ1Y2tldCB9ID0ge30pIHtcbiAgICBsZXQgcmVzcG9uc2UgPSBib2R5O1xuXG4gICAgaWYgKCEoYm9keSBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkpIHtcbiAgICAgIHJlc3BvbnNlID0gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgICAgIGJvZHksXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICB1cmw6IGtleVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0KGtleSwgcmVzcG9uc2UsIHR0bCk7XG4gICAgYnVja2V0ICYmIGJ1Y2tldC5hZGQoa2V5KTtcbiAgfVxuXG4gIGRlbGV0ZShrZXk/OiBzdHJpbmcgfCBSZWdFeHAgfCBDYWNoZUJ1Y2tldCk6IHZvaWQge1xuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBDYWNoZUJ1Y2tldCkge1xuICAgICAga2V5LmZvckVhY2godmFsdWUgPT4gdGhpcy5kZWxldGUodmFsdWUpKTtcbiAgICAgIGtleS5jbGVhcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmFnZS5kZWxldGUoa2V5KTtcbiAgICB0aGlzLnR0bE1hbmFnZXIuZGVsZXRlKGtleSk7XG4gIH1cblxuICBfZ2V0UXVldWUoKTogUmVxdWVzdHNRdWV1ZSB7XG4gICAgcmV0dXJuIHRoaXMucXVldWU7XG4gIH1cblxuICBfaXNDYWNoZWFibGUoY2FuQWN0aXZhdGU6IGJvb2xlYW4sIGNhY2hlOiBhbnkpIHtcbiAgICBjb25zdCBzdHJhdGVneSA9IHRoaXMuY29uZmlnLnN0cmF0ZWd5O1xuICAgIGlmIChzdHJhdGVneSA9PT0gJ2V4cGxpY2l0Jykge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIGlmIChjYW5BY3RpdmF0ZSAmJiBzdHJhdGVneSA9PT0gJ2ltcGxpY2l0Jykge1xuICAgICAgcmV0dXJuIGNhY2hlICE9PSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBfc2V0KGtleTogc3RyaW5nLCByZXNwb25zZTogSHR0cFJlc3BvbnNlPGFueT4sIHR0bDogbnVtYmVyKSB7XG4gICAgdGhpcy5zdG9yYWdlLnNldChrZXksIHJlc3BvbnNlKTtcbiAgICB0aGlzLnR0bE1hbmFnZXIuc2V0KGtleSwgdHRsKTtcbiAgfVxuXG4gIF9jYW5BY3RpdmF0ZShyZXF1ZXN0OiBIdHRwQ2FjaGVSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHRoaXMuZ3VhcmQuY2FuQWN0aXZhdGUocmVxdWVzdCk7XG4gIH1cblxuICBfcmVzb2x2ZVJlc3BvbnNlPFQgPSBhbnk+KGV2ZW50OiBIdHRwUmVzcG9uc2U8VD4pOiBIdHRwUmVzcG9uc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5yZXNwb25zZVNlcmlhbGl6ZXIgPyBldmVudC5jbG9uZSh7IGJvZHk6IHRoaXMuY29uZmlnLnJlc3BvbnNlU2VyaWFsaXplcihldmVudC5ib2R5KSB9KSA6IGV2ZW50O1xuICB9XG59XG4iXX0=