/**
 * @fileoverview added by tsickle
 * Generated from: lib/httpCacheStorage.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { deleteByRegex } from './deleteByRegex';
/**
 * @abstract
 */
var /**
 * @abstract
 */
HttpCacheStorage = /** @class */ (function () {
    function HttpCacheStorage() {
    }
    return HttpCacheStorage;
}());
/**
 * @abstract
 */
export { HttpCacheStorage };
if (false) {
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    HttpCacheStorage.prototype.has = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    HttpCacheStorage.prototype.get = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    HttpCacheStorage.prototype.set = function (key, response) { };
    /**
     * @abstract
     * @param {?=} key
     * @return {?}
     */
    HttpCacheStorage.prototype.delete = function (key) { };
}
var DefaultHttpCacheStorage = /** @class */ (function () {
    function DefaultHttpCacheStorage() {
        this.cache = new Map();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    DefaultHttpCacheStorage.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cache.has(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    DefaultHttpCacheStorage.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cache.get(key);
    };
    /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    DefaultHttpCacheStorage.prototype.set = /**
     * @param {?} key
     * @param {?} response
     * @return {?}
     */
    function (key, response) {
        this.cache.set(key, response);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    DefaultHttpCacheStorage.prototype.delete = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (!key) {
            this.cache.clear();
            return;
        }
        if (typeof key === 'string') {
            this.cache.delete((/** @type {?} */ (key)));
            return;
        }
        deleteByRegex((/** @type {?} */ (key)), this.cache);
    };
    DefaultHttpCacheStorage.decorators = [
        { type: Injectable }
    ];
    return DefaultHttpCacheStorage;
}());
export { DefaultHttpCacheStorage };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultHttpCacheStorage.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlU3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvY2FzaGV3LyIsInNvdXJjZXMiOlsibGliL2h0dHBDYWNoZVN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUVoRDs7OztJQUFBO0lBS0EsQ0FBQztJQUFELHVCQUFDO0FBQUQsQ0FBQyxBQUxELElBS0M7Ozs7Ozs7Ozs7O0lBSkMsb0RBQW1DOzs7Ozs7SUFDbkMsb0RBQTZDOzs7Ozs7O0lBQzdDLDhEQUE2RDs7Ozs7O0lBQzdELHVEQUE2Qzs7QUFHL0M7SUFBQTtRQUVVLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBNkIsQ0FBQztJQTJCdkQsQ0FBQzs7Ozs7SUF6QkMscUNBQUc7Ozs7SUFBSCxVQUFJLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQscUNBQUc7Ozs7SUFBSCxVQUFJLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUVELHFDQUFHOzs7OztJQUFILFVBQUksR0FBVyxFQUFFLFFBQTJCO1FBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVELHdDQUFNOzs7O0lBQU4sVUFBTyxHQUFxQjtRQUMxQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxHQUFHLEVBQVUsQ0FBQyxDQUFDO1lBQ2pDLE9BQU87U0FDUjtRQUVELGFBQWEsQ0FBQyxtQkFBQSxHQUFHLEVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Z0JBNUJGLFVBQVU7O0lBNkJYLDhCQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0E1QlksdUJBQXVCOzs7Ozs7SUFDbEMsd0NBQXFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZGVsZXRlQnlSZWdleCB9IGZyb20gJy4vZGVsZXRlQnlSZWdleCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIdHRwQ2FjaGVTdG9yYWdlIHtcbiAgYWJzdHJhY3QgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbjtcbiAgYWJzdHJhY3QgZ2V0KGtleTogc3RyaW5nKTogSHR0cFJlc3BvbnNlPGFueT47XG4gIGFic3RyYWN0IHNldChrZXk6IHN0cmluZywgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KTogdm9pZDtcbiAgYWJzdHJhY3QgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQ7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWZhdWx0SHR0cENhY2hlU3RvcmFnZSBpbXBsZW1lbnRzIEh0dHBDYWNoZVN0b3JhZ2Uge1xuICBwcml2YXRlIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIEh0dHBSZXNwb25zZTxhbnk+PigpO1xuXG4gIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55Pik6IHZvaWQge1xuICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgcmVzcG9uc2UpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCk6IHZvaWQge1xuICAgIGlmICgha2V5KSB7XG4gICAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShrZXkgYXMgc3RyaW5nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWxldGVCeVJlZ2V4KGtleSBhcyBSZWdFeHAsIHRoaXMuY2FjaGUpO1xuICB9XG59XG4iXX0=