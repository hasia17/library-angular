import { AfterViewInit, OnInit, ElementRef, Renderer2, NgZone } from '@angular/core';
import { ScrollPanel } from 'primeng/scrollpanel';
import { Router, ActivatedRoute } from '@angular/router';
import { HelpPageAPIService } from '../../../api/services/help-page-api.service';
import { MessageService, MenuItem, PrimeNGConfig } from 'primeng/api';
import { DialogService } from 'primeng/dynamicdialog';
import { HelpData } from '../../../api/model';
import { TranslateService } from '@ngx-translate/core';
import { ConfigurationService } from '../../../api/configuration.service';
import { ThemeService } from '../../../api/services/theme.service';
import { MenuApiService } from '../../../api/services/menu-api.service';
import { IAuthService } from '../../../api/iauth.service';
import { Portal } from '../../../api/model/portal';
import { OverlayPanel } from 'primeng/overlaypanel';
import { BreakpointObserver } from '@angular/cdk/layout';
import { FeedbackBasic } from '../../../api/model/feedback.model';
import { FeedbackApiService } from '../../../api/services/feedback-api.service';
import { SupportTicket } from '../../../api/model/support-ticket.model';
import { SupportTicketApiService } from '../../../api/services/support-ticket-api.service';
import { MenuService } from "../../../api/services/menu.service";
declare enum MenuOrientation {
    STATIC = 0,
    OVERLAY = 1,
    SLIM = 2,
    HORIZONTAL = 3
}
export declare class PortalViewportComponent implements AfterViewInit, OnInit {
    renderer2: Renderer2;
    zone: NgZone;
    private router;
    private route;
    private helpDataService;
    private messageService;
    private dialogService;
    private breakpointObserver;
    private translate;
    private themeService;
    private menuService;
    private menuApiService;
    private configService;
    private feedbackApiService;
    private supportTicketApiService;
    private primeNgConfig;
    private auth;
    showProfileInSidebar: boolean;
    enableBreadcrumbs: boolean;
    fullPortalLayout: boolean;
    helpPageEditorDisplayed: boolean;
    addToFavouritesDisplayed: boolean;
    supportTicketDisplayed: boolean;
    currentComponent: any;
    feedbackData: FeedbackBasic;
    feedbackVisible: boolean;
    feedbackSubmitDisabled: boolean;
    appName: string;
    portalName: string;
    appVersion: string;
    isBodyCompact: boolean;
    helpDataItem: HelpData;
    helpArticleId: string;
    sideBarColorTheme: string;
    layoutMode: MenuOrientation;
    darkMenu: boolean;
    profileMode: string;
    menuActive: boolean;
    mobileMenuActive: boolean;
    inlineMenuActive: boolean;
    menuClick: boolean;
    inlineMenuClick: boolean;
    staticMenuDesktopInactive: boolean;
    mobileTopbarActive: boolean;
    showMenuButtonTitle: string;
    hideMenuButtonTitle: string;
    topbarItemClick: boolean;
    activeTopbarItem: any;
    resetMenu: boolean;
    menuHoverActive: boolean;
    searchClick: boolean;
    search: boolean;
    documentClickListener: () => void;
    layoutContainerViewChild: ElementRef;
    layoutMenuScrollerViewChild: ScrollPanel;
    feedbackPanel: OverlayPanel;
    preloader: boolean;
    portalMenuItems: MenuItem[];
    lang: string;
    portalHomeMenuItem: MenuItem;
    initError: any;
    mainPortal: Portal;
    get menuButtonTitle(): string;
    constructor(renderer2: Renderer2, zone: NgZone, router: Router, route: ActivatedRoute, helpDataService: HelpPageAPIService, messageService: MessageService, dialogService: DialogService, breakpointObserver: BreakpointObserver, translate: TranslateService, themeService: ThemeService, menuService: MenuService, menuApiService: MenuApiService, configService: ConfigurationService, feedbackApiService: FeedbackApiService, supportTicketApiService: SupportTicketApiService, primeNgConfig: PrimeNGConfig, auth: IAuthService);
    applyPadding(): void;
    setSidebarColorTheme(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    loadMenuItems(): void;
    private toPrimeNGMenuItem;
    validateRequiredInputs(): void;
    loadHelpArticle(): void;
    onHelpArticleEditorClosed(changed: boolean): void;
    onAddToLaunchpadClosed(event: any): void;
    openHelpPage(event: any): void;
    openHelpPageEditor(event: any): void;
    openFeedback(event: any): void;
    openAddToLaunchpad(event: any): void;
    openSupportTicket(event: any): void;
    onSubmitFeedback(feedback: FeedbackBasic): void;
    closeFeedback(): void;
    onSubmitTicket(ticket: SupportTicket): void;
    clearFeedback(): void;
    addClass(element: any, className: any): void;
    removeClass(element: any, className: any): void;
    onMenuButtonClick(event: any): void;
    onMenuClick($event: any): void;
    onInlineMenuClick(event: any): void;
    onTopbarMobileButtonClick(event: any): void;
    onTopbarItemClick(event: any, item: any): void;
    onSearchClick(event: any, val: boolean): void;
    isDesktop(): boolean;
    isMobile(): boolean;
    isStatic(): boolean;
    isOverlay(): boolean;
    isHorizontal(): boolean;
    isSlim(): boolean;
    changeToStaticMenu(): void;
    changeToOverlayMenu(): void;
    changeToHorizontalMenu(): void;
    changeToSlimMenu(): void;
    blockBodyScroll(): void;
    unblockBodyScroll(): void;
    private setCustomTheme;
}
export {};
