export function tkitPortalInitializer(configService, translateService, authService) {
    const startTime = new Date().getTime();
    console.log(`Start tkit portal module initializer`);
    return () => configService
        .init()
        .then(() => console.log('Config initialized, next: init auth'))
        .then(() => authService.init())
        .then(res => {
        var _a, _b;
        console.log(`Auth service init resolved ${res}, next: set default lang`);
        const availLangsCSV = configService.getProperty('SUPPORTED_LANGUAGES') || 'en,de';
        const availableLangs = availLangsCSV.split(',').map(l => l.trim());
        let lang = ((_b = (_a = authService.currentUser().accountSettings) === null || _a === void 0 ? void 0 : _a.localeAndTimeSettings) === null || _b === void 0 ? void 0 : _b.locale) || translateService.getBrowserLang();
        lang = availableLangs.includes(lang) ? lang : 'de';
        translateService.use(lang);
        configService.setLang(lang);
        const duration = new Date().getTime() - startTime;
        console.log(`Tkit portal module initializer finished in ${(duration / 1000).toFixed(2)}s`);
        return true;
    })
        .catch(err => {
        console.log(`
      #####################################
      Tkit portal lib initialization failed
      #####################################
      `);
        configService.error = err;
        //throw err;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGtpdFBvcnRhbEluaXRpbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3J0YWwtbGliL3NyYy9saWIvdGtpdC1wb3J0YWwvdGtpdFBvcnRhbEluaXRpbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxhQUFtQyxFQUNuQyxnQkFBa0MsRUFDbEMsV0FBeUI7SUFFekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7SUFDbkQsT0FBTyxHQUFpQixFQUFFLENBQ3hCLGFBQWE7U0FDVixJQUFJLEVBQUU7U0FDTixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1NBQzlELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFOztRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLEdBQUcsMEJBQTBCLENBQUMsQ0FBQTtRQUN4RSxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLElBQUksT0FBTyxDQUFBO1FBQ2pGLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDbEUsSUFBSSxJQUFJLEdBQ04sYUFBQSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsZUFBZSwwQ0FBRSxxQkFBcUIsMENBQUUsTUFBTSxLQUFJLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxDQUFBO1FBQy9HLElBQUksR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtRQUNsRCxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQixNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLFNBQVMsQ0FBQTtRQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRTFGLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQzs7OztPQUliLENBQUMsQ0FBQTtRQUNBLGFBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFBO1FBQ3pCLFlBQVk7SUFDZCxDQUFDLENBQUMsQ0FBQTtBQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uL2FwaS9jb25maWd1cmF0aW9uLnNlcnZpY2UnXG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSdcbmltcG9ydCB7IElBdXRoU2VydmljZSB9IGZyb20gJy4uL2FwaS9pYXV0aC5zZXJ2aWNlJ1xuXG5leHBvcnQgZnVuY3Rpb24gdGtpdFBvcnRhbEluaXRpYWxpemVyKFxuICBjb25maWdTZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZSxcbiAgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSxcbiAgYXV0aFNlcnZpY2U6IElBdXRoU2VydmljZVxuKTogKCkgPT4gUHJvbWlzZTxhbnk+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgY29uc29sZS5sb2coYFN0YXJ0IHRraXQgcG9ydGFsIG1vZHVsZSBpbml0aWFsaXplcmApXG4gIHJldHVybiAoKTogUHJvbWlzZTxhbnk+ID0+XG4gICAgY29uZmlnU2VydmljZVxuICAgICAgLmluaXQoKVxuICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0NvbmZpZyBpbml0aWFsaXplZCwgbmV4dDogaW5pdCBhdXRoJykpXG4gICAgICAudGhlbigoKSA9PiBhdXRoU2VydmljZS5pbml0KCkpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgQXV0aCBzZXJ2aWNlIGluaXQgcmVzb2x2ZWQgJHtyZXN9LCBuZXh0OiBzZXQgZGVmYXVsdCBsYW5nYClcbiAgICAgICAgY29uc3QgYXZhaWxMYW5nc0NTViA9IGNvbmZpZ1NlcnZpY2UuZ2V0UHJvcGVydHkoJ1NVUFBPUlRFRF9MQU5HVUFHRVMnKSB8fCAnZW4sZGUnXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUxhbmdzID0gYXZhaWxMYW5nc0NTVi5zcGxpdCgnLCcpLm1hcChsID0+IGwudHJpbSgpKVxuICAgICAgICBsZXQgbGFuZyA9XG4gICAgICAgICAgYXV0aFNlcnZpY2UuY3VycmVudFVzZXIoKS5hY2NvdW50U2V0dGluZ3M/LmxvY2FsZUFuZFRpbWVTZXR0aW5ncz8ubG9jYWxlIHx8IHRyYW5zbGF0ZVNlcnZpY2UuZ2V0QnJvd3NlckxhbmcoKVxuICAgICAgICBsYW5nID0gYXZhaWxhYmxlTGFuZ3MuaW5jbHVkZXMobGFuZykgPyBsYW5nIDogJ2RlJ1xuICAgICAgICB0cmFuc2xhdGVTZXJ2aWNlLnVzZShsYW5nKVxuICAgICAgICBjb25maWdTZXJ2aWNlLnNldExhbmcobGFuZylcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZVxuICAgICAgICBjb25zb2xlLmxvZyhgVGtpdCBwb3J0YWwgbW9kdWxlIGluaXRpYWxpemVyIGZpbmlzaGVkIGluICR7KGR1cmF0aW9uIC8gMTAwMCkudG9GaXhlZCgyKX1zYClcblxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgXG4gICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICAgICBUa2l0IHBvcnRhbCBsaWIgaW5pdGlhbGl6YXRpb24gZmFpbGVkXG4gICAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICAgICBgKVxuICAgICAgICBjb25maWdTZXJ2aWNlLmVycm9yID0gZXJyXG4gICAgICAgIC8vdGhyb3cgZXJyO1xuICAgICAgfSlcbn1cbiJdfQ==