import { Component, EventEmitter, Injector, Input, Output, Inject, Optional, SkipSelf } from '@angular/core';
import { MessageService } from 'primeng/api';
import { PortalPageComponent } from '../portal-page/portal-page.component';
import { SearchTemplateAPIService } from '../../../api/services/search-template-api.service';
import { AUTH_SERVICE } from '../../../api/injection-tokens';
import { PortalViewportComponent } from '../portal-viewport/portal-viewport.component';
import { PortalSearchPage } from '../../pages/PortalSearchPage';
const reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
const dateReviver = function (key, value) {
    if (typeof value === 'string') {
        const a = reISO.exec(value);
        if (a) {
            return new Date(value);
        }
    }
    return value;
};
const ɵ0 = dateReviver;
export class PortalSearchPageComponent extends PortalPageComponent {
    constructor(injectorChild, messageService, searchTemplateApi, auth, viewPort, searchPage) {
        super(injectorChild);
        this.messageService = messageService;
        this.searchTemplateApi = searchTemplateApi;
        this.auth = auth;
        this.viewPort = viewPort;
        this.searchPage = searchPage;
        this.searchCriteriaTemplatesEnabled = true;
        this.enableSearchToolbar = false;
        this.onSearch = new EventEmitter();
        this.newTemplateDefaultFlag = false;
    }
    ngOnInit() {
        super.ngOnInit();
        this.validatedInputs();
        if (this.pageName) {
            this.fetchSearchTemplates();
        }
    }
    onSearchTemplateSelection(event) {
        if (event.value) {
            this.activeSearchTemplateId = event.value;
            this.searchTemplateApi
                .getTemplateById(this.activeSearchTemplateId)
                .subscribe(template => {
                this.activeSearchTemplate = template;
                // TODO allow override
                this.searchPage.criteria = JSON.parse(template.criteriaAsJson, dateReviver);
            });
        }
        else {
            this.activeSearchTemplateId = null;
            this.activeSearchTemplate = null;
        }
    }
    fetchSearchTemplates() {
        this.searchTemplateApi
            .getSearchTemplatesLegacy(this.auth.currentUser().userId, this.viewPort.appName, this.pageName)
            .subscribe(templates => {
            this.searchTemplateOptions = [
                { value: null, label: 'Pick saved template' },
                ...templates.map(t => ({ label: t.name, value: t.id }))
            ];
            // if a default template exists preselect it
            const defaultTemplate = templates.find(t => t.defaultTemplate);
            if (defaultTemplate) {
                this.onSearchTemplateSelection({ value: defaultTemplate.id });
            }
        });
    }
    validatedInputs() {
        if (!this.searchPage) {
            console.error(`<tk-search-page> can only be used in a component that extends "PortalSearchPage". See README.MD chapter #Generic Search Page`);
        }
        if (!this.pageName) {
            console.warn(`You did not specify [pageName] attribute for search page component. Without it, some features will not work.`);
        }
    }
    triggerSearch() {
        console.log(`Click search`);
        this.onSearch.emit(1);
    }
    triggerCriteriaTemplateUpdate() {
        console.log('update tempalte');
        this.activeSearchTemplate.criteriaAsJson = JSON.stringify(this.searchPage.criteria);
        this.searchTemplateApi
            .updateTemplate(this.activeSearchTemplateId, this.activeSearchTemplate)
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template updated'
            });
        });
    }
    triggerCriteriaTemplateSave(event, op) {
        this.searchTemplateApi
            .createNewTemplate({
            application: this.viewPort.appName,
            page: this.pageName,
            user: this.auth.currentUser().userId,
            name: this.newTemplateName,
            defaultTemplate: this.newTemplateDefaultFlag,
            criteriaAsJson: JSON.stringify(this.searchPage.criteria)
        })
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.searchTemplateOptions.push({
                label: savedTemplate.name,
                value: savedTemplate.id
            });
            this.activeSearchTemplateId = savedTemplate.id;
            op.hide();
            this.newTemplateDefaultFlag = false;
            this.newTemplateName = undefined;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template saved'
            });
        });
    }
    triggerCriteriaTemplateDelete() {
        this.searchTemplateApi
            .deleteTemplate(this.activeSearchTemplateId)
            .subscribe(ok => {
            this.messageService.add({
                severity: 'info',
                summary: 'Search template deleted'
            });
            this.searchTemplateOptions.splice(this.searchTemplateOptions.findIndex(i => i.value == this.activeSearchTemplateId), 1);
            this.activeSearchTemplateId = undefined;
            this.activeSearchTemplate = undefined;
        });
    }
}
PortalSearchPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-portal-search-page',
                template: "<tk-portal-page\n  header=\"{{ header }}\"\n  [leftToolbar]=\"pageToolbarLeft\"\n  [rightToolbar]=\"pageToolbarRight\"\n>\n  <div id=\"criteria-panel\" tkCollapsible>\n    <ng-content select=\"[criteria]\"></ng-content>\n  </div>\n\n  <div id=\"search-results\">\n    <ng-content select=\"[results]\"></ng-content>\n  </div>\n</tk-portal-page>\n\n<ng-template #pageToolbarLeft>\n  <tk-toolbar-item\n    *ngIf=\"enableSearchToolbar\"\n    title=\"Suchen\"\n    icon=\"search\"\n    (click)=\"triggerSearch()\"\n  ></tk-toolbar-item>\n  <ng-container *ngTemplateOutlet=\"leftToolbar\"></ng-container>\n</ng-template>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <p-overlayPanel\n    #op\n    [dismissable]=\"true\"\n    [showCloseIcon]=\"true\"\n    appendTo=\"body\"\n  >\n    <div class=\"p-fluid\" [ngStyle]=\"{ width: '400px' }\">\n      <h5>Save a new search template</h5>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"templateName\">Template Name</label>\n        <div class=\"p-col-12 p-md-8\">\n          <input\n            id=\"templateName\"\n            pInputText\n            type=\"text\"\n            [(ngModel)]=\"newTemplateName\"\n          />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"defaultFlag\">Set as default?</label>\n        <!--      </div>-->\n        <div class=\"p-col-12 p-md-8\">\n          <p-inputSwitch\n            id=\"defaultFlag\"\n            [(ngModel)]=\"newTemplateDefaultFlag\"\n          ></p-inputSwitch>\n        </div>\n      </div>\n\n      <div class=\"p-grid\">\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Cancel\"\n            (click)=\"op.hide()\"\n            class=\"p-button-secondary p-col-12\"\n          ></button>\n        </div>\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Save\"\n            class=\"p-col-12\"\n            (click)=\"triggerCriteriaTemplateSave($event, op)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </p-overlayPanel>\n  <tk-toolbar-item\n    *ngIf=\"searchCriteriaTemplatesEnabled\"\n    title=\"Neue Suchvorlage Erstellen\"\n    icon=\"plus\"\n    (click)=\"op.show($event)\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Speichern\"\n    icon=\"save\"\n    (click)=\"triggerCriteriaTemplateUpdate()\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Loeschen\"\n    icon=\"trash\"\n    (click)=\"triggerCriteriaTemplateDelete()\"\n  ></tk-toolbar-item>\n  <div class=\"search-template-box\" *ngIf=\"searchTemplateOptions\">\n    <p-dropdown\n      [style]=\"{ width: '150px' }\"\n      appendTo=\"body\"\n      [ngModel]=\"activeSearchTemplateId\"\n      [options]=\"searchTemplateOptions\"\n      [filter]=\"true\"\n      (onChange)=\"onSearchTemplateSelection($event)\"\n    ></p-dropdown>\n  </div>\n\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n",
                styles: [".search-template-box{display:inline-block;padding-top:.2em}.search-template-box ::ng-deep .p-dropdown-label{padding:.5em}"]
            },] }
];
PortalSearchPageComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessageService },
    { type: SearchTemplateAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: PortalViewportComponent },
    { type: PortalSearchPage, decorators: [{ type: SkipSelf }, { type: Optional }] }
];
PortalSearchPageComponent.propDecorators = {
    searchCriteriaTemplatesEnabled: [{ type: Input }],
    enableSearchToolbar: [{ type: Input }],
    onSearch: [{ type: Output }],
    pageName: [{ type: Input }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,