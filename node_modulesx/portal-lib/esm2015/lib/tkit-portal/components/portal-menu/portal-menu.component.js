import { Component, EventEmitter, Input, Output } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { MenuService } from '../../../api/services/menu.service';
import { NavigationEnd, Router } from "@angular/router";
import { filter } from "rxjs/operators";
export class AppMenuComponent {
    constructor() {
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
    }
    set portalMenu(items) {
        this.menuWithRoot = {
            label: 'Menu',
            icon: 'list',
            items: items
        };
    }
}
AppMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-menu',
                template: "<ul class=\"layout-menu\" id=\"nav\" role=\"navigation\">\n  <li\n    tk-submenu\n    [item]=\"menuWithRoot\"\n    [index]=\"0\"\n    root=\"true\"\n    visible=\"true\"\n    [(menuActive)]=\"menuActive\"\n    [(mobileMenuActive)]=\"mobileMenuActive\"\n    [isStatic]=\"isStatic\"\n    [isSlim]=\"isSlim\"\n    [isHorizontal]=\"isHorizontal\"\n    [isMobile]=\"isMobile\"\n    [isDesktop]=\"isDesktop\"\n    [menuHoverActive]=\"menuHoverActive\"\n  ></li>\n</ul>\n"
            },] }
];
AppMenuComponent.ctorParameters = () => [];
AppMenuComponent.propDecorators = {
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    portalMenu: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};
export class AppSubMenuComponent {
    constructor(menuService, router) {
        this.menuService = menuService;
        this.router = router;
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
        this.active = false;
    }
    ngOnInit() {
        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {
            // deactivate current active menu
            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {
                this.active = false;
            }
        });
        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {
            this.active = false;
        });
        // TODO Ultima11: Verify if this logic works with our setup
        this.router.events.pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(params => {
            if (this.isSlim) {
                this.active = false;
            }
            else {
                if (this.item.routerLink) {
                    this.updateActiveStateFromRoute();
                }
                else {
                    this.active = false;
                }
            }
        });
        if ((this.isHorizontal || this.isSlim) && this.item.routerLink) {
            this.updateActiveStateFromRoute();
        }
        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);
    }
    ngOnDestroy() {
        if (this.menuSourceSubscription) {
            this.menuSourceSubscription.unsubscribe();
        }
        if (this.menuResetSubscription) {
            this.menuResetSubscription.unsubscribe();
        }
    }
    updateActiveStateFromRoute() {
        this.active = this.router.isActive(this.item.routerLink[0], !this.item.items);
    }
    itemClick(event) {
        // avoid processing disabled items
        if (this.item.disabled) {
            event.preventDefault();
            return true;
        }
        this.menuService.onMenuStateChange(this.key);
        // execute command
        if (this.item.command) {
            this.item.command({ originalEvent: event, item: this.item });
        }
        if (this.item.items) {
            this.active = !this.active;
        }
        else {
            this.active = true;
            if (this.isHorizontal || this.isSlim) {
                this.menuService.reset();
                this.menuHoverActive = false;
            }
            if (!this.isStatic) {
                this.menuActiveChange.emit(false);
            }
            this.mobileMenuActiveChange.emit(false);
        }
        // prevent hash change
        if (this.item.items || (!this.item.url && !this.item.routerLink)) {
            // TODO https://github.com/primefaces/primeng/issues/8751
            // setTimeout(() => {
            //   this.app.layoutMenuScrollerViewChild.moveBar();
            // }, 450);
            event.preventDefault();
        }
    }
    onMouseEnter() {
        if (this.root &&
            this.menuHoverActive &&
            (this.isHorizontal || this.isSlim) &&
            this.isDesktop) {
            this.menuService.onMenuStateChange(this.key);
            this.active = true;
        }
    }
}
AppSubMenuComponent.decorators = [
    { type: Component, args: [{
                /* eslint-disable @angular-eslint/component-selector */
                selector: '[tk-submenu]',
                /* eslint-enable @angular-eslint/component-selector */
                template: `
    <ng-container>
        <div *ngIf="root">
          <span class="layout-menuitem-text">{{item.label}}</span>
        </div>
        <a [attr.href]="item.url" (click)="itemClick($event)" *ngIf="!item.routerLink || item.items" (keydown.enter)="itemClick($event)"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <a (click)="itemClick($event)" *ngIf="item.routerLink && !item.items"
           [routerLink]="item.routerLink" routerLinkActive="active-menuitem-routerlink" [routerLinkActiveOptions]="{exact: true}"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <ul *ngIf="(item.items && root) || (item.items && active)" [@children]="root ? 'visible' : active ? 'visibleAnimated' : 'hiddenAnimated'">
          <ng-template ngFor let-child let-i="index" [ngForOf]="item.items">
            <li tk-submenu [item]="child" [index]="i" [parentKey]="key"></li>
          </ng-template>
        </ul>
    </ng-container>
  `,
                host: {
                    '[class.layout-root-menuitem]': 'root || active',
                    '[class.active-menuitem]': '(active)'
                },
                animations: [
                    trigger('children', [
                        state('void', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('hiddenAnimated', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            height: '*'
                        })),
                        state('hidden', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            },] }
];
AppSubMenuComponent.ctorParameters = () => [
    { type: MenuService },
    { type: Router }
];
AppSubMenuComponent.propDecorators = {
    item: [{ type: Input }],
    root: [{ type: Input }],
    visible: [{ type: Input }],
    index: [{ type: Input }],
    parentKey: [{ type: Input }],
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,