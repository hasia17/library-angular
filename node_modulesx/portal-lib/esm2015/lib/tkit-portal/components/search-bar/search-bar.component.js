import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { PortalItemService } from '../../../api/services/portal-item.service';
import { FormControl } from '@angular/forms';
import { SearchItemType } from '../../../api/model/search-item-type';
import { ConfigurationService } from '../../../api/configuration.service';
import { CONFIG_KEY_TKIT_SEARCH_BASE_URL } from '../../constants';
import { TranslateService } from '@ngx-translate/core';
import { MessageService } from 'primeng/api';
export class SearchBarComponent {
    constructor(searchService, config, translateService, messageService) {
        this.searchService = searchService;
        this.config = config;
        this.translateService = translateService;
        this.messageService = messageService;
        this.SearchItemType = SearchItemType;
        this.searchClick = new EventEmitter();
    }
    get openInSearchItem() {
        return {
            type: SearchItemType.OPEN_SEARCH,
            name: 'Open in search view',
            url: `${this.searchUrl}${this.query.value}`,
            queryString: this.query.value,
        };
    }
    ngOnInit() {
        this.query = new FormControl('');
        const searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
        this.searchUrl = `${searchUrl}/search?query=`;
    }
    ngAfterViewInit() {
        setTimeout(() => this.searchInputViewChild.focusInput(), 0);
    }
    search(event) {
        this.searchService.searchForServices(event.query, null).subscribe(data => {
            data = data.slice(0, this.maxResults);
            data.push(this.openInSearchItem);
            this.results = data;
        });
    }
    select(event) {
        if (event.type === SearchItemType.OPEN_SEARCH) {
            this.query.setValue(event.queryString);
        }
        else {
            this.query.setValue(event.name);
        }
        window.open(event.url);
    }
    goToSearch(clickEnter) {
        if (this.query.value) {
            window.open(`${this.searchUrl}${this.query.value}`);
        }
        else {
            if (clickEnter === false) {
                this.messageService.add({
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    summary: this.translateService.instant('QUICK_SEARCH_FORM.WRONG_DATA'),
                    severity: 'error',
                });
            }
        }
    }
    onSearchClick(event, val) {
        this.searchClick.emit({ event, val });
    }
}
SearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-search-bar',
                template: "<div class=\"search-bar\">\n  <form [spellcheck]=\"false\" (ngSubmit)=\"goToSearch(false)\">\n    <p-autoComplete\n      #searchInput\n      [formControl]=\"query\"\n      [suggestions]=\"results\"\n      (completeMethod)=\"search($event)\"\n      (onSelect)=\"select($event)\"\n      (click)=\"onSearchClick($event, true)\"\n      (keydown.escape)=\"onSearchClick($event, false)\"\n      (keydown.enter)=\"goToSearch(true)\"\n      [style]=\"{ width: '100%', height: '4rem' }\"\n      placeholder=\"Search for apps\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <span\n            *ngSwitchCase=\"SearchItemType.APPLICATION\"\n            class=\"item-badge item-app\"\n            >APP</span\n          >\n        <span>{{ item.name }}</span>\n        </ng-container>\n      </ng-template>\n    </p-autoComplete>\n  </form>\n</div>\n",
                styles: [":host{flex:1 1 auto}.search-bar ::ng-deep .item-badge{font-size:10px;border-radius:.1rem;margin-right:1em;padding:.25em .5em;text-transform:uppercase;font-weight:700;letter-spacing:.3px}.search-bar ::ng-deep .item-badge.item-app{background-color:green;color:#fff}"]
            },] }
];
SearchBarComponent.ctorParameters = () => [
    { type: PortalItemService },
    { type: ConfigurationService },
    { type: TranslateService },
    { type: MessageService }
];
SearchBarComponent.propDecorators = {
    searchInputViewChild: [{ type: ViewChild, args: ['searchInput',] }],
    searchClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3J0YWwtbGliL3NyYy9saWIvdGtpdC1wb3J0YWwvY29tcG9uZW50cy9zZWFyY2gtYmFyL3NlYXJjaC1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFjLFlBQVksRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzdHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFBO0FBRTdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUNBQXFDLENBQUE7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFDekUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQVE1QyxNQUFNLE9BQU8sa0JBQWtCO0lBcUI3QixZQUNVLGFBQWdDLEVBQ2hDLE1BQTRCLEVBQ25CLGdCQUFrQyxFQUNsQyxjQUE4QjtRQUh2QyxrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBc0I7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUF0QmpELG1CQUFjLEdBQUcsY0FBYyxDQUFBO1FBTy9CLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUE7SUFnQmhELENBQUM7SUFkSixJQUFJLGdCQUFnQjtRQUNsQixPQUFPO1lBQ0wsSUFBSSxFQUFFLGNBQWMsQ0FBQyxXQUFXO1lBQ2hDLElBQUksRUFBRSxxQkFBcUI7WUFDM0IsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtZQUMzQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO1NBQzlCLENBQUE7SUFDSCxDQUFDO0lBU0QsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsK0JBQStCLENBQUMsSUFBSSx3QkFBd0IsQ0FBQTtRQUN0RyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsU0FBUyxnQkFBZ0IsQ0FBQTtJQUMvQyxDQUFDO0lBRUQsZUFBZTtRQUNiLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDN0QsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUF3QjtRQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtRQUNyQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBb0I7UUFDekIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxXQUFXLEVBQUU7WUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1NBQ3ZDO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBRUQsVUFBVSxDQUFDLFVBQW1CO1FBQzVCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO1NBQ3BEO2FBQU07WUFDTCxJQUFJLFVBQVUsS0FBSyxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO29CQUN0QixtRUFBbUU7b0JBQ25FLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDO29CQUN0RSxRQUFRLEVBQUUsT0FBTztpQkFDbEIsQ0FBQyxDQUFBO2FBQ0g7U0FDRjtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsS0FBSyxFQUFFLEdBQVk7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUN2QyxDQUFDOzs7WUE1RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixzNUJBQTBDOzthQUUzQzs7O1lBZFEsaUJBQWlCO1lBSWpCLG9CQUFvQjtZQUVwQixnQkFBZ0I7WUFDaEIsY0FBYzs7O21DQWVwQixTQUFTLFNBQUMsYUFBYTswQkFFdkIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IFBvcnRhbEl0ZW1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vYXBpL3NlcnZpY2VzL3BvcnRhbC1pdGVtLnNlcnZpY2UnXG5pbXBvcnQgeyBTZWFyY2hJdGVtRFRPIH0gZnJvbSAnLi4vLi4vLi4vYXBpL21vZGVsL3NlYXJjaC1pdGVtLm1vZGVsJ1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3JtcydcbmltcG9ydCB7IFNlYXJjaEl0ZW1UeXBlIH0gZnJvbSAnLi4vLi4vLi4vYXBpL21vZGVsL3NlYXJjaC1pdGVtLXR5cGUnXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2FwaS9jb25maWd1cmF0aW9uLnNlcnZpY2UnXG5pbXBvcnQgeyBDT05GSUdfS0VZX1RLSVRfU0VBUkNIX0JBU0VfVVJMIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnXG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJ3ByaW1lbmcvYXBpJ1xuaW1wb3J0IHsgQXV0b0NvbXBsZXRlIH0gZnJvbSAncHJpbWVuZy9hdXRvY29tcGxldGUnXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RrLXNlYXJjaC1iYXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWJhci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NlYXJjaC1iYXIuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoQmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgcmVzdWx0czogU2VhcmNoSXRlbURUT1tdXG4gIHF1ZXJ5OiBGb3JtQ29udHJvbFxuICBTZWFyY2hJdGVtVHlwZSA9IFNlYXJjaEl0ZW1UeXBlXG4gIHNlYXJjaFVybDogc3RyaW5nXG4gIG1heFJlc3VsdHM6IDEwXG5cbiAgQFZpZXdDaGlsZCgnc2VhcmNoSW5wdXQnKSBzZWFyY2hJbnB1dFZpZXdDaGlsZDogQXV0b0NvbXBsZXRlXG5cbiAgQE91dHB1dCgpXG4gIHNlYXJjaENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIGdldCBvcGVuSW5TZWFyY2hJdGVtKCk6IFNlYXJjaEl0ZW1EVE8ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBTZWFyY2hJdGVtVHlwZS5PUEVOX1NFQVJDSCxcbiAgICAgIG5hbWU6ICdPcGVuIGluIHNlYXJjaCB2aWV3JyxcbiAgICAgIHVybDogYCR7dGhpcy5zZWFyY2hVcmx9JHt0aGlzLnF1ZXJ5LnZhbHVlfWAsXG4gICAgICBxdWVyeVN0cmluZzogdGhpcy5xdWVyeS52YWx1ZSxcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFBvcnRhbEl0ZW1TZXJ2aWNlLFxuICAgIHByaXZhdGUgY29uZmlnOiBDb25maWd1cmF0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMucXVlcnkgPSBuZXcgRm9ybUNvbnRyb2woJycpXG4gICAgY29uc3Qgc2VhcmNoVXJsID0gdGhpcy5jb25maWcuZ2V0UHJvcGVydHkoQ09ORklHX0tFWV9US0lUX1NFQVJDSF9CQVNFX1VSTCkgfHwgJy9vcHMvZW50ZXJwcmlzZS1zZWFyY2gnXG4gICAgdGhpcy5zZWFyY2hVcmwgPSBgJHtzZWFyY2hVcmx9L3NlYXJjaD9xdWVyeT1gXG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnNlYXJjaElucHV0Vmlld0NoaWxkLmZvY3VzSW5wdXQoKSwgMClcbiAgfVxuXG4gIHNlYXJjaChldmVudDogeyBxdWVyeTogc3RyaW5nIH0pIHtcbiAgICB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoRm9yU2VydmljZXMoZXZlbnQucXVlcnksIG51bGwpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKDAsIHRoaXMubWF4UmVzdWx0cylcbiAgICAgIGRhdGEucHVzaCh0aGlzLm9wZW5JblNlYXJjaEl0ZW0pXG4gICAgICB0aGlzLnJlc3VsdHMgPSBkYXRhXG4gICAgfSlcbiAgfVxuXG4gIHNlbGVjdChldmVudDogU2VhcmNoSXRlbURUTykge1xuICAgIGlmIChldmVudC50eXBlID09PSBTZWFyY2hJdGVtVHlwZS5PUEVOX1NFQVJDSCkge1xuICAgICAgdGhpcy5xdWVyeS5zZXRWYWx1ZShldmVudC5xdWVyeVN0cmluZylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5xdWVyeS5zZXRWYWx1ZShldmVudC5uYW1lKVxuICAgIH1cbiAgICB3aW5kb3cub3BlbihldmVudC51cmwpXG4gIH1cblxuICBnb1RvU2VhcmNoKGNsaWNrRW50ZXI6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5xdWVyeS52YWx1ZSkge1xuICAgICAgd2luZG93Lm9wZW4oYCR7dGhpcy5zZWFyY2hVcmx9JHt0aGlzLnF1ZXJ5LnZhbHVlfWApXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjbGlja0VudGVyID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmFkZCh7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICAgIHN1bW1hcnk6IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KCdRVUlDS19TRUFSQ0hfRk9STS5XUk9OR19EQVRBJyksXG4gICAgICAgICAgc2V2ZXJpdHk6ICdlcnJvcicsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25TZWFyY2hDbGljayhldmVudCwgdmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5zZWFyY2hDbGljay5lbWl0KHsgZXZlbnQsIHZhbCB9KVxuICB9XG59XG4iXX0=