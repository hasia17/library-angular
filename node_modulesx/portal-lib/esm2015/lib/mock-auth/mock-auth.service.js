import { Injectable } from '@angular/core';
import { of } from 'rxjs';
export class MockAuthService {
    constructor() {
        this.mockUser = {
            person: {
                displayName: 'Max Musterman',
                firstName: 'Max',
                lastName: 'Mustermann',
                email: 'max.mustermann@capgemini.com'
            },
            accountSettings: {
                localeAndTimeSettings: { locale: 'de', timezone: 'GMT' },
                notificationSettings: {},
                preferences: [],
                privacySettings: {}
            },
            id: 'ID_MOCK_USER',
            identityProvider: 'MOCK_TKIT_PORTAL_LIB',
            identityProviderId: 'MOCK_ID',
            roles: ['user', 'admin'],
            memberships: [
                {
                    application: 'APP1',
                    roleMemberships: [
                        {
                            role: 'user',
                            permissions: [
                                {
                                    action: 'EDIT',
                                    resource: 'ITEM',
                                    name: 'Edit item',
                                    key: 'ITEM#EDIT'
                                }
                            ]
                        }
                    ]
                }
            ]
        };
    }
    currentUser() {
        return this.mockUser;
    }
    getAvatar() {
        return of(this.mockUser.avatar);
    }
    init() {
        return new Promise((resolve, reject) => resolve(true));
    }
    hasPermission(permissionKey) {
        return true;
    }
    logout() {
        throw new Error('Method not implemented.');
    }
    getAuthProviderName() {
        return 'MOCK_TKIT_PORTAL_LIB';
    }
    hasRole(role) {
        return true;
    }
    getRoles() {
        return ['tkit-portal-admin'];
    }
}
MockAuthService.decorators = [
    { type: Injectable }
];
MockAuthService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hdXRoLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3J0YWwtbGliL3NyYy9saWIvbW9jay1hdXRoL21vY2stYXV0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFjLEVBQUUsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFLckQsTUFBTSxPQUFPLGVBQWU7SUFxQzFCO1FBcENRLGFBQVEsR0FBZ0I7WUFDOUIsTUFBTSxFQUFFO2dCQUNOLFdBQVcsRUFBRSxlQUFlO2dCQUM1QixTQUFTLEVBQUUsS0FBSztnQkFDaEIsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLEtBQUssRUFBRSw4QkFBOEI7YUFDdEM7WUFDRCxlQUFlLEVBQUU7Z0JBQ2YscUJBQXFCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7Z0JBQ3hELG9CQUFvQixFQUFFLEVBQUU7Z0JBQ3hCLFdBQVcsRUFBRSxFQUFFO2dCQUNmLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0QsRUFBRSxFQUFFLGNBQWM7WUFDbEIsZ0JBQWdCLEVBQUUsc0JBQXNCO1lBQ3hDLGtCQUFrQixFQUFFLFNBQVM7WUFDN0IsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztZQUN4QixXQUFXLEVBQUU7Z0JBQ1g7b0JBQ0UsV0FBVyxFQUFFLE1BQU07b0JBQ25CLGVBQWUsRUFBRTt3QkFDZjs0QkFDRSxJQUFJLEVBQUUsTUFBTTs0QkFDWixXQUFXLEVBQUU7Z0NBQ1g7b0NBQ0UsTUFBTSxFQUFFLE1BQU07b0NBQ2QsUUFBUSxFQUFFLE1BQU07b0NBQ2hCLElBQUksRUFBRSxXQUFXO29DQUNqQixHQUFHLEVBQUUsV0FBVztpQ0FDakI7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7SUFDYSxDQUFDO0lBQ2hCLFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUNELFNBQVM7UUFDUCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTSxJQUFJO1FBQ1QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxhQUFhLENBQUMsYUFBcUI7UUFDakMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsbUJBQW1CO1FBQ2pCLE9BQU8sc0JBQXNCLENBQUM7SUFDaEMsQ0FBQztJQUNELE9BQU8sQ0FBQyxJQUF1QjtRQUM3QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxRQUFRO1FBQ04sT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O1lBakVGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9hcGkvaWF1dGguc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vYXBpL21vZGVsJztcbmltcG9ydCB7IFVzZXJQcm9maWxlIH0gZnJvbSAnLi4vYXBpL21vZGVsL3VzZXItcHJvZmlsZS5tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc2FtcGxlVXNlciB9IGZyb20gJy4vc2FtcGxlJztcbmltcG9ydCB7IEF2YXRhckluZm8gfSBmcm9tICcuLi9hcGkvbW9kZWwvYXZhdGFyLWluZm8ubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9ja0F1dGhTZXJ2aWNlIGltcGxlbWVudHMgSUF1dGhTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtb2NrVXNlcjogVXNlclByb2ZpbGUgPSB7XG4gICAgcGVyc29uOiB7XG4gICAgICBkaXNwbGF5TmFtZTogJ01heCBNdXN0ZXJtYW4nLFxuICAgICAgZmlyc3ROYW1lOiAnTWF4JyxcbiAgICAgIGxhc3ROYW1lOiAnTXVzdGVybWFubicsXG4gICAgICBlbWFpbDogJ21heC5tdXN0ZXJtYW5uQGNhcGdlbWluaS5jb20nXG4gICAgfSxcbiAgICBhY2NvdW50U2V0dGluZ3M6IHtcbiAgICAgIGxvY2FsZUFuZFRpbWVTZXR0aW5nczogeyBsb2NhbGU6ICdkZScsIHRpbWV6b25lOiAnR01UJyB9LFxuICAgICAgbm90aWZpY2F0aW9uU2V0dGluZ3M6IHt9LFxuICAgICAgcHJlZmVyZW5jZXM6IFtdLFxuICAgICAgcHJpdmFjeVNldHRpbmdzOiB7fVxuICAgIH0sXG4gICAgaWQ6ICdJRF9NT0NLX1VTRVInLFxuICAgIGlkZW50aXR5UHJvdmlkZXI6ICdNT0NLX1RLSVRfUE9SVEFMX0xJQicsXG4gICAgaWRlbnRpdHlQcm92aWRlcklkOiAnTU9DS19JRCcsXG4gICAgcm9sZXM6IFsndXNlcicsICdhZG1pbiddLFxuICAgIG1lbWJlcnNoaXBzOiBbXG4gICAgICB7XG4gICAgICAgIGFwcGxpY2F0aW9uOiAnQVBQMScsXG4gICAgICAgIHJvbGVNZW1iZXJzaGlwczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdFRElUJyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogJ0lURU0nLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdFZGl0IGl0ZW0nLFxuICAgICAgICAgICAgICAgIGtleTogJ0lURU0jRURJVCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfTtcbiAgY29uc3RydWN0b3IoKSB7fVxuICBjdXJyZW50VXNlcigpOiBVc2VyUHJvZmlsZSB7XG4gICAgcmV0dXJuIHRoaXMubW9ja1VzZXI7XG4gIH1cbiAgZ2V0QXZhdGFyKCk6IE9ic2VydmFibGU8QXZhdGFySW5mbz4ge1xuICAgIHJldHVybiBvZih0aGlzLm1vY2tVc2VyLmF2YXRhcik7XG4gIH1cblxuICBwdWJsaWMgaW5pdCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVzb2x2ZSh0cnVlKSk7XG4gIH1cblxuICBoYXNQZXJtaXNzaW9uKHBlcm1pc3Npb25LZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbG9nb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuICBnZXRBdXRoUHJvdmlkZXJOYW1lKCkge1xuICAgIHJldHVybiAnTU9DS19US0lUX1BPUlRBTF9MSUInO1xuICB9XG4gIGhhc1JvbGUocm9sZTogc3RyaW5nIHwgc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBnZXRSb2xlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsndGtpdC1wb3J0YWwtYWRtaW4nXTtcbiAgfVxufVxuIl19