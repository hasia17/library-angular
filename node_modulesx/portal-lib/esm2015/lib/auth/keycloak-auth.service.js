import { Injectable } from '@angular/core';
import { KeycloakService, KeycloakEventType } from 'keycloak-angular';
import { ReplaySubject } from 'rxjs';
import { ConfigurationService } from '../api/configuration.service';
import { UserProfileService } from '../api/services/user-profile.service';
import { Router } from '@angular/router';
import { CONFIG_KEY_KEYCLOAK_URL, CONFIG_KEY_KEYCLOAK_CLIENT_ID, CONFIG_KEY_KEYCLOAK_REALM, CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO, } from '../tkit-portal/constants';
const KC_REFRESH_TOKEN_LS = 'kc_refreshToken';
const KC_ID_TOKEN_LS = 'kc_idToken';
const KC_TOKEN_LS = 'kc_token';
const TKIT_USER_PROFILE_LS = 'tkit_user_profile';
export class KeycloakAuthService {
    constructor(keycloakService, configService, userProfileService, router) {
        this.keycloakService = keycloakService;
        this.configService = configService;
        this.userProfileService = userProfileService;
        this.router = router;
        this.user = {
            userId: 'anonymous',
            userPerson: { firstName: 'Guest' },
            functions: [],
            roles: [],
        };
    }
    hasPermission(permissionKey) {
        return this.user.functions ? this.user.functions.includes(permissionKey) : false;
    }
    currentUser() {
        return this.userProfile;
    }
    logout() {
        this.clearKCStateFromLocalstorage();
        this.keycloakService.logout();
    }
    getAuthProviderName() {
        return 'Keycloak based Security';
    }
    init() {
        console.log('Keycloak Auth initialization');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            console.log(`Got tokens in LC ${parsedToken.exp} ${parsedToken.sub}`);
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        // console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`)
        return this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(loginOk => {
            // this will be false if our silent login did not work
            console.log(`Keycloak init done, loginOk?: ${loginOk}`);
            if (loginOk) {
                return this.keycloakService.getToken();
            }
            else {
                // we want to block bootstrap process now
                return this.keycloakService.login().then(() => 'login');
            }
        })
            .then(tokenString => {
            const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
            console.log(`fetching profile ${JSON.stringify(parsedToken)}`);
            let profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS) &&
                JSON.parse(localStorage.getItem(TKIT_USER_PROFILE_LS));
            if (profileFromCache) {
                //if we have already a profile in LS, check if it is the smae user
                if (profileFromCache.person.email === parsedToken['email']) {
                    //same user, take from LS and load async to refresh
                    this.refreshProfile();
                    console.log(`load user profile from cache(and reloading asynchronously)`);
                    return profileFromCache;
                }
                else {
                    console.log(`User profile in LS does not match Keycloak token`);
                    localStorage.removeItem(TKIT_USER_PROFILE_LS);
                }
            }
            console.log(`load user profile from API`);
            return this.userProfileService.getCurrentUserFromBE().toPromise();
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update state`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`Keycloak auth init complete`);
            return true;
        })
            .catch(err => {
            console.log(`KC ERROR ${err} as json ${JSON.stringify(err)}`);
            throw err;
        });
    }
    init2() {
        console.log('kc init 4');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`);
        return (this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(ok => {
            console.log(`After KC init ${ok}`);
            return this.keycloakService.getToken();
        })
            .then(tokenString => {
            if (tokenString) {
                const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
                console.log('fetching profile');
                let profileFromCache;
                if ((profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS))) {
                    console.log(`load user profile from cache`);
                    //if we have already a profile in LS, check if it is the smae user
                    if (profileFromCache['email'] === parsedToken['email']) {
                        //same user, take from LS and load async to refresh
                        this.refreshProfile();
                        return JSON.parse(profileFromCache);
                    }
                    else {
                        console.log(`USer in LS does tno match. clear`);
                        localStorage.removeItem(TKIT_USER_PROFILE_LS);
                    }
                }
                console.log(`load user profile from API`);
                return this.userProfileService.getCurrentUserFromBE().toPromise();
            }
            else {
                console.log(`no TOKEN AAAAA`);
            }
        })
            // .then(ok => {
            //   // return Promise.all([
            //   //   this.keycloakService.loadUserProfile(),
            //   //   this.keycloakService.getToken(),
            //   //   this.userProfileService.getCurrentUserFromBE().toPromise()
            //   // ]);
            // })
            .catch(err => {
            console.log(`KC ERROR ${err}`);
            throw err;
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`KC init complete returnint`);
            return true;
        }));
    }
    setupEventListener() {
        this.keycloakService.keycloakEvents$.subscribe(ke => {
            // console.log(
            //   `KC Event ${ke.type} token: ${
            //     this.keycloakService.getKeycloakInstance().token
            //   }`
            // );
            // we are logged in, get tokens and store them in localstorage
            if (this.keycloakService.getKeycloakInstance().token) {
                localStorage.setItem(KC_TOKEN_LS, this.keycloakService.getKeycloakInstance().token);
            }
            else {
                localStorage.removeItem(KC_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().idToken) {
                localStorage.setItem(KC_ID_TOKEN_LS, this.keycloakService.getKeycloakInstance().idToken);
            }
            else {
                localStorage.removeItem(KC_ID_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().refreshToken) {
                localStorage.setItem(KC_REFRESH_TOKEN_LS, this.keycloakService.getKeycloakInstance().refreshToken);
            }
            else {
                localStorage.removeItem(KC_REFRESH_TOKEN_LS);
            }
            if (ke.type === KeycloakEventType.OnAuthLogout) {
                console.log('SSO logout nav to root');
                this.clearKCStateFromLocalstorage();
                this.router.navigateByUrl('/');
            }
        });
    }
    clearKCStateFromLocalstorage() {
        localStorage.removeItem(KC_ID_TOKEN_LS);
        localStorage.removeItem(KC_TOKEN_LS);
        localStorage.removeItem(KC_REFRESH_TOKEN_LS);
    }
    getSilentSSOUrl() {
        let currentBase = document.getElementsByTagName('base')[0].href;
        if (currentBase === '/') {
            currentBase = '';
        }
        return `${currentBase}/assets/silent-check-sso.html`;
    }
    hasRole(role) {
        if (typeof role === 'string') {
            const roleString = role;
            return this.user.roles.map(e => e.toUpperCase()).includes(roleString.toUpperCase());
        }
        else {
            return (this.user.roles
                .map(e => e.toUpperCase())
                .filter(item => role.map(e => e.toUpperCase()).includes(item.toUpperCase())).length > 0);
        }
    }
    getRoles() {
        return this.user.roles;
    }
    refreshProfile() {
        this.userProfileService.getCurrentUserFromBE().subscribe(profileData => {
            this.userProfile = profileData;
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(profileData));
            this.updateUserFromUserProfile(this.userProfile);
        });
    }
    loadFullProfile() {
        return this.userProfileService.getCurrentUser();
    }
    handleAvatarUpdate(avatarInfo) {
        if ((avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarImageUrl) && (avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarSmallImageUrl)) {
            this.avatarSubject.next({
                avatarImageUrl: 'portal-api' + avatarInfo.avatarImageUrl,
                avatarSmallImageUrl: 'portal-api' + avatarInfo.avatarSmallImageUrl
            });
        }
        else {
            this.avatarSubject.next(null);
        }
    }
    getAvatar() {
        return this.avatarSubject.asObservable();
    }
    updateUserFromUserProfile(userProfile) {
        this.user = {
            roles: userProfile.roles,
            userId: userProfile.id,
            principalId: userProfile.id,
            commonName: userProfile.person.displayName,
            userPerson: Object.assign({}, userProfile.person),
            functions: [],
        };
        if (this.userProfile.memberships) {
            this.userProfile.memberships.forEach(m => {
                m.roleMemberships.forEach(r => {
                    r.permissions.forEach(p => {
                        this.user.functions.push(p.key);
                    });
                });
            });
        }
    }
}
KeycloakAuthService.decorators = [
    { type: Injectable }
];
KeycloakAuthService.ctorParameters = () => [
    { type: KeycloakService },
    { type: ConfigurationService },
    { type: UserProfileService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,