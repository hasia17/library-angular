import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject } from 'rxjs';
import { shareReplay, switchMapTo, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class UserProfileService {
    constructor(http) {
        this.http = http;
        this.url = './portal-api/v1/userProfile/me';
        this.personUrl = './portal-api/v1/userProfile/me/userPerson';
        this.avatarUrl = './portal-api/v1/userProfile/me/avatar';
        this.settingsUrl = './portal-api/v1/userProfile/me/settings';
        this.changePasswordUrl = './portal-api/v1/userProfile/me/change-password';
        this.refreshProfile$ = new ReplaySubject(1);
        this.currentAvatar$ = new ReplaySubject(1);
        this.currentUser$ = this.refreshProfile$.pipe(switchMapTo(this.http.get(this.url)), shareReplay(1));
    }
    getCurrentUser() {
        return this.currentUser$;
    }
    getUpdatedAvatar() {
        return this.currentAvatar$;
    }
    updatePersonalInfo(person) {
        return this.http.put(this.personUrl, person);
        // .pipe(tap(() => this.refreshProfile()));
    }
    setUserAvatar(file) {
        const formData = new FormData();
        formData.append('file', file);
        return this.http.put(this.avatarUrl, formData).pipe(tap(avatar => this.currentAvatar$.next(avatar)));
    }
    removeAvatar() {
        return this.http.delete(this.avatarUrl).pipe(tap(() => this.currentAvatar$.next(null)));
    }
    updateUserSettings(settings) {
        return this.http.patch(this.settingsUrl, settings);
    }
    refreshProfile() {
        this.refreshProfile$.next();
    }
    getUserSettings() {
        return this.http.get(this.settingsUrl);
    }
    getCurrentUserFromBE() {
        return this.http.get(this.url);
    }
    changeUserPassword(resetPasswordDTO) {
        return this.http.put(this.changePasswordUrl, resetPasswordDTO);
    }
}
UserProfileService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserProfileService_Factory() { return new UserProfileService(i0.ɵɵinject(i1.HttpClient)); }, token: UserProfileService, providedIn: "root" });
UserProfileService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
UserProfileService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3J0YWwtbGliL3NyYy9saWIvYXBpL3NlcnZpY2VzL3VzZXItcHJvZmlsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2pELE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFHaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7OztBQU05RCxNQUFNLE9BQU8sa0JBQWtCO0lBZTdCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFkNUIsUUFBRyxHQUFHLGdDQUFnQyxDQUFBO1FBQ3RDLGNBQVMsR0FBRywyQ0FBMkMsQ0FBQTtRQUN2RCxjQUFTLEdBQUcsdUNBQXVDLENBQUE7UUFDbkQsZ0JBQVcsR0FBRyx5Q0FBeUMsQ0FBQTtRQUN2RCxzQkFBaUIsR0FBRyxnREFBZ0QsQ0FBQTtRQUVwRSxvQkFBZSxHQUFHLElBQUksYUFBYSxDQUFPLENBQUMsQ0FBQyxDQUFBO1FBQzVDLG1CQUFjLEdBQUcsSUFBSSxhQUFhLENBQWEsQ0FBQyxDQUFDLENBQUE7UUFFakQsaUJBQVksR0FBNEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQ3ZFLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBYyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDakQsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUE7SUFFc0MsQ0FBQztJQUV4QyxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUE7SUFDNUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQWtCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM1QywyQ0FBMkM7SUFDN0MsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFVO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7UUFDL0IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDN0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBYSxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDbEgsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RixDQUFDO0lBRUQsa0JBQWtCLENBQUMsUUFBb0M7UUFDckQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUM3QixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQTZCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwRSxDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxnQkFBa0M7UUFDbkQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQTtJQUNyRSxDQUFDOzs7O1lBM0RGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQVR6QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcydcbmltcG9ydCB7IFVzZXJQcm9maWxlLCBVc2VyUHJvZmlsZUFjY291bnRTZXR0aW5ncyB9IGZyb20gJy4uL21vZGVsL3VzZXItcHJvZmlsZS5tb2RlbCdcbmltcG9ydCB7IFVzZXJQZXJzb24gfSBmcm9tICcuLi9tb2RlbC9wZXJzb24ubW9kZWwnXG5pbXBvcnQgeyBzaGFyZVJlcGxheSwgc3dpdGNoTWFwVG8sIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xuaW1wb3J0IHsgQXZhdGFySW5mbyB9IGZyb20gJy4uL21vZGVsL2F2YXRhci1pbmZvLm1vZGVsJ1xuaW1wb3J0IHsgUmVzZXRQYXNzd29yZERUTyB9IGZyb20gJy4uL21vZGVsL3Jlc2V0UGFzc3dvcmREVE8nXG5pbXBvcnQgeyB3aXRoQ2FjaGUgfSBmcm9tICdAbmduZWF0L2Nhc2hldydcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBVc2VyUHJvZmlsZVNlcnZpY2Uge1xuICBwcml2YXRlIHVybCA9ICcuL3BvcnRhbC1hcGkvdjEvdXNlclByb2ZpbGUvbWUnXG4gIHByaXZhdGUgcGVyc29uVXJsID0gJy4vcG9ydGFsLWFwaS92MS91c2VyUHJvZmlsZS9tZS91c2VyUGVyc29uJ1xuICBwcml2YXRlIGF2YXRhclVybCA9ICcuL3BvcnRhbC1hcGkvdjEvdXNlclByb2ZpbGUvbWUvYXZhdGFyJ1xuICBwcml2YXRlIHNldHRpbmdzVXJsID0gJy4vcG9ydGFsLWFwaS92MS91c2VyUHJvZmlsZS9tZS9zZXR0aW5ncydcbiAgcHJpdmF0ZSBjaGFuZ2VQYXNzd29yZFVybCA9ICcuL3BvcnRhbC1hcGkvdjEvdXNlclByb2ZpbGUvbWUvY2hhbmdlLXBhc3N3b3JkJ1xuXG4gIHByaXZhdGUgcmVmcmVzaFByb2ZpbGUkID0gbmV3IFJlcGxheVN1YmplY3Q8dm9pZD4oMSlcbiAgcHJpdmF0ZSBjdXJyZW50QXZhdGFyJCA9IG5ldyBSZXBsYXlTdWJqZWN0PEF2YXRhckluZm8+KDEpXG5cbiAgcHJpdmF0ZSBjdXJyZW50VXNlciQ6IE9ic2VydmFibGU8VXNlclByb2ZpbGU+ID0gdGhpcy5yZWZyZXNoUHJvZmlsZSQucGlwZShcbiAgICBzd2l0Y2hNYXBUbyh0aGlzLmh0dHAuZ2V0PFVzZXJQcm9maWxlPih0aGlzLnVybCkpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gIClcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0Q3VycmVudFVzZXIoKTogT2JzZXJ2YWJsZTxVc2VyUHJvZmlsZT4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRVc2VyJFxuICB9XG5cbiAgZ2V0VXBkYXRlZEF2YXRhcigpOiBPYnNlcnZhYmxlPEF2YXRhckluZm8+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QXZhdGFyJFxuICB9XG5cbiAgdXBkYXRlUGVyc29uYWxJbmZvKHBlcnNvbjogVXNlclBlcnNvbik6IE9ic2VydmFibGU8VXNlclBlcnNvbj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHRoaXMucGVyc29uVXJsLCBwZXJzb24pXG4gICAgLy8gLnBpcGUodGFwKCgpID0+IHRoaXMucmVmcmVzaFByb2ZpbGUoKSkpO1xuICB9XG5cbiAgc2V0VXNlckF2YXRhcihmaWxlOiBGaWxlKTogT2JzZXJ2YWJsZTxBdmF0YXJJbmZvPiB7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKVxuICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8QXZhdGFySW5mbz4odGhpcy5hdmF0YXJVcmwsIGZvcm1EYXRhKS5waXBlKHRhcChhdmF0YXIgPT4gdGhpcy5jdXJyZW50QXZhdGFyJC5uZXh0KGF2YXRhcikpKVxuICB9XG5cbiAgcmVtb3ZlQXZhdGFyKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuYXZhdGFyVXJsKS5waXBlKHRhcCgoKSA9PiB0aGlzLmN1cnJlbnRBdmF0YXIkLm5leHQobnVsbCkpKVxuICB9XG5cbiAgdXBkYXRlVXNlclNldHRpbmdzKHNldHRpbmdzOiBVc2VyUHJvZmlsZUFjY291bnRTZXR0aW5ncyk6IE9ic2VydmFibGU8VXNlclBlcnNvbj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucGF0Y2godGhpcy5zZXR0aW5nc1VybCwgc2V0dGluZ3MpXG4gIH1cblxuICByZWZyZXNoUHJvZmlsZSgpIHtcbiAgICB0aGlzLnJlZnJlc2hQcm9maWxlJC5uZXh0KClcbiAgfVxuXG4gIGdldFVzZXJTZXR0aW5ncygpOiBPYnNlcnZhYmxlPFVzZXJQcm9maWxlQWNjb3VudFNldHRpbmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VXNlclByb2ZpbGVBY2NvdW50U2V0dGluZ3M+KHRoaXMuc2V0dGluZ3NVcmwpXG4gIH1cblxuICBnZXRDdXJyZW50VXNlckZyb21CRSgpOiBPYnNlcnZhYmxlPFVzZXJQcm9maWxlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VXNlclByb2ZpbGU+KHRoaXMudXJsKVxuICB9XG5cbiAgY2hhbmdlVXNlclBhc3N3b3JkKHJlc2V0UGFzc3dvcmREVE86IFJlc2V0UGFzc3dvcmREVE8pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0PGFueT4odGhpcy5jaGFuZ2VQYXNzd29yZFVybCwgcmVzZXRQYXNzd29yZERUTylcbiAgfVxufVxuIl19