import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
const baseUrl = './ahm-api/internal/applications';
export class HelpPageAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        };
    }
    getHelpDataItem(appId, helpItemId, type = 'PAGE') {
        return this.httpClient
            .get(`${baseUrl}/${appId}/helpItems`, {
            params: {
                helpItemId
            }
        })
            .pipe(map(helpItems => helpItems[0]));
    }
    getHelpDataItemLegacy(appId, context, type = 'PAGE') {
        console.log(`About to go to ${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`);
        return this.httpClient.post(`${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`, `"${type}"`, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            }
        });
    }
    saveHelpPage(appId, helpItem) {
        if (helpItem.id) {
            return this.httpClient.patch(`${baseUrl}/${appId}/helpItems/${helpItem.id}`, helpItem, {
                observe: 'response'
            });
        }
        else {
            return this.httpClient.post(`${baseUrl}/${appId}/helpItems`, helpItem, {
                observe: 'response'
            });
        }
    }
    saveHelpPageLegacy(helpItem) {
        return this.httpClient.post(`${baseUrl}/helpdata`, helpItem, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            },
            observe: 'response'
        });
    }
}
HelpPageAPIService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HelpPageAPIService_Factory() { return new HelpPageAPIService(i0.ɵɵinject(i1.HttpClient)); }, token: HelpPageAPIService, providedIn: "root" });
HelpPageAPIService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
HelpPageAPIService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC1wYWdlLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9ydGFsLWxpYi9zcmMvbGliL2FwaS9zZXJ2aWNlcy9oZWxwLXBhZ2UtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBZ0IsTUFBTSxzQkFBc0IsQ0FBQztBQUk3RSxPQUFPLEVBQUUsR0FBRyxFQUFPLE1BQU0sZ0JBQWdCLENBQUM7OztBQUUxQyxNQUFNLE9BQU8sR0FBRyxpQ0FBaUMsQ0FBQztBQUdsRCxNQUFNLE9BQU8sa0JBQWtCO0lBSTdCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFIMUMsZ0JBQVcsR0FBRztZQUNaLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDO1NBQ2pFLENBQUM7SUFDMkMsQ0FBQztJQUU5QyxlQUFlLENBQ2IsS0FBYSxFQUNiLFVBQWtCLEVBQ2xCLElBQUksR0FBRyxNQUFNO1FBRWIsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixHQUFHLENBQWEsR0FBRyxPQUFPLElBQUksS0FBSyxZQUFZLEVBQUU7WUFDaEQsTUFBTSxFQUFFO2dCQUNOLFVBQVU7YUFDWDtTQUNGLENBQUM7YUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQscUJBQXFCLENBQ25CLEtBQWEsRUFDYixPQUFlLEVBQ2YsSUFBSSxHQUFHLE1BQU07UUFFYixPQUFPLENBQUMsR0FBRyxDQUNULGtCQUFrQixPQUFPLGFBQWEsS0FBSyxJQUFJLGtCQUFrQixDQUMvRCxPQUFPLENBQ1IsRUFBRSxDQUNKLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN6QixHQUFHLE9BQU8sYUFBYSxLQUFLLElBQUksa0JBQWtCLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFDN0QsSUFBSSxJQUFJLEdBQUcsRUFDWDtZQUNFLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUscUJBQXFCO2dCQUNyQyxNQUFNLEVBQUUscUJBQXFCO2FBQzlCO1NBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FDVixLQUFhLEVBQ2IsUUFBa0I7UUFFbEIsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FDMUIsR0FBRyxPQUFPLElBQUksS0FBSyxjQUFjLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFDOUMsUUFBUSxFQUNSO2dCQUNFLE9BQU8sRUFBRSxVQUFVO2FBQ3BCLENBQ0YsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxJQUFJLEtBQUssWUFBWSxFQUFFLFFBQVEsRUFBRTtnQkFDckUsT0FBTyxFQUFFLFVBQVU7YUFDcEIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsUUFBa0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sV0FBVyxFQUFFLFFBQVEsRUFBRTtZQUMzRCxPQUFPLEVBQUU7Z0JBQ1AsY0FBYyxFQUFFLHFCQUFxQjtnQkFDckMsTUFBTSxFQUFFLHFCQUFxQjthQUM5QjtZQUNELE9BQU8sRUFBRSxVQUFVO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7WUF0RUYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUnpCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAncXVlcnlzdHJpbmcnO1xuaW1wb3J0IHsgSGVscERhdGEgfSBmcm9tICcuLi9tb2RlbC9oZWxwLWRhdGEubW9kZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IGJhc2VVcmwgPSAnLi9haG0tYXBpL2ludGVybmFsL2FwcGxpY2F0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgSGVscFBhZ2VBUElTZXJ2aWNlIHtcbiAgaHR0cE9wdGlvbnMgPSB7XG4gICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KVxuICB9O1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0SGVscERhdGFJdGVtKFxuICAgIGFwcElkOiBzdHJpbmcsXG4gICAgaGVscEl0ZW1JZDogc3RyaW5nLFxuICAgIHR5cGUgPSAnUEFHRSdcbiAgKTogT2JzZXJ2YWJsZTxIZWxwRGF0YT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcbiAgICAgIC5nZXQ8SGVscERhdGFbXT4oYCR7YmFzZVVybH0vJHthcHBJZH0vaGVscEl0ZW1zYCwge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICBoZWxwSXRlbUlkXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAucGlwZShtYXAoaGVscEl0ZW1zID0+IGhlbHBJdGVtc1swXSkpO1xuICB9XG5cbiAgZ2V0SGVscERhdGFJdGVtTGVnYWN5KFxuICAgIGFwcElkOiBzdHJpbmcsXG4gICAgY29udGV4dDogc3RyaW5nLFxuICAgIHR5cGUgPSAnUEFHRSdcbiAgKTogT2JzZXJ2YWJsZTxIZWxwRGF0YT4ge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYEFib3V0IHRvIGdvIHRvICR7YmFzZVVybH0vaGVscGRhdGEvJHthcHBJZH0vJHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgIGNvbnRleHRcbiAgICAgICl9YFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PEhlbHBEYXRhPihcbiAgICAgIGAke2Jhc2VVcmx9L2hlbHBkYXRhLyR7YXBwSWR9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRleHQpfWAsXG4gICAgICBgXCIke3R5cGV9XCJgLFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi92MStqc29uJyxcbiAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi92MStqc29uJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIHNhdmVIZWxwUGFnZShcbiAgICBhcHBJZDogc3RyaW5nLFxuICAgIGhlbHBJdGVtOiBIZWxwRGF0YVxuICApOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PiB7XG4gICAgaWYgKGhlbHBJdGVtLmlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBhdGNoKFxuICAgICAgICBgJHtiYXNlVXJsfS8ke2FwcElkfS9oZWxwSXRlbXMvJHtoZWxwSXRlbS5pZH1gLFxuICAgICAgICBoZWxwSXRlbSxcbiAgICAgICAge1xuICAgICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KGAke2Jhc2VVcmx9LyR7YXBwSWR9L2hlbHBJdGVtc2AsIGhlbHBJdGVtLCB7XG4gICAgICAgIG9ic2VydmU6ICdyZXNwb25zZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVIZWxwUGFnZUxlZ2FjeShoZWxwSXRlbTogSGVscERhdGEpOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0KGAke2Jhc2VVcmx9L2hlbHBkYXRhYCwgaGVscEl0ZW0sIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi92MStqc29uJyxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vdjEranNvbidcbiAgICAgIH0sXG4gICAgICBvYnNlcnZlOiAncmVzcG9uc2UnXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==