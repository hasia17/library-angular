import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SearchTemplateAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.baseUrl = './portal-api/v1/searchTemplates';
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                Accept: 'application/json'
            })
        };
    }
    getSearchTemplatesLegacy(user, application, page, includeGlobal = true) {
        return this.httpClient.post(`${this.baseUrl}/search/criteria`, {
            application,
            page,
            user,
            includeGlobal
        }, this.httpOptions);
    }
    getTemplateById(id) {
        return this.httpClient.get(`${this.baseUrl}/${id}`, this.httpOptions);
    }
    createNewTemplate(template) {
        return this.httpClient.post(`${this.baseUrl}`, template, this.httpOptions);
    }
    updateTemplate(id, template) {
        return this.httpClient.put(`${this.baseUrl}/${id}`, template, this.httpOptions);
    }
    deleteTemplate(id) {
        return this.httpClient.delete(`${this.baseUrl}/${id}`);
    }
}
SearchTemplateAPIService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchTemplateAPIService_Factory() { return new SearchTemplateAPIService(i0.ɵɵinject(i1.HttpClient)); }, token: SearchTemplateAPIService, providedIn: "root" });
SearchTemplateAPIService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
SearchTemplateAPIService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXRlbXBsYXRlLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcG9ydGFsLWxpYi9zcmMvbGliL2FwaS9zZXJ2aWNlcy9zZWFyY2gtdGVtcGxhdGUtYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFLL0QsTUFBTSxPQUFPLHdCQUF3QjtJQVVuQyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVHpCLFlBQU8sR0FBVyxpQ0FBaUMsQ0FBQztRQUVwRCxnQkFBVyxHQUEyQjtZQUNyRCxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3ZCLGNBQWMsRUFBRSxrQkFBa0I7Z0JBQ2xDLE1BQU0sRUFBRSxrQkFBa0I7YUFDM0IsQ0FBQztTQUNILENBQUM7SUFFMkMsQ0FBQztJQUU5Qyx3QkFBd0IsQ0FDdEIsSUFBWSxFQUNaLFdBQW1CLEVBQ25CLElBQVksRUFDWixhQUFhLEdBQUcsSUFBSTtRQUVwQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN6QixHQUFHLElBQUksQ0FBQyxPQUFPLGtCQUFrQixFQUNqQztZQUNFLFdBQVc7WUFDWCxJQUFJO1lBQ0osSUFBSTtZQUNKLGFBQWE7U0FDZCxFQUNELElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7SUFDSixDQUFDO0lBRUQsZUFBZSxDQUFDLEVBQVU7UUFDeEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FDeEIsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRSxFQUN2QixJQUFJLENBQUMsV0FBVyxDQUNqQixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQXdCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNqQixRQUFRLEVBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQ1osRUFBVSxFQUNWLFFBQXdCO1FBRXhCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQ3hCLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUUsRUFDdkIsUUFBUSxFQUNSLElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBVSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O1lBM0RGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQUp6QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgU2VhcmNoVGVtcGxhdGUgfSBmcm9tICcuLi9tb2RlbC9zZWFyY2gtdGVtcGxhdGUubW9kZWwnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoVGVtcGxhdGVBUElTZXJ2aWNlIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGJhc2VVcmw6IHN0cmluZyA9ICcuL3BvcnRhbC1hcGkvdjEvc2VhcmNoVGVtcGxhdGVzJztcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBodHRwT3B0aW9uczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcclxuICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICB9KVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cclxuXHJcbiAgZ2V0U2VhcmNoVGVtcGxhdGVzTGVnYWN5KFxyXG4gICAgdXNlcjogc3RyaW5nLFxyXG4gICAgYXBwbGljYXRpb246IHN0cmluZyxcclxuICAgIHBhZ2U6IHN0cmluZyxcclxuICAgIGluY2x1ZGVHbG9iYWwgPSB0cnVlXHJcbiAgKTogT2JzZXJ2YWJsZTxTZWFyY2hUZW1wbGF0ZVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8U2VhcmNoVGVtcGxhdGVbXT4oXHJcbiAgICAgIGAke3RoaXMuYmFzZVVybH0vc2VhcmNoL2NyaXRlcmlhYCxcclxuICAgICAge1xyXG4gICAgICAgIGFwcGxpY2F0aW9uLFxyXG4gICAgICAgIHBhZ2UsXHJcbiAgICAgICAgdXNlcixcclxuICAgICAgICBpbmNsdWRlR2xvYmFsXHJcbiAgICAgIH0sXHJcbiAgICAgIHRoaXMuaHR0cE9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZUJ5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U2VhcmNoVGVtcGxhdGU+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PFNlYXJjaFRlbXBsYXRlPihcclxuICAgICAgYCR7dGhpcy5iYXNlVXJsfS8ke2lkfWAsXHJcbiAgICAgIHRoaXMuaHR0cE9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVOZXdUZW1wbGF0ZSh0ZW1wbGF0ZTogU2VhcmNoVGVtcGxhdGUpOiBPYnNlcnZhYmxlPFNlYXJjaFRlbXBsYXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8U2VhcmNoVGVtcGxhdGU+KFxyXG4gICAgICBgJHt0aGlzLmJhc2VVcmx9YCxcclxuICAgICAgdGVtcGxhdGUsXHJcbiAgICAgIHRoaXMuaHR0cE9wdGlvbnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUZW1wbGF0ZShcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICB0ZW1wbGF0ZTogU2VhcmNoVGVtcGxhdGVcclxuICApOiBPYnNlcnZhYmxlPFNlYXJjaFRlbXBsYXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnB1dDxTZWFyY2hUZW1wbGF0ZT4oXHJcbiAgICAgIGAke3RoaXMuYmFzZVVybH0vJHtpZH1gLFxyXG4gICAgICB0ZW1wbGF0ZSxcclxuICAgICAgdGhpcy5odHRwT3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZVRlbXBsYXRlKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlPGJvb2xlYW4+KGAke3RoaXMuYmFzZVVybH0vJHtpZH1gKTtcclxuICB9XHJcbn1cclxuIl19