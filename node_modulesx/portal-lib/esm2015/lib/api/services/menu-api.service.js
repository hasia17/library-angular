import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { MessageService } from 'primeng/api';
import { withCache } from '@ngneat/cashew';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "primeng/api";
export class MenuApiService {
    constructor(http, messageService) {
        this.http = http;
        this.messageService = messageService;
        this.menuUrl = './portal-api/legacy/menustructure'; // URL to web api
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
        };
    }
    getMenuItems(portalId) {
        return this.http
            .get(`${this.menuUrl}/${portalId}`, withCache())
            .pipe(catchError(this.handleError('getMenuItems', [])));
    }
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    handleError(operation = 'operation', result) {
        return (error) => {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            this.log(`${operation} failed: ${error.message}, will return ${JSON.stringify(result)}`);
            // Let the app keep running by returning an empty result.
            return of(result);
        };
    }
    /** Log a HeroService message with the MessageService */
    log(message) {
        console.log(message);
    }
}
MenuApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MenuApiService_Factory() { return new MenuApiService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService)); }, token: MenuApiService, providedIn: "root" });
MenuApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MenuApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: MessageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BvcnRhbC1saWIvc3JjL2xpYi9hcGkvc2VydmljZXMvbWVudS1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDOUQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFPLE1BQU0sZ0JBQWdCLENBQUE7QUFFaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7Ozs7QUFLMUMsTUFBTSxPQUFPLGNBQWM7SUFPekIsWUFBb0IsSUFBZ0IsRUFBVSxjQUE4QjtRQUF4RCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBTnBFLFlBQU8sR0FBRyxtQ0FBbUMsQ0FBQSxDQUFDLGlCQUFpQjtRQUV2RSxnQkFBVyxHQUFHO1lBQ1osT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLENBQUM7U0FDakUsQ0FBQTtJQUU4RSxDQUFDO0lBRWhGLFlBQVksQ0FBQyxRQUFnQjtRQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFtQixHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUM7YUFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFtQixjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzdFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNLLFdBQVcsQ0FBSSxTQUFTLEdBQUcsV0FBVyxFQUFFLE1BQVU7UUFDeEQsT0FBTyxDQUFDLEtBQVUsRUFBaUIsRUFBRTtZQUNuQyx3REFBd0Q7WUFDeEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLHlCQUF5QjtZQUU5Qyw4REFBOEQ7WUFDOUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsWUFBWSxLQUFLLENBQUMsT0FBTyxpQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7WUFFeEYseURBQXlEO1lBQ3pELE9BQU8sRUFBRSxDQUFDLE1BQVcsQ0FBQyxDQUFBO1FBQ3hCLENBQUMsQ0FBQTtJQUNILENBQUM7SUFFRCx3REFBd0Q7SUFDaEQsR0FBRyxDQUFDLE9BQWU7UUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN0QixDQUFDOzs7O1lBeENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBVFEsVUFBVTtZQUlWLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcbmltcG9ydCB7IFBvcnRhbE1lbnVJdGVtIH0gZnJvbSAnLi4vbW9kZWwvbWVudS1pdGVtLm1vZGVsJ1xuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICdwcmltZW5nL2FwaSdcbmltcG9ydCB7IHdpdGhDYWNoZSB9IGZyb20gJ0BuZ25lYXQvY2FzaGV3J1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWVudUFwaVNlcnZpY2Uge1xuICBwcml2YXRlIG1lbnVVcmwgPSAnLi9wb3J0YWwtYXBpL2xlZ2FjeS9tZW51c3RydWN0dXJlJyAvLyBVUkwgdG8gd2ViIGFwaVxuXG4gIGh0dHBPcHRpb25zID0ge1xuICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSksXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlKSB7fVxuXG4gIGdldE1lbnVJdGVtcyhwb3J0YWxJZDogU3RyaW5nKTogT2JzZXJ2YWJsZTxQb3J0YWxNZW51SXRlbVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxQb3J0YWxNZW51SXRlbVtdPihgJHt0aGlzLm1lbnVVcmx9LyR7cG9ydGFsSWR9YCwgd2l0aENhY2hlKCkpXG4gICAgICAucGlwZShjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3I8UG9ydGFsTWVudUl0ZW1bXT4oJ2dldE1lbnVJdGVtcycsIFtdKSkpXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIEh0dHAgb3BlcmF0aW9uIHRoYXQgZmFpbGVkLlxuICAgKiBMZXQgdGhlIGFwcCBjb250aW51ZS5cbiAgICogQHBhcmFtIG9wZXJhdGlvbiAtIG5hbWUgb2YgdGhlIG9wZXJhdGlvbiB0aGF0IGZhaWxlZFxuICAgKiBAcGFyYW0gcmVzdWx0IC0gb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGFzIHRoZSBvYnNlcnZhYmxlIHJlc3VsdFxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcjxUPihvcGVyYXRpb24gPSAnb3BlcmF0aW9uJywgcmVzdWx0PzogVCkge1xuICAgIHJldHVybiAoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8VD4gPT4ge1xuICAgICAgLy8gVE9ETzogc2VuZCB0aGUgZXJyb3IgdG8gcmVtb3RlIGxvZ2dpbmcgaW5mcmFzdHJ1Y3R1cmVcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpIC8vIGxvZyB0byBjb25zb2xlIGluc3RlYWRcblxuICAgICAgLy8gVE9ETzogYmV0dGVyIGpvYiBvZiB0cmFuc2Zvcm1pbmcgZXJyb3IgZm9yIHVzZXIgY29uc3VtcHRpb25cbiAgICAgIHRoaXMubG9nKGAke29wZXJhdGlvbn0gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9LCB3aWxsIHJldHVybiAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9YClcblxuICAgICAgLy8gTGV0IHRoZSBhcHAga2VlcCBydW5uaW5nIGJ5IHJldHVybmluZyBhbiBlbXB0eSByZXN1bHQuXG4gICAgICByZXR1cm4gb2YocmVzdWx0IGFzIFQpXG4gICAgfVxuICB9XG5cbiAgLyoqIExvZyBhIEhlcm9TZXJ2aWNlIG1lc3NhZ2Ugd2l0aCB0aGUgTWVzc2FnZVNlcnZpY2UgKi9cbiAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSlcbiAgfVxufVxuIl19