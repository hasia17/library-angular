import { Injectable } from "@angular/core";
import { HttpClient, HttpParams, HttpHeaders } from "@angular/common/http";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class LaunchpadService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.url = "./launchpad-api/launchpad";
    }
    getLaunchpads(criteria) {
        const parameters = new HttpParams();
        Object.keys(criteria).forEach(key => parameters.set(key, criteria[key]));
        const options = { params: parameters };
        return this.httpClient.get(this.url, options);
    }
    addToLaunchpad(id, createTileDTO) {
        const httpOptions = {
            headers: new HttpHeaders({
                "Content-Type": "application/json"
            })
        };
        return this.httpClient.post(`${this.url}/${id}/tiles`, createTileDTO, httpOptions);
    }
}
LaunchpadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LaunchpadService_Factory() { return new LaunchpadService(i0.ɵɵinject(i1.HttpClient)); }, token: LaunchpadService, providedIn: "root" });
LaunchpadService.decorators = [
    { type: Injectable, args: [{ providedIn: "root" },] }
];
LaunchpadService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF1bmNocGFkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb3J0YWwtbGliL3NyYy9saWIvYXBpL3NlcnZpY2VzL2xhdW5jaHBhZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7OztBQWdCM0UsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRjFDLFFBQUcsR0FBRywyQkFBMkIsQ0FBQztJQUVXLENBQUM7SUFFdkMsYUFBYSxDQUNsQixRQUErQztRQUUvQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLE9BQU8sR0FBRyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFpQixJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSxjQUFjLENBQ25CLEVBQVUsRUFDVixhQUFxQztRQUVyQyxNQUFNLFdBQVcsR0FBRztZQUNsQixPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3ZCLGNBQWMsRUFBRSxrQkFBa0I7YUFDbkMsQ0FBQztTQUNILENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUN6QixHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxRQUFRLEVBQ3pCLGFBQWEsRUFDYixXQUFXLENBQ1osQ0FBQztJQUNKLENBQUM7Ozs7WUE5QkYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBZnpCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZlZWRiYWNrRFRPIH0gZnJvbSBcIi4uL21vZGVsL2ZlZWRiYWNrLm1vZGVsXCI7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zLCBIdHRwSGVhZGVycyB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBMYXVuY2hwYWREVE8gfSBmcm9tIFwiLi4vbW9kZWwvbGF1bmNocGFkRFRPXCI7XG5pbXBvcnQgeyBMYXVuY2hwYWRUeXBlIH0gZnJvbSBcIi4uL21vZGVsL2xhdW5jaHBhZFR5cGVcIjtcbmltcG9ydCB7IExhdW5jaHBhZFRpbGVDcmVhdGVEVE8gfSBmcm9tIFwiLi4vbW9kZWwvbGF1bmNocGFkVGlsZUNyZWF0ZURUT1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdldEFsbExhdW5jaHBhZHNGaWx0ZXJlZFJlcXVlc3RQYXJhbXMge1xuICBuYW1lPzogc3RyaW5nO1xuICBwb3J0YWxJZD86IHN0cmluZztcbiAgdHlwZT86IExhdW5jaHBhZFR5cGU7XG4gIHVzZXJHcm91cElkPzogc3RyaW5nO1xuICB1c2VySWQ/OiBzdHJpbmc7XG4gIHVzZXJPcmdhbml6YXRpb25JZD86IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiBcInJvb3RcIiB9KVxuZXhwb3J0IGNsYXNzIExhdW5jaHBhZFNlcnZpY2Uge1xuICB1cmwgPSBcIi4vbGF1bmNocGFkLWFwaS9sYXVuY2hwYWRcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgcHVibGljIGdldExhdW5jaHBhZHMoXG4gICAgY3JpdGVyaWE6IEdldEFsbExhdW5jaHBhZHNGaWx0ZXJlZFJlcXVlc3RQYXJhbXNcbiAgKTogT2JzZXJ2YWJsZTxMYXVuY2hwYWREVE9bXT4ge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcygpO1xuICAgIE9iamVjdC5rZXlzKGNyaXRlcmlhKS5mb3JFYWNoKGtleSA9PiBwYXJhbWV0ZXJzLnNldChrZXksIGNyaXRlcmlhW2tleV0pKTtcbiAgICBjb25zdCBvcHRpb25zID0geyBwYXJhbXM6IHBhcmFtZXRlcnMgfTtcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxMYXVuY2hwYWREVE9bXT4odGhpcy51cmwsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGFkZFRvTGF1bmNocGFkKFxuICAgIGlkOiBudW1iZXIsXG4gICAgY3JlYXRlVGlsZURUTzogTGF1bmNocGFkVGlsZUNyZWF0ZURUT1xuICApOiBPYnNlcnZhYmxlPExhdW5jaHBhZERUTz4ge1xuICAgIGNvbnN0IGh0dHBPcHRpb25zID0ge1xuICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH0pXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxMYXVuY2hwYWREVE8+KFxuICAgICAgYCR7dGhpcy51cmx9LyR7aWR9L3RpbGVzYCxcbiAgICAgIGNyZWF0ZVRpbGVEVE8sXG4gICAgICBodHRwT3B0aW9uc1xuICAgICk7XG4gIH1cbn1cbiJdfQ==