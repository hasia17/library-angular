import { HttpClient } from '@angular/common/http';
import { Injectable, Inject } from '@angular/core';
import { APP_CONFIG } from './injection-tokens';
import { PortalApiService } from './services/portal-api.service';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./services/portal-api.service";
import * as i3 from "./injection-tokens";
const TKIT_PORTAL_ID = 'TKIT_PORTAL_ID';
export class ConfigurationService {
    constructor(http, portalService, appConfig) {
        this.http = http;
        this.portalService = portalService;
        this.appConfig = appConfig;
        this.lang$ = new ReplaySubject(1);
    }
    init() {
        return new Promise((resolve, reject) => {
            if (this.appConfig.skipRemoteConfigLoad) {
                console.log('TKA001: Remote config load is disabled. To enable it, remove the "skipRemoteConfigLoad" key in your environemnt.json');
                this.customEnv = this.appConfig;
                resolve(false);
            }
            let loadConfigPromise;
            // if we have Backend env vars injected in HTML, use it
            console.log(`ENV resolved ${window['APP_CONFIG']}`);
            if (window['APP_CONFIG']) {
                loadConfigPromise = new Promise((resolve, reject) => {
                    resolve(window['APP_CONFIG']);
                });
            }
            else {
                console.log('noooo moar http');
                //otherwise fetch them from env.json
                loadConfigPromise = this.http.get(this.appConfig.remoteConfigURL || 'assets/env.json').toPromise();
            }
            loadConfigPromise
                .then(config => {
                if (config) {
                    const sanitizedEnvValues = this.sanitizeConfig(config);
                    this.customEnv = Object.assign(Object.assign({}, this.appConfig), sanitizedEnvValues);
                }
            })
                .then(() => {
                const portalId = this.customEnv[TKIT_PORTAL_ID] || 'PORTAL';
                this.portalService
                    .getPortalData(portalId)
                    .toPromise()
                    .then(data => {
                    if (data) {
                        this.portalData = data;
                    }
                    resolve(true);
                })
                    .catch(err => {
                    console.log(`Failed to load portal data! ${JSON.stringify(err)}`);
                    this.portalData = { portalId: 'PORTAL' };
                    resolve(true);
                });
            })
                .catch(e => {
                console.log(`Failed to load env configuration`);
                reject(e);
            });
        });
    }
    sanitizeConfig(config) {
        return (Object.keys(config)
            // only take values that are interpolated/set
            .filter(key => !config[key].startsWith('${'))
            .reduce((obj, key) => {
            obj[key] = config[key];
            return obj;
        }, {}));
    }
    getProperty(key) {
        return this.customEnv[key];
    }
    getPortalData() {
        return this.portalData;
    }
    setLang(lang) {
        console.log('[CONFIG SERVICE] SETTING LANG: ', lang);
        this.lang$.next(lang);
    }
}
ConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PortalApiService), i0.ɵɵinject(i3.APP_CONFIG)); }, token: ConfigurationService, providedIn: "root" });
ConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ConfigurationService.ctorParameters = () => [
    { type: HttpClient },
    { type: PortalApiService },
    { type: undefined, decorators: [{ type: Inject, args: [APP_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,