import { InjectionToken, Injectable, NgModule, APP_INITIALIZER, ɵɵdefineInjectable, ɵɵinject, Inject, Directive, Renderer2, ElementRef, ViewContainerRef, Input, EventEmitter, Component, Output, ChangeDetectionStrategy, ViewChild, Injector, ContentChild, NgZone, SkipSelf, Optional, TemplateRef, forwardRef } from '@angular/core';
import { of, ReplaySubject, Subject, BehaviorSubject, isObservable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { KeycloakEventType, KeycloakService, KeycloakAngularModule } from 'keycloak-angular';
import { HttpClient, HttpHeaders, HttpResponse, HttpParams, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { withCache, HttpCacheInterceptorModule, useHttpCacheLocalStorage } from '@ngneat/cashew';
import { switchMapTo, shareReplay, tap, filter, map, catchError } from 'rxjs/operators';
import { Router, NavigationEnd, NavigationStart, ActivationEnd, NavigationError, ActivatedRoute } from '@angular/router';
import { FormControl, Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateService, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { ButtonModule } from 'primeng/button';
import { CalendarModule } from 'primeng/calendar';
import { CardModule } from 'primeng/card';
import { CheckboxModule } from 'primeng/checkbox';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { DialogModule } from 'primeng/dialog';
import { DropdownModule } from 'primeng/dropdown';
import { DialogService, DynamicDialogModule } from 'primeng/dynamicdialog';
import { InputSwitchModule } from 'primeng/inputswitch';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { MenuModule } from 'primeng/menu';
import { MessageModule } from 'primeng/message';
import { MessagesModule } from 'primeng/messages';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { PaginatorModule } from 'primeng/paginator';
import { PanelModule } from 'primeng/panel';
import { PanelMenuModule } from 'primeng/panelmenu';
import { ScrollPanelModule } from 'primeng/scrollpanel';
import { SelectButtonModule } from 'primeng/selectbutton';
import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { ToggleButtonModule } from 'primeng/togglebutton';
import { Tooltip, TooltipModule } from 'primeng/tooltip';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { RatingModule } from 'primeng/rating';
import { RippleModule } from 'primeng/ripple';
import { SkeletonModule } from 'primeng/skeleton';
import { BreadcrumbModule } from 'primeng/breadcrumb';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog/';
import { MessageService, PrimeNGConfig } from 'primeng/api';
import { BreakpointObserver } from '@angular/cdk/layout';
import { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';

const APP_CONFIG = new InjectionToken('APP_CONFIG');
const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');

class MockAuthService {
    constructor() {
        this.mockUser = {
            person: {
                displayName: 'Max Musterman',
                firstName: 'Max',
                lastName: 'Mustermann',
                email: 'max.mustermann@capgemini.com'
            },
            accountSettings: {
                localeAndTimeSettings: { locale: 'de', timezone: 'GMT' },
                notificationSettings: {},
                preferences: [],
                privacySettings: {}
            },
            id: 'ID_MOCK_USER',
            identityProvider: 'MOCK_TKIT_PORTAL_LIB',
            identityProviderId: 'MOCK_ID',
            roles: ['user', 'admin'],
            memberships: [
                {
                    application: 'APP1',
                    roleMemberships: [
                        {
                            role: 'user',
                            permissions: [
                                {
                                    action: 'EDIT',
                                    resource: 'ITEM',
                                    name: 'Edit item',
                                    key: 'ITEM#EDIT'
                                }
                            ]
                        }
                    ]
                }
            ]
        };
    }
    currentUser() {
        return this.mockUser;
    }
    getAvatar() {
        return of(this.mockUser.avatar);
    }
    init() {
        return new Promise((resolve, reject) => resolve(true));
    }
    hasPermission(permissionKey) {
        return true;
    }
    logout() {
        throw new Error('Method not implemented.');
    }
    getAuthProviderName() {
        return 'MOCK_TKIT_PORTAL_LIB';
    }
    hasRole(role) {
        return true;
    }
    getRoles() {
        return ['tkit-portal-admin'];
    }
}
MockAuthService.decorators = [
    { type: Injectable }
];
MockAuthService.ctorParameters = () => [];

function initializer(authService) {
    console.log(`Start Mock auth initializer`);
    return () => authService.init().then(res => {
        console.log(`mock auth app_initializer resolved ${res}`);
        return res;
    });
}
/**
 * Mock auth module providing mocked user profile and authnetication. For dev use only.
 */
class MockAuthModule {
}
MockAuthModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [],
                declarations: [],
                providers: [
                    {
                        provide: AUTH_SERVICE,
                        useClass: MockAuthService,
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: initializer,
                        multi: true,
                        deps: [AUTH_SERVICE],
                    },
                ],
            },] }
];

class PortalApiService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.baseUrl = "./portal-api/v1/portals";
    }
    getPortalData(portal) {
        return this.httpClient.get(`${this.baseUrl}/${portal}`, withCache());
    }
}
PortalApiService.ɵprov = ɵɵdefineInjectable({ factory: function PortalApiService_Factory() { return new PortalApiService(ɵɵinject(HttpClient)); }, token: PortalApiService, providedIn: "root" });
PortalApiService.decorators = [
    { type: Injectable, args: [{ providedIn: "root" },] }
];
PortalApiService.ctorParameters = () => [
    { type: HttpClient }
];

const TKIT_PORTAL_ID = 'TKIT_PORTAL_ID';
class ConfigurationService {
    constructor(http, portalService, appConfig) {
        this.http = http;
        this.portalService = portalService;
        this.appConfig = appConfig;
        this.lang$ = new ReplaySubject(1);
    }
    init() {
        return new Promise((resolve, reject) => {
            if (this.appConfig.skipRemoteConfigLoad) {
                console.log('TKA001: Remote config load is disabled. To enable it, remove the "skipRemoteConfigLoad" key in your environemnt.json');
                this.customEnv = this.appConfig;
                resolve(false);
            }
            let loadConfigPromise;
            // if we have Backend env vars injected in HTML, use it
            console.log(`ENV resolved ${window['APP_CONFIG']}`);
            if (window['APP_CONFIG']) {
                loadConfigPromise = new Promise((resolve, reject) => {
                    resolve(window['APP_CONFIG']);
                });
            }
            else {
                console.log('noooo moar http');
                //otherwise fetch them from env.json
                loadConfigPromise = this.http.get(this.appConfig.remoteConfigURL || 'assets/env.json').toPromise();
            }
            loadConfigPromise
                .then(config => {
                if (config) {
                    const sanitizedEnvValues = this.sanitizeConfig(config);
                    this.customEnv = Object.assign(Object.assign({}, this.appConfig), sanitizedEnvValues);
                }
            })
                .then(() => {
                const portalId = this.customEnv[TKIT_PORTAL_ID] || 'PORTAL';
                this.portalService
                    .getPortalData(portalId)
                    .toPromise()
                    .then(data => {
                    if (data) {
                        this.portalData = data;
                    }
                    resolve(true);
                })
                    .catch(err => {
                    console.log(`Failed to load portal data! ${JSON.stringify(err)}`);
                    this.portalData = { portalId: 'PORTAL' };
                    resolve(true);
                });
            })
                .catch(e => {
                console.log(`Failed to load env configuration`);
                reject(e);
            });
        });
    }
    sanitizeConfig(config) {
        return (Object.keys(config)
            // only take values that are interpolated/set
            .filter(key => !config[key].startsWith('${'))
            .reduce((obj, key) => {
            obj[key] = config[key];
            return obj;
        }, {}));
    }
    getProperty(key) {
        return this.customEnv[key];
    }
    getPortalData() {
        return this.portalData;
    }
    setLang(lang) {
        console.log('[CONFIG SERVICE] SETTING LANG: ', lang);
        this.lang$.next(lang);
    }
}
ConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(ɵɵinject(HttpClient), ɵɵinject(PortalApiService), ɵɵinject(APP_CONFIG)); }, token: ConfigurationService, providedIn: "root" });
ConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ConfigurationService.ctorParameters = () => [
    { type: HttpClient },
    { type: PortalApiService },
    { type: undefined, decorators: [{ type: Inject, args: [APP_CONFIG,] }] }
];

class UserProfileService {
    constructor(http) {
        this.http = http;
        this.url = './portal-api/v1/userProfile/me';
        this.personUrl = './portal-api/v1/userProfile/me/userPerson';
        this.avatarUrl = './portal-api/v1/userProfile/me/avatar';
        this.settingsUrl = './portal-api/v1/userProfile/me/settings';
        this.changePasswordUrl = './portal-api/v1/userProfile/me/change-password';
        this.refreshProfile$ = new ReplaySubject(1);
        this.currentAvatar$ = new ReplaySubject(1);
        this.currentUser$ = this.refreshProfile$.pipe(switchMapTo(this.http.get(this.url)), shareReplay(1));
    }
    getCurrentUser() {
        return this.currentUser$;
    }
    getUpdatedAvatar() {
        return this.currentAvatar$;
    }
    updatePersonalInfo(person) {
        return this.http.put(this.personUrl, person);
        // .pipe(tap(() => this.refreshProfile()));
    }
    setUserAvatar(file) {
        const formData = new FormData();
        formData.append('file', file);
        return this.http.put(this.avatarUrl, formData).pipe(tap(avatar => this.currentAvatar$.next(avatar)));
    }
    removeAvatar() {
        return this.http.delete(this.avatarUrl).pipe(tap(() => this.currentAvatar$.next(null)));
    }
    updateUserSettings(settings) {
        return this.http.patch(this.settingsUrl, settings);
    }
    refreshProfile() {
        this.refreshProfile$.next();
    }
    getUserSettings() {
        return this.http.get(this.settingsUrl);
    }
    getCurrentUserFromBE() {
        return this.http.get(this.url);
    }
    changeUserPassword(resetPasswordDTO) {
        return this.http.put(this.changePasswordUrl, resetPasswordDTO);
    }
}
UserProfileService.ɵprov = ɵɵdefineInjectable({ factory: function UserProfileService_Factory() { return new UserProfileService(ɵɵinject(HttpClient)); }, token: UserProfileService, providedIn: "root" });
UserProfileService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
UserProfileService.ctorParameters = () => [
    { type: HttpClient }
];

const DEFAULT_AVATAR_URL = 'portal-lib/assets/images/default_avatar.png';
const CONFIG_KEY_TKIT_PORTAL_DEFAULT_THEME = "TKIT_PORTAL_DEFAULT_THEME";
const CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT = "TKIT_PORTAL_DISABLE_THEME_MANAGEMENT";
const CONFIG_KEY_TKIT_PORTAL_THEME_SERVER_URL = "TKIT_PORTAL_THEME_SERVER_URL";
const CONFIG_KEY_TKIT_TOKEN_ROLE_CLAIM_NAME = "TKIT_TOKEN_ROLE_CLAIM_NAME";
const CONFIG_KEY_TKIT_PORTAL_ID = "TKIT_PORTAL_ID";
const CONFIG_KEY_TKIT_SUPPORTED_LANGUAGES = "TKIT_SUPPORTED_LANGUAGES";
const CONFIG_KEY_TKIT_SEARCH_BASE_URL = "TKIT_SEARCH_BASE_URL";
const CONFIG_KEY_APP_BASE_HREF = "APP_BASE_HREF";
const CONFIG_KEY_KEYCLOAK_REALM = "KEYCLOAK_REALM";
const CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO = "KEYCLOAK_ENABLE_SILENT_SSO";
const CONFIG_KEY_KEYCLOAK_URL = "KEYCLOAK_URL";
const CONFIG_KEY_KEYCLOAK_CLIENT_ID = "KEYCLOAK_CLIENT_ID";

const KC_REFRESH_TOKEN_LS = 'kc_refreshToken';
const KC_ID_TOKEN_LS = 'kc_idToken';
const KC_TOKEN_LS = 'kc_token';
const TKIT_USER_PROFILE_LS = 'tkit_user_profile';
class KeycloakAuthService {
    constructor(keycloakService, configService, userProfileService, router) {
        this.keycloakService = keycloakService;
        this.configService = configService;
        this.userProfileService = userProfileService;
        this.router = router;
        this.user = {
            userId: 'anonymous',
            userPerson: { firstName: 'Guest' },
            functions: [],
            roles: [],
        };
    }
    hasPermission(permissionKey) {
        return this.user.functions ? this.user.functions.includes(permissionKey) : false;
    }
    currentUser() {
        return this.userProfile;
    }
    logout() {
        this.clearKCStateFromLocalstorage();
        this.keycloakService.logout();
    }
    getAuthProviderName() {
        return 'Keycloak based Security';
    }
    init() {
        console.log('Keycloak Auth initialization');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            console.log(`Got tokens in LC ${parsedToken.exp} ${parsedToken.sub}`);
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        // console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`)
        return this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(loginOk => {
            // this will be false if our silent login did not work
            console.log(`Keycloak init done, loginOk?: ${loginOk}`);
            if (loginOk) {
                return this.keycloakService.getToken();
            }
            else {
                // we want to block bootstrap process now
                return this.keycloakService.login().then(() => 'login');
            }
        })
            .then(tokenString => {
            const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
            console.log(`fetching profile ${JSON.stringify(parsedToken)}`);
            let profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS) &&
                JSON.parse(localStorage.getItem(TKIT_USER_PROFILE_LS));
            if (profileFromCache) {
                //if we have already a profile in LS, check if it is the smae user
                if (profileFromCache.person.email === parsedToken['email']) {
                    //same user, take from LS and load async to refresh
                    this.refreshProfile();
                    console.log(`load user profile from cache(and reloading asynchronously)`);
                    return profileFromCache;
                }
                else {
                    console.log(`User profile in LS does not match Keycloak token`);
                    localStorage.removeItem(TKIT_USER_PROFILE_LS);
                }
            }
            console.log(`load user profile from API`);
            return this.userProfileService.getCurrentUserFromBE().toPromise();
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update state`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`Keycloak auth init complete`);
            return true;
        })
            .catch(err => {
            console.log(`KC ERROR ${err} as json ${JSON.stringify(err)}`);
            throw err;
        });
    }
    init2() {
        console.log('kc init 4');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`);
        return (this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(ok => {
            console.log(`After KC init ${ok}`);
            return this.keycloakService.getToken();
        })
            .then(tokenString => {
            if (tokenString) {
                const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
                console.log('fetching profile');
                let profileFromCache;
                if ((profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS))) {
                    console.log(`load user profile from cache`);
                    //if we have already a profile in LS, check if it is the smae user
                    if (profileFromCache['email'] === parsedToken['email']) {
                        //same user, take from LS and load async to refresh
                        this.refreshProfile();
                        return JSON.parse(profileFromCache);
                    }
                    else {
                        console.log(`USer in LS does tno match. clear`);
                        localStorage.removeItem(TKIT_USER_PROFILE_LS);
                    }
                }
                console.log(`load user profile from API`);
                return this.userProfileService.getCurrentUserFromBE().toPromise();
            }
            else {
                console.log(`no TOKEN AAAAA`);
            }
        })
            // .then(ok => {
            //   // return Promise.all([
            //   //   this.keycloakService.loadUserProfile(),
            //   //   this.keycloakService.getToken(),
            //   //   this.userProfileService.getCurrentUserFromBE().toPromise()
            //   // ]);
            // })
            .catch(err => {
            console.log(`KC ERROR ${err}`);
            throw err;
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`KC init complete returnint`);
            return true;
        }));
    }
    setupEventListener() {
        this.keycloakService.keycloakEvents$.subscribe(ke => {
            // console.log(
            //   `KC Event ${ke.type} token: ${
            //     this.keycloakService.getKeycloakInstance().token
            //   }`
            // );
            // we are logged in, get tokens and store them in localstorage
            if (this.keycloakService.getKeycloakInstance().token) {
                localStorage.setItem(KC_TOKEN_LS, this.keycloakService.getKeycloakInstance().token);
            }
            else {
                localStorage.removeItem(KC_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().idToken) {
                localStorage.setItem(KC_ID_TOKEN_LS, this.keycloakService.getKeycloakInstance().idToken);
            }
            else {
                localStorage.removeItem(KC_ID_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().refreshToken) {
                localStorage.setItem(KC_REFRESH_TOKEN_LS, this.keycloakService.getKeycloakInstance().refreshToken);
            }
            else {
                localStorage.removeItem(KC_REFRESH_TOKEN_LS);
            }
            if (ke.type === KeycloakEventType.OnAuthLogout) {
                console.log('SSO logout nav to root');
                this.clearKCStateFromLocalstorage();
                this.router.navigateByUrl('/');
            }
        });
    }
    clearKCStateFromLocalstorage() {
        localStorage.removeItem(KC_ID_TOKEN_LS);
        localStorage.removeItem(KC_TOKEN_LS);
        localStorage.removeItem(KC_REFRESH_TOKEN_LS);
    }
    getSilentSSOUrl() {
        let currentBase = document.getElementsByTagName('base')[0].href;
        if (currentBase === '/') {
            currentBase = '';
        }
        return `${currentBase}/assets/silent-check-sso.html`;
    }
    hasRole(role) {
        if (typeof role === 'string') {
            const roleString = role;
            return this.user.roles.map(e => e.toUpperCase()).includes(roleString.toUpperCase());
        }
        else {
            return (this.user.roles
                .map(e => e.toUpperCase())
                .filter(item => role.map(e => e.toUpperCase()).includes(item.toUpperCase())).length > 0);
        }
    }
    getRoles() {
        return this.user.roles;
    }
    refreshProfile() {
        this.userProfileService.getCurrentUserFromBE().subscribe(profileData => {
            this.userProfile = profileData;
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(profileData));
            this.updateUserFromUserProfile(this.userProfile);
        });
    }
    loadFullProfile() {
        return this.userProfileService.getCurrentUser();
    }
    handleAvatarUpdate(avatarInfo) {
        if ((avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarImageUrl) && (avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarSmallImageUrl)) {
            this.avatarSubject.next({
                avatarImageUrl: 'portal-api' + avatarInfo.avatarImageUrl,
                avatarSmallImageUrl: 'portal-api' + avatarInfo.avatarSmallImageUrl
            });
        }
        else {
            this.avatarSubject.next(null);
        }
    }
    getAvatar() {
        return this.avatarSubject.asObservable();
    }
    updateUserFromUserProfile(userProfile) {
        this.user = {
            roles: userProfile.roles,
            userId: userProfile.id,
            principalId: userProfile.id,
            commonName: userProfile.person.displayName,
            userPerson: Object.assign({}, userProfile.person),
            functions: [],
        };
        if (this.userProfile.memberships) {
            this.userProfile.memberships.forEach(m => {
                m.roleMemberships.forEach(r => {
                    r.permissions.forEach(p => {
                        this.user.functions.push(p.key);
                    });
                });
            });
        }
    }
}
KeycloakAuthService.decorators = [
    { type: Injectable }
];
KeycloakAuthService.ctorParameters = () => [
    { type: KeycloakService },
    { type: ConfigurationService },
    { type: UserProfileService },
    { type: Router }
];

class AuthModule {
}
AuthModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule, KeycloakAngularModule],
                exports: [KeycloakAngularModule],
                providers: [
                    {
                        provide: AUTH_SERVICE,
                        useClass: KeycloakAuthService
                    }
                ]
            },] }
];

/**
 * 1000kit internal api
 * API for portal
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var PhoneType;
(function (PhoneType) {
    PhoneType["MOBILE"] = "MOBILE";
    PhoneType["LANDLINE"] = "LANDLINE";
})(PhoneType || (PhoneType = {}));

class BreadcrumbService {
    constructor() {
        this.itemsSource = new Subject();
        this.itemsHandler = this.itemsSource.asObservable();
    }
    setItems(items) {
        this.itemsSource.next(items);
    }
}
BreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(); }, token: BreadcrumbService, providedIn: "root" });
BreadcrumbService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
BreadcrumbService.ctorParameters = () => [];

class StateService {
    getUserSettingsActivatedTab() {
        return this.userSettingsActivatedTab;
    }
    setUserSettingsActivatedTab(tab) {
        this.userSettingsActivatedTab = tab;
    }
}
StateService.ɵprov = ɵɵdefineInjectable({ factory: function StateService_Factory() { return new StateService(); }, token: StateService, providedIn: "root" });
StateService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];

class ActionDirective {
    constructor(renderer, el, 
    // private templateRef: TemplateRef<any>,
    viewContainer, authService) {
        this.renderer = renderer;
        this.el = el;
        this.viewContainer = viewContainer;
        this.authService = authService;
    }
    ngOnInit() {
        console.log(`Action permission ${this.permission}`);
        if (!this.authService.hasPermission(this.permission)) {
            console.log(`Disable btn because no perm ${this.permission}`);
            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
            this.viewContainer.clear();
        }
    }
}
ActionDirective.decorators = [
    { type: Directive, args: [{ selector: '[tkAction]' },] }
];
ActionDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
ActionDirective.propDecorators = {
    permission: [{ type: Input }],
    loaderState: [{ type: Input }]
};

class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.openHelpPage = new EventEmitter();
        this.openHelpPageEditor = new EventEmitter();
    }
    ngOnInit() {
        this.subscription = this.breadcrumbService.itemsHandler.subscribe(response => {
            this.items = response;
        });
        this.home = { icon: 'pi pi-home', routerLink: '/' };
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    onOpenHelpPageEditor(evt) {
        this.openHelpPageEditor.emit(evt);
    }
    onOpenHelpPage(evt) {
        this.openHelpPage.emit(evt);
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-breadcrumb',
                template: "<div *ngIf=\"disableBreadcrumbs\" class=\"header-breadcrumb\">\n  <ul>\n    <li>\n      <a class=\"home-icon\" routerLink=\"\">\n        <i class=\"pi pi-home\"></i>\n      </a>\n    </li>\n    <li></li>\n    <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n      <li>\n        <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{ item.label }}</a>\n        <ng-container *ngIf=\"!item.routerLink\">{{ item.label }}</ng-container>\n      </li>\n      <li *ngIf=\"!last\">/</li>\n    </ng-template>\n    <li>\n      <tk-http-progress-loader class=\"p-ml-2\"></tk-http-progress-loader>\n    </li>\n  </ul>\n</div>\n<div *ngIf=\"!disableBreadcrumbs\" class=\"layout-breadcrumb-container p-d-flex p-jc-between p-ai-center p-shadow-1\">\n  <p-breadcrumb [home]=\"home\" [model]=\"items\" styleClass=\"layout-breadcrumb p-pl-4 p-py-2\"></p-breadcrumb>\n  <div *ngIf=\"fullPortalLayout\" class=\"layout-breadcrumb-buttons p-d-flex p-ai-center p-pr-3\">\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n      (click)=\"onOpenHelpPage($event)\"\n      icon=\"pi pi-question-circle\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n      (click)=\"onOpenHelpPageEditor($event)\"\n      icon=\"pi pi-pencil\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n  </div>\n</div>\n",
                styles: [".home-icon{margin-right:.3em}.home-icon i{font-size:28px}.header-breadcrumb{display:flex;flex-direction:row;font-size:large}.header-breadcrumb a i{vertical-align:middle;color:#fff}.header-breadcrumb ul{padding:0;list-style:none;display:inline-block}.header-breadcrumb ul li{display:inline-block;color:#fff;vertical-align:middle}.header-breadcrumb ul li:nth-child(2n){font-size:20px}"]
            },] }
];
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService }
];
BreadcrumbComponent.propDecorators = {
    disableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    openHelpPage: [{ type: Output }],
    openHelpPageEditor: [{ type: Output }]
};

class CollapsibleDirective {
    constructor(el) {
        this.el = el;
        this.isCollapsed = true;
        this.collapsed = new EventEmitter();
        this.expanded = new EventEmitter();
        console.log(`collapsible directive constructor ${el.nativeElement.classList}`);
        el.nativeElement.classList.add("collapsible");
    }
    toggle() {
        this.isCollapsed ? this.show() : this.hide();
    }
    show() {
        this.isCollapsed = false;
    }
    hide() {
        this.isCollapsed = true;
    }
}
CollapsibleDirective.decorators = [
    { type: Directive, args: [{
                selector: "[tkCollapsible]"
            },] }
];
CollapsibleDirective.ctorParameters = () => [
    { type: ElementRef }
];
CollapsibleDirective.propDecorators = {
    isCollapsed: [{ type: Input }],
    collapsed: [{ type: Output }],
    expanded: [{ type: Output }]
};

class AppFooterComponent {
}
AppFooterComponent.decorators = [
    { type: Component, args: [{
                selector: "tk-footer",
                template: `
    <div 
      class="footer"
      id="footer"
      role="contentinfo"
    >
      <span class="footer-left-segment">
        <a
          *ngIf="homePortal.homePage; else withoutHref"
          [href]="homePortal.homePage"
        >
          {{ homePortal.footerLabel }}
        </a>
        <ng-template #withoutHref>
          <a>
            {{ homePortal.footerLabel }}
          </a>
        </ng-template>
        -
        <span>&copy; All Rights Reserved</span>
      </span>
      <div class="footer-right-segment">
        <span class="links" *ngFor="let link of homePortal.subjectLinks">
          <a [href]="link.url">{{ link.label }}</a>
        </span>
      </div>
    </div>
  `,
                styles: [`
      .footer span {
        vertical-align: middle;
      }
      .footer-right-segment a {
        margin-left: 5px;
        margin-right: 5px;
      }
      .footer-right-segment {
        margin-right: 10px;
        float: right;
      }
      .footer-left-segment {
        margin-left: 15px;
        float: left;
      }
      .footer-left-segment a {
        color: #000000;
      }
    `]
            },] }
];
AppFooterComponent.propDecorators = {
    homePortal: [{ type: Input }]
};

class HelpEditDialogComponent {
    constructor() {
        this.display = false;
        this.closed = new EventEmitter();
    }
    ngOnInit() { }
    save() {
        this.closed.emit(true);
    }
    close(event) {
        this.closed.emit(false);
    }
}
HelpEditDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-help-editor',
                template: `
    <p-dialog
      header="Edit help item for this page"
      [contentStyle]="{ overflow: 'visible' }"
      [style]="{ width: '500px', 'max-height': '400px' }"
      [(visible)]="display"
      (onHide)="close($event)"
    >
      <div class="modal-content">
        <form class="p-grid p-fluid">
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="page"
                type="text"
                pInputText
                name="page"
                disabled="true"
                [(ngModel)]="helpItem.helpItemId"
              />
              <label for="page">Page Item</label>
            </span>
          </div>
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="baseUrl"
                type="text"
                pInputText
                name="baseUrl"
                [(ngModel)]="helpItem.baseUrl"
              />
              <label for="baseUrl">Base Url</label>
            </span>
          </div>
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="relUrl"
                type="text"
                pInputText
                name="relUrl"
                [(ngModel)]="helpItem.resourceUrl"
              />
              <label for="relUrl">Relative Url</label>
            </span>
          </div>
        </form>
      </div>
      <p-footer>
        <button
          pButton
          class="primary"
          value="Save"
          label="Save"
          icon="pi pi-check"
          (click)="save()"
        ></button>
        <button
          pButton
          icon="pi pi-times"
          class="flat"
          value="Cancel"
          label="Cancel"
          (click)="display = false"
        ></button>
      </p-footer>
    </p-dialog>
  `
            },] }
];
HelpEditDialogComponent.ctorParameters = () => [];
HelpEditDialogComponent.propDecorators = {
    display: [{ type: Input }],
    helpItem: [{ type: Input }],
    closed: [{ type: Output }]
};

class HttpProgressLoaderService {
    constructor() {
        this.isLoading = new BehaviorSubject(false);
    }
}
HttpProgressLoaderService.ɵprov = ɵɵdefineInjectable({ factory: function HttpProgressLoaderService_Factory() { return new HttpProgressLoaderService(); }, token: HttpProgressLoaderService, providedIn: "root" });
HttpProgressLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
HttpProgressLoaderService.ctorParameters = () => [];

class HttpProgressLoaderComponent {
    constructor(loaderService) {
        this.loaderService = loaderService;
        this.loaderService.isLoading.subscribe(v => {
            this.loading = v;
        });
    }
    ngOnInit() { }
}
HttpProgressLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-http-progress-loader',
                template: `
    <div class="wrapper" [ngClass]="{ noshow: !loading }">
      <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <circle cx="50" cy="50" r="45" />
      </svg>
    </div>
  `,
                styles: [`
      :host {
        display: block;
        height: 36px;
      }
      .wrapper {
        position: absolute;
        opacity: 1;
      }
      .wrapper.noshow {
        -webkit-transition: opacity 1s linear;
        -moz-transition: opacity 1s linear;
        -o-transition: opacity 1s linear;
        transition: opacity 1s linear;
        opacity: 0;
      }
      svg {
        animation: 2s linear infinite svg-animation;
        width: 36px;
      }

      .noshow svg {
        animation: none;
      }

      @keyframes svg-animation {
        0% {
          transform: rotateZ(0deg);
        }
        100% {
          transform: rotateZ(360deg);
        }
      }

      circle {
        animation: 1.4s ease-in-out infinite both circle-animation;
        display: block;
        fill: transparent;
        stroke: #ffffff;
        stroke-linecap: round;
        stroke-dasharray: 283;
        stroke-dashoffset: 280;
        stroke-width: 10px;
        transform-origin: 50% 50%;
      }

      @keyframes circle-animation {
        0%,
        25% {
          stroke-dashoffset: 280;
          transform: rotate(0);
        }

        50%,
        75% {
          stroke-dashoffset: 75;
          transform: rotate(45deg);
        }

        100% {
          stroke-dashoffset: 280;
          transform: rotate(360deg);
        }
      }
    `]
            },] }
];
HttpProgressLoaderComponent.ctorParameters = () => [
    { type: HttpProgressLoaderService }
];

class AppInlineProfileComponent {
    constructor(authService, router, configService) {
        this.authService = authService;
        this.router = router;
        this.configService = configService;
        this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
        this.inlineMenuClick = new EventEmitter();
    }
    get displayName() {
        var _a;
        const person = (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.person;
        if (person === null || person === void 0 ? void 0 : person.displayName) {
            return person.displayName;
        }
        else if ((person === null || person === void 0 ? void 0 : person.firstName) && person.lastName) {
            return person.firstName + ' ' + person.lastName;
        }
        else {
            return this.authService.currentUser().userId;
        }
    }
    get baseUrl() {
        return this.configService.getPortalData().baseUrl;
    }
    get tabIndex() {
        return !this.inlineMenuActive ? '-1' : null;
    }
    ngOnInit() {
        this.userProfile = this.authService.currentUser();
        this.authService
            .getAvatar()
            .subscribe(avatar => (this.userAvatar = avatar));
    }
    onClick(event) {
        this.inlineMenuClick.emit(null);
        event.preventDefault();
    }
    logout(event) {
        event.preventDefault();
        this.authService.logout();
    }
}
AppInlineProfileComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-inline-profile',
                template: "<div [ngClass]=\"{'layout-inline-menu': true, 'layout-inline-menu-active': inlineMenuActive}\">\n  <a class=\"layout-inline-menu-action p-d-flex p-dir-row p-ai-center p-p-3\" (click)=\"onClick($event)\">\n    <img [src]=\"userAvatar?.avatarSmallImageUrl || defaultAvatarUrl\" alt=\"avatar\" class=\"profile-image\" />\n    <span class=\"p-d-flex p-flex-column p-ml-2\">\n      <span class=\"p-text-bold\">{{ displayName }}</span>\n      <small>Portal User</small>\n    </span>\n    <i class=\"layout-inline-menu-icon pi pi-angle-down p-ml-auto\"></i>\n  </a>\n\n  <ul class=\"layout-inline-menu-action-panel\" [@menu]=\"inlineMenuActive ? 'visibleAnimated' : 'hiddenAnimated'\">\n    <li *tkIfPerm=\"'PROFILE#VIEW'\" class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/profile'\"\n        title=\"Manage your personal information and avatar\"\n      >\n        <i class=\"pi pi-user pi-fw\"></i>\n        <span>My Personal Info</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/settings'\"\n        title=\"Manage your preferences and settings\"\n      >\n        <i class=\"pi pi-cog pi-fw\"></i>\n        <span>My Settings</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/change-password'\"\n        title=\"Change your current password\"\n      >\n        <i class=\"pi pi-key pi-fw\"></i>\n        <span>Change Password</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/roles-and-perms'\"\n        title=\"Overview of your application roles and permissions\"\n      >\n        <i class=\"pi pi-unlock pi-fw\"></i>\n        <span>My Roles & Permissions</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a class=\"p-d-flex p-flex-row p-ai-center\" [attr.tabindex]=\"tabIndex\" href=\"#\" (click)=\"logout($event)\">\n        <i class=\"pi pi-power-off pi-fw\"></i>\n        <span>Logout</span>\n      </a>\n    </li>\n  </ul>\n</div>\n",
                animations: [
                    trigger('menu', [
                        state('hiddenAnimated', style({
                            height: '0px',
                            paddingBottom: '0px',
                            overflow: 'hidden'
                        })),
                        state('visibleAnimated', style({
                            height: '*',
                            overflow: 'visible'
                        })),
                        state('visible', style({
                            opacity: 1,
                            'z-index': 100
                        })),
                        state('hidden', style({
                            opacity: 0,
                            'z-index': '*'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('visible => hidden', animate('.1s linear')),
                        transition('hidden => visible', [style({ transform: 'scaleY(0.8)' }), animate('.12s cubic-bezier(0, 0, 0.2, 1)')])
                    ])
                ],
                styles: ["@-webkit-keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}@keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}.profile-content{-webkit-animation:opacityFadeIn .2s linear 0s 1;animation:opacityFadeIn .2s linear 0s 1}.profile-image{border-radius:50%;width:32px;height:32px}"]
            },] }
];
AppInlineProfileComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: Router },
    { type: ConfigurationService }
];
AppInlineProfileComponent.propDecorators = {
    inlineMenuActive: [{ type: Input }],
    inlineMenuClick: [{ type: Output }]
};

class LoadingComponent {
    constructor() { }
    ngOnInit() { }
}
LoadingComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-loading',
                template: "<div class=\"loading-panel\">\r\n  <span class=\"loader loader--style8\" title=\"7\">\r\n    <svg\r\n      version=\"1.1\"\r\n      id=\"Layer_1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      width=\"24px\"\r\n      height=\"30px\"\r\n      viewBox=\"0 0 24 30\"\r\n      style=\"enable-background:new 0 0 50 50;\"\r\n      xml:space=\"preserve\"\r\n    >\r\n      <rect\r\n        x=\"0\"\r\n        y=\"5.25098\"\r\n        width=\"4\"\r\n        height=\"19.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"8\"\r\n        y=\"7.75098\"\r\n        width=\"4\"\r\n        height=\"14.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"16\"\r\n        y=\"9.74902\"\r\n        width=\"4\"\r\n        height=\"10.502\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n    </svg>\r\n  </span>\r\n  <p>Loading...</p>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".loading-panel{padding:1em}"]
            },] }
];
LoadingComponent.ctorParameters = () => [];

class NoHelpInfoComponent {
    constructor(config, ref) {
        this.config = config;
        this.ref = ref;
        this.pageId = config.data.pageItem;
    }
    ngOnInit() { }
    close() {
        this.ref.close();
    }
}
NoHelpInfoComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div>
      <div class="dialog-content">
        <span
          >No help was found for this item. Please ask your system administrator
          to add it. The context ID for this page is below:</span
        >
        <span class="code p-my-2">{{ pageId }}</span>
      </div>
      <div class="dialog-footer">
        <div class="p-col p-fluid">
          <button
            type="button"
            pButton
            label="Close"
            (click)="close()"
          ></button>
        </div>
      </div>
    </div>
  `,
                styles: [`
      .code {
        display: block;
        clear: both;
        padding: 0.5em;
        font-family: monospace;
        background-color: #ececec;
        border-radius: 4px;
      }
    `]
            },] }
];
NoHelpInfoComponent.ctorParameters = () => [
    { type: DynamicDialogConfig },
    { type: DynamicDialogRef }
];

class PanelHeaderComponent {
    constructor() { }
    ngOnInit() { }
}
PanelHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-panel-header',
                template: `
    <div class="panel-header">
      <div class="panel-toolbar-left">
        <ng-container
          *ngTemplateOutlet="leftToolbar ? leftToolbar : defaultLeftToolbar"
        ></ng-container>
      </div>
      <h1 class="panel-heading">{{ header }}</h1>
      <div class="panel-toolbar-right">
        <ng-container
          *ngTemplateOutlet="rightToolbar ? rightToolbar : defaultRightToolbar"
        ></ng-container>
      </div>
    </div>

    <ng-template #defaultLeftToolbar> </ng-template>
    <ng-template #defaultRightToolbar> </ng-template>
  `,
                styles: [`
      .panel-header {
        display: flex;
      }
      .panel-heading {
        margin: 0px;
        line-height: 30px;
        font-weight: 100;
      }
      .panel-toolbar-right {
        margin-left: auto;
      }
      .panel-toolbar-left,
      .panel-toolbar-right {
        display: flex;
      }
    `]
            },] }
];
PanelHeaderComponent.ctorParameters = () => [];
PanelHeaderComponent.propDecorators = {
    header: [{ type: Input }],
    leftToolbar: [{ type: Input }],
    rightToolbar: [{ type: Input }]
};

class HeaderComponent {
    constructor(authService, config, stateService, router) {
        this.authService = authService;
        this.config = config;
        this.stateService = stateService;
        this.router = router;
        this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
        this.menuButtonClick = new EventEmitter();
        this.topbarItemClick = new EventEmitter();
        this.openHelpPage = new EventEmitter();
        this.openHelpPageEditor = new EventEmitter();
        this.openFeedback = new EventEmitter();
        this.openAddToLaunchpad = new EventEmitter();
        this.openSupportTicket = new EventEmitter();
        this.searchClick = new EventEmitter();
        this.homeNavUrl = '/';
        this.homeNavTitle = 'Home';
    }
    ngOnInit() {
        this.userProfile = this.authService.currentUser();
        this.userAvatar = this.authService.getAvatar();
        this.userDisplayName = this.authService.currentUser().person.displayName;
        this.searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
    }
    clickMenu() {
        console.log('Menu click');
        this.menuExpanded = !this.menuExpanded;
    }
    navigateTo(path, event) {
        event.preventDefault();
        path = this.config.getPortalData().baseUrl + path;
        location.assign(path);
    }
    logout(event) {
        event.preventDefault();
        this.authService.logout();
    }
    onMenuButtonClick(e) {
        this.menuButtonClick.emit(e);
    }
    onTopbarItemClick(e, arg) {
        this.topbarItemClick.emit({ event: e, arg });
    }
    onOpenHelpPageEditor(e) {
        this.openHelpPageEditor.emit(e);
    }
    onOpenHelpPage(e) {
        this.openHelpPage.emit(e);
    }
    onOpenFeedback(e) {
        this.openFeedback.emit(e);
    }
    onAddToFavourites(e) {
        this.openAddToLaunchpad.emit(e);
    }
    onOpenSupportTicket(e) {
        this.openSupportTicket.emit(e);
    }
    onTopbarMobileButtonClick($event) {
        this.mobileTopbarActive = !this.mobileTopbarActive;
        $event.preventDefault();
    }
    onSearchClick(e, val) {
        this.searchClick.emit({ event: e, val });
    }
}
HeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-header',
                template: "<div class=\"layout-topbar p-shadow-4\" id=\"header\" role=\"banner\">\n  <div class=\"layout-topbar-left\">\n    <a class=\"layout-topbar-logo\" [href]=\"homeNavUrl\" [title]=\"homeNavTitle\">\n      <div class=\"logo\"></div>\n    </a>\n\n    <a *ngIf=\"fullPortalLayout\" class=\"layout-menu-button p-shadow-6\" (click)=\"onMenuButtonClick($event)\" pRipple [title]=\"menuButtonTitle\">\n      <i class=\"pi pi-chevron-right\"></i>\n    </a>\n\n    <a class=\"layout-topbar-mobile-button\" (click)=\"onTopbarMobileButtonClick($event)\" pRipple>\n      <i class=\"pi pi-ellipsis-v fs-large\"></i>\n    </a>\n  </div>\n\n  <div class=\"layout-topbar-right\" [ngClass]=\"{'layout-topbar-mobile-active': mobileTopbarActive}\">\n    <div class=\"layout-topbar-actions-left\">\n      <tk-breadcrumb\n        *ngIf=\"disableBreadcrumbs\"\n        [disableBreadcrumbs]=\"disableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        (openHelpPage)=\"onOpenHelpPage($event)\"\n        (openHelpPageEditor)=\"onOpenHelpPageEditor($event)\"\n      ></tk-breadcrumb>\n    </div>\n    <div class=\"layout-topbar-actions-right\" *ngIf=\"fullPortalLayout\">\n      <ul class=\"layout-topbar-items\">\n        <li class=\"layout-topbar-item\">\n          <a class=\"layout-topbar-action rounded-circle\" href=\"#\" title=\"Feedback\" (click)=\"onOpenFeedback($event)\">\n            <i class=\"pi pi-star-o fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Add to Favourites\"\n            (click)=\"onAddToFavourites($event)\"\n          >\n            <i class=\"pi pi-heart fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Support Ticket\"\n            (click)=\"onOpenSupportTicket($event)\"\n          >\n            <i class=\"pi pi-ticket fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item layout-search-item\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'search')\" pRipple>\n            <i class=\"pi pi-search fs-large\"></i>\n          </a>\n\n          <div class=\"layout-search-panel p-inputgroup\" [@topbarActionPanelAnimation]=\"'visible'\" *ngIf=\"search\">\n            <span class=\"p-inputgroup-addon\"><i class=\"pi pi-search\"></i></span>\n            <tk-search-bar (searchClick)=\"onSearchClick($event.event, $event.val)\"></tk-search-bar>\n            <span class=\"p-inputgroup-addon\">\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                icon=\"pi pi-times\"\n                class=\"p-button-rounded p-button-text p-button-plain\"\n                (click)=\"onSearchClick($event, false)\"\n              ></button>\n            </span>\n          </div>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n            (click)=\"onOpenHelpPage($event)\"\n          >\n            <i class=\"pi pi-question-circle fs-large\"></i>\n          </a>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n            (click)=\"onOpenHelpPageEditor($event)\"\n          >\n            <i class=\"pi pi-pencil fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item notifications\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'notifications')\" pRipple>\n            <i class=\"pi pi-bell fs-large\"></i>\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'notifications'\"\n          >\n            <li class=\"p-mb-3\">\n              <span class=\"p-px-3 fs-small\">Not implemented.</span>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <div class=\"p-d-flex p-flex-row p-ai-center\">\n                <p class=\"avatar-monogram\">MM</p>\n                <div class=\"p-d-flex p-flex-column p-ml-3\" style=\"flex-grow: 1;\">\n                  <div class=\"p-d-flex p-ai-center p-jc-between p-mb-1\">\n                    <span class=\"fs-small p-text-bold\">John Doe</span>\n                    <small>42 mins ago</small>\n                  </div>\n                  <span class=\"fs-small\">Notification example.</span>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action p-d-flex p-dir-row p-jc-center p-ai-center p-px-2 rounded-circle\"\n            pRipple\n            (click)=\"onTopbarItemClick($event, 'profile')\"\n          >\n            <img\n              [src]=\"(userAvatar | async)?.avatarSmallImageUrl || defaultAvatarUrl\"\n              alt=\"avatar\"\n              class=\"profile-image\"\n            />\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'profile'\"\n          >\n            <li class=\"layout-topbar-action-item\" *tkIfPerm=\"'PROFILE#VIEW'\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/profile', $event)\"\n                title=\"Manage your personal information and avatar\"\n              >\n                <i class=\"p-mr-2 pi pi-user\"></i>\n                <span>My Personal Info</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/settings', $event)\"\n                title=\"Manage your preferences and settings\"\n              >\n                <i class=\"p-mr-2 pi pi-cog\"></i>\n                <span>My Settings</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/change-password', $event)\"\n                title=\"Change your current password\"\n              >\n                <i class=\"p-mr-2 pi pi-key\"></i>\n                <span>Change Password</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/roles-and-perms', $event)\"\n                title=\"Overview of your application roles and permissions\"\n              >\n                <i class=\"p-mr-2 pi pi-unlock\"></i>\n                <span>My Roles & Permissions</span>\n              </a>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <a class=\"p-d-flex p-flex-row p-ai-center\" pRipple href=\"#\" (click)=\"logout($event)\">\n                <i class=\"p-mr-2 pi pi-power-off\"></i>\n                <span>Logout</span>\n              </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n",
                animations: [
                    trigger('topbarActionPanelAnimation', [
                        transition(':enter', [
                            style({ opacity: 0, transform: 'scaleY(0.8)' }),
                            animate('.12s cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 1, transform: '*' })),
                        ]),
                        transition(':leave', [animate('.1s linear', style({ opacity: 0 }))]),
                    ]),
                ],
                styles: [".avatar-monogram{margin:0;line-height:32px;background-color:#1e90ff;text-align:center;padding-top:1px;color:#fff}.avatar-monogram,.profile-image{width:32px;height:32px;border-radius:50%}.http-progress-loader{margin-left:8px;padding-top:5px}@media screen and (max-width:1024px){.http-progress-loader{margin-left:0;margin-right:8px}}"]
            },] }
];
HeaderComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: ConfigurationService },
    { type: StateService },
    { type: Router }
];
HeaderComponent.propDecorators = {
    searchInputViewChild: [{ type: ViewChild, args: ['searchInput',] }],
    menuButtonTitle: [{ type: Input }],
    menuButtonClick: [{ type: Output }],
    topbarItemClick: [{ type: Output }],
    openHelpPage: [{ type: Output }],
    openHelpPageEditor: [{ type: Output }],
    openFeedback: [{ type: Output }],
    openAddToLaunchpad: [{ type: Output }],
    openSupportTicket: [{ type: Output }],
    searchClick: [{ type: Output }],
    profileMode: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    activeTopbarItem: [{ type: Input }],
    disableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    search: [{ type: Input }],
    homeNavUrl: [{ type: Input }],
    homeNavTitle: [{ type: Input }]
};

class MenuService {
    constructor() {
        this.menuSource = new Subject();
        this.resetSource = new Subject();
        this.menuSource$ = this.menuSource.asObservable();
        this.resetSource$ = this.resetSource.asObservable();
    }
    onMenuStateChange(key) {
        this.menuSource.next(key);
    }
    reset() {
        this.resetSource.next();
    }
}
MenuService.ɵprov = ɵɵdefineInjectable({ factory: function MenuService_Factory() { return new MenuService(); }, token: MenuService, providedIn: "root" });
MenuService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];

class AppMenuComponent {
    constructor() {
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
    }
    set portalMenu(items) {
        this.menuWithRoot = {
            label: 'Menu',
            icon: 'list',
            items: items
        };
    }
}
AppMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-menu',
                template: "<ul class=\"layout-menu\" id=\"nav\" role=\"navigation\">\n  <li\n    tk-submenu\n    [item]=\"menuWithRoot\"\n    [index]=\"0\"\n    root=\"true\"\n    visible=\"true\"\n    [(menuActive)]=\"menuActive\"\n    [(mobileMenuActive)]=\"mobileMenuActive\"\n    [isStatic]=\"isStatic\"\n    [isSlim]=\"isSlim\"\n    [isHorizontal]=\"isHorizontal\"\n    [isMobile]=\"isMobile\"\n    [isDesktop]=\"isDesktop\"\n    [menuHoverActive]=\"menuHoverActive\"\n  ></li>\n</ul>\n"
            },] }
];
AppMenuComponent.ctorParameters = () => [];
AppMenuComponent.propDecorators = {
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    portalMenu: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};
class AppSubMenuComponent {
    constructor(menuService, router) {
        this.menuService = menuService;
        this.router = router;
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
        this.active = false;
    }
    ngOnInit() {
        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {
            // deactivate current active menu
            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {
                this.active = false;
            }
        });
        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {
            this.active = false;
        });
        // TODO Ultima11: Verify if this logic works with our setup
        this.router.events.pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(params => {
            if (this.isSlim) {
                this.active = false;
            }
            else {
                if (this.item.routerLink) {
                    this.updateActiveStateFromRoute();
                }
                else {
                    this.active = false;
                }
            }
        });
        if ((this.isHorizontal || this.isSlim) && this.item.routerLink) {
            this.updateActiveStateFromRoute();
        }
        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);
    }
    ngOnDestroy() {
        if (this.menuSourceSubscription) {
            this.menuSourceSubscription.unsubscribe();
        }
        if (this.menuResetSubscription) {
            this.menuResetSubscription.unsubscribe();
        }
    }
    updateActiveStateFromRoute() {
        this.active = this.router.isActive(this.item.routerLink[0], !this.item.items);
    }
    itemClick(event) {
        // avoid processing disabled items
        if (this.item.disabled) {
            event.preventDefault();
            return true;
        }
        this.menuService.onMenuStateChange(this.key);
        // execute command
        if (this.item.command) {
            this.item.command({ originalEvent: event, item: this.item });
        }
        if (this.item.items) {
            this.active = !this.active;
        }
        else {
            this.active = true;
            if (this.isHorizontal || this.isSlim) {
                this.menuService.reset();
                this.menuHoverActive = false;
            }
            if (!this.isStatic) {
                this.menuActiveChange.emit(false);
            }
            this.mobileMenuActiveChange.emit(false);
        }
        // prevent hash change
        if (this.item.items || (!this.item.url && !this.item.routerLink)) {
            // TODO https://github.com/primefaces/primeng/issues/8751
            // setTimeout(() => {
            //   this.app.layoutMenuScrollerViewChild.moveBar();
            // }, 450);
            event.preventDefault();
        }
    }
    onMouseEnter() {
        if (this.root &&
            this.menuHoverActive &&
            (this.isHorizontal || this.isSlim) &&
            this.isDesktop) {
            this.menuService.onMenuStateChange(this.key);
            this.active = true;
        }
    }
}
AppSubMenuComponent.decorators = [
    { type: Component, args: [{
                /* eslint-disable @angular-eslint/component-selector */
                selector: '[tk-submenu]',
                /* eslint-enable @angular-eslint/component-selector */
                template: `
    <ng-container>
        <div *ngIf="root">
          <span class="layout-menuitem-text">{{item.label}}</span>
        </div>
        <a [attr.href]="item.url" (click)="itemClick($event)" *ngIf="!item.routerLink || item.items" (keydown.enter)="itemClick($event)"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <a (click)="itemClick($event)" *ngIf="item.routerLink && !item.items"
           [routerLink]="item.routerLink" routerLinkActive="active-menuitem-routerlink" [routerLinkActiveOptions]="{exact: true}"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <ul *ngIf="(item.items && root) || (item.items && active)" [@children]="root ? 'visible' : active ? 'visibleAnimated' : 'hiddenAnimated'">
          <ng-template ngFor let-child let-i="index" [ngForOf]="item.items">
            <li tk-submenu [item]="child" [index]="i" [parentKey]="key"></li>
          </ng-template>
        </ul>
    </ng-container>
  `,
                host: {
                    '[class.layout-root-menuitem]': 'root || active',
                    '[class.active-menuitem]': '(active)'
                },
                animations: [
                    trigger('children', [
                        state('void', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('hiddenAnimated', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            height: '*'
                        })),
                        state('hidden', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            },] }
];
AppSubMenuComponent.ctorParameters = () => [
    { type: MenuService },
    { type: Router }
];
AppSubMenuComponent.propDecorators = {
    item: [{ type: Input }],
    root: [{ type: Input }],
    visible: [{ type: Input }],
    index: [{ type: Input }],
    parentKey: [{ type: Input }],
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};

class PortalPageComponent {
    constructor(injectorObj) {
        this.injectorObj = injectorObj;
        this.collapsed = false;
        this.authService = this.injectorObj.get(AUTH_SERVICE);
    }
    ngOnInit() { }
    doSomething() {
        alert('Hey it worked!');
    }
    hasAccess() {
        return this.permission
            ? this.authService.hasPermission(this.permission)
            : true;
    }
    collapse() {
        this.collapsible2.nativeElement.classList.add('hidden');
        this.collapsed = true;
    }
    expand() {
        this.collapsible2.nativeElement.classList.remove('hidden');
        this.collapsed = false;
    }
}
PortalPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-portal-page',
                template: "<div role=\"main\">\n  <div class=\"p-col-12 content-wrapper\">\n    <!--criteria-->\n    <div\n      class=\"card card-w-title no-margin pt-0\"\n      [ngClass]=\"{ collapsed: collapsed }\"\n    >\n      <ng-container *ngIf=\"hasAccess(); else noAccess\">\n        <tk-panel-header\n          [leftToolbar]=\"leftToolbar\"\n          [rightToolbar]=\"pageToolbarRight\"\n        ></tk-panel-header>\n        <div class=\"page-content\">\n          <ng-content></ng-content>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n\n<ng-template #noAccess>\n  <h3>Unauthorized</h3>\n  <p>\n    Sorry, you do not have the permission required to view this page.\n    <span\n      pTooltip=\"Missing permission key: '{{ permission }}''\"\n      tooltipEvent=\"hover\"\n      hideDelay=\"500\"\n      >More info</span\n    >\n  </p>\n</ng-template>\n",
                styles: ["::ng-deep .collapsed .collapse-toggle i{transform:rotate(180deg)}:host ::ng-deep child.collapsible{transition:all .4s ease;background-color:initial;transform:scale(1);max-height:1000px;height:auto}:host ::ng-deep child.collapsible.hidden{max-height:0;opacity:0;background-color:#cecece;transform:scale3d(.5,.5,.5);margin:0}@media only screen and (max-width:430px){.card.card-w-title.no-margin.pt-0{padding-left:.25em;padding-right:.25em}}"]
            },] }
];
PortalPageComponent.ctorParameters = () => [
    { type: Injector }
];
PortalPageComponent.propDecorators = {
    header: [{ type: Input }],
    permission: [{ type: Input }],
    helpArticleId: [{ type: Input }],
    leftToolbar: [{ type: Input }],
    rightToolbar: [{ type: Input }],
    collapsible2: [{ type: ContentChild, args: [CollapsibleDirective, { read: ElementRef },] }]
};

class SearchTemplateAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.baseUrl = './portal-api/v1/searchTemplates';
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                Accept: 'application/json'
            })
        };
    }
    getSearchTemplatesLegacy(user, application, page, includeGlobal = true) {
        return this.httpClient.post(`${this.baseUrl}/search/criteria`, {
            application,
            page,
            user,
            includeGlobal
        }, this.httpOptions);
    }
    getTemplateById(id) {
        return this.httpClient.get(`${this.baseUrl}/${id}`, this.httpOptions);
    }
    createNewTemplate(template) {
        return this.httpClient.post(`${this.baseUrl}`, template, this.httpOptions);
    }
    updateTemplate(id, template) {
        return this.httpClient.put(`${this.baseUrl}/${id}`, template, this.httpOptions);
    }
    deleteTemplate(id) {
        return this.httpClient.delete(`${this.baseUrl}/${id}`);
    }
}
SearchTemplateAPIService.ɵprov = ɵɵdefineInjectable({ factory: function SearchTemplateAPIService_Factory() { return new SearchTemplateAPIService(ɵɵinject(HttpClient)); }, token: SearchTemplateAPIService, providedIn: "root" });
SearchTemplateAPIService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
SearchTemplateAPIService.ctorParameters = () => [
    { type: HttpClient }
];

const baseUrl = './ahm-api/internal/applications';
class HelpPageAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        };
    }
    getHelpDataItem(appId, helpItemId, type = 'PAGE') {
        return this.httpClient
            .get(`${baseUrl}/${appId}/helpItems`, {
            params: {
                helpItemId
            }
        })
            .pipe(map(helpItems => helpItems[0]));
    }
    getHelpDataItemLegacy(appId, context, type = 'PAGE') {
        console.log(`About to go to ${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`);
        return this.httpClient.post(`${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`, `"${type}"`, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            }
        });
    }
    saveHelpPage(appId, helpItem) {
        if (helpItem.id) {
            return this.httpClient.patch(`${baseUrl}/${appId}/helpItems/${helpItem.id}`, helpItem, {
                observe: 'response'
            });
        }
        else {
            return this.httpClient.post(`${baseUrl}/${appId}/helpItems`, helpItem, {
                observe: 'response'
            });
        }
    }
    saveHelpPageLegacy(helpItem) {
        return this.httpClient.post(`${baseUrl}/helpdata`, helpItem, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            },
            observe: 'response'
        });
    }
}
HelpPageAPIService.ɵprov = ɵɵdefineInjectable({ factory: function HelpPageAPIService_Factory() { return new HelpPageAPIService(ɵɵinject(HttpClient)); }, token: HelpPageAPIService, providedIn: "root" });
HelpPageAPIService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
HelpPageAPIService.ctorParameters = () => [
    { type: HttpClient }
];

function isTkitPage(object) {
    return 'helpArticleId' in object;
}

const defaultThemeServerUrl = 'http://portal-theme-management:8080';
class ThemeService {
    constructor(configservice) {
        this.configservice = configservice;
        this.themeServerUrl =
            this.configservice.getProperty('TKIT_PORTAL_THEME_SERVER_URL') ||
                defaultThemeServerUrl;
    }
    getThemeHref(theme) {
        return `${this.themeServerUrl}/themes/${theme}/${theme}.min.css`;
    }
}
ThemeService.ɵprov = ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(ɵɵinject(ConfigurationService)); }, token: ThemeService, providedIn: "root" });
ThemeService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ThemeService.ctorParameters = () => [
    { type: ConfigurationService }
];

class MenuApiService {
    constructor(http, messageService) {
        this.http = http;
        this.messageService = messageService;
        this.menuUrl = './portal-api/legacy/menustructure'; // URL to web api
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
        };
    }
    getMenuItems(portalId) {
        return this.http
            .get(`${this.menuUrl}/${portalId}`, withCache())
            .pipe(catchError(this.handleError('getMenuItems', [])));
    }
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    handleError(operation = 'operation', result) {
        return (error) => {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            this.log(`${operation} failed: ${error.message}, will return ${JSON.stringify(result)}`);
            // Let the app keep running by returning an empty result.
            return of(result);
        };
    }
    /** Log a HeroService message with the MessageService */
    log(message) {
        console.log(message);
    }
}
MenuApiService.ɵprov = ɵɵdefineInjectable({ factory: function MenuApiService_Factory() { return new MenuApiService(ɵɵinject(HttpClient), ɵɵinject(MessageService)); }, token: MenuApiService, providedIn: "root" });
MenuApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MenuApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: MessageService }
];

class FeedbackApiService {
    constructor(http) {
        this.http = http;
        this.url = './portal-api/v1/feedback/send';
    }
    sendFeedback(feedback) {
        return this.http.post(this.url, feedback);
    }
}
FeedbackApiService.ɵprov = ɵɵdefineInjectable({ factory: function FeedbackApiService_Factory() { return new FeedbackApiService(ɵɵinject(HttpClient)); }, token: FeedbackApiService, providedIn: "root" });
FeedbackApiService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
FeedbackApiService.ctorParameters = () => [
    { type: HttpClient }
];

class SupportTicketApiService {
    constructor(http) {
        this.http = http;
        this.baseUrl = './portal-api/v1/supportTicket/send';
    }
    createSupportTicket(ticket, appId) {
        const request = {
            processId: ticket.title,
            processStep: ticket.description,
            source: appId,
            sourceDeepLink: window.location.href
        };
        return this.http.post(this.baseUrl, request);
    }
}
SupportTicketApiService.ɵprov = ɵɵdefineInjectable({ factory: function SupportTicketApiService_Factory() { return new SupportTicketApiService(ɵɵinject(HttpClient)); }, token: SupportTicketApiService, providedIn: "root" });
SupportTicketApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
SupportTicketApiService.ctorParameters = () => [
    { type: HttpClient }
];

var MenuOrientation;
(function (MenuOrientation) {
    MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
    MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
    MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
    MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
})(MenuOrientation || (MenuOrientation = {}));
const FALLBACK_THEME_URL = './portal-lib/assets/css/fallback-theme/fallback.css';
const DEFAULT_BASE_URL = 'https://1000kit.atlassian.net/wiki/spaces/1000KIT/overview';
class PortalViewportComponent {
    constructor(renderer2, zone, router, route, helpDataService, messageService, dialogService, breakpointObserver, translate, themeService, menuService, menuApiService, configService, feedbackApiService, supportTicketApiService, primeNgConfig, auth) {
        this.renderer2 = renderer2;
        this.zone = zone;
        this.router = router;
        this.route = route;
        this.helpDataService = helpDataService;
        this.messageService = messageService;
        this.dialogService = dialogService;
        this.breakpointObserver = breakpointObserver;
        this.translate = translate;
        this.themeService = themeService;
        this.menuService = menuService;
        this.menuApiService = menuApiService;
        this.configService = configService;
        this.feedbackApiService = feedbackApiService;
        this.supportTicketApiService = supportTicketApiService;
        this.primeNgConfig = primeNgConfig;
        this.auth = auth;
        this.showProfileInSidebar = true;
        this.enableBreadcrumbs = false;
        this.fullPortalLayout = true;
        // TKIT
        this.helpPageEditorDisplayed = false;
        this.addToFavouritesDisplayed = false;
        this.supportTicketDisplayed = false;
        this.feedbackData = { comment: '', rating: 0, anonymous: false };
        this.feedbackVisible = false;
        this.feedbackSubmitDisabled = false;
        this.portalName = 'PORTAL';
        // PRIMENG STUFF
        this.layoutMode = MenuOrientation.STATIC;
        // TODO Ultima11: dark menu
        this.darkMenu = false;
        this.profileMode = 'top';
        this.searchClick = false;
        this.search = false;
        this.preloader = true;
        this.portalHomeMenuItem = { url: '/', label: 'Home' };
    }
    get menuButtonTitle() {
        return (this.isDesktop() && this.menuActive || this.isMobile() && this.mobileMenuActive) ? this.hideMenuButtonTitle : this.showMenuButtonTitle;
    }
    applyPadding() {
        if (this.isBodyCompact) {
            this.addClass(document.body, 'compact');
        }
        else {
            this.removeClass(document.body, 'compact');
        }
    }
    setSidebarColorTheme() {
        if (this.sideBarColorTheme === 'DARK') {
            this.darkMenu = true;
        }
        else if (this.sideBarColorTheme === 'LIGHT') {
            this.darkMenu = false;
        }
    }
    ngOnInit() {
        var _a;
        this.primeNgConfig.ripple = true;
        this.initError = this.configService.error;
        if (this.initError) {
            this.preloader = false;
            return;
        }
        this.mainPortal = this.configService.getPortalData();
        if (this.auth.currentUser().accountSettings.layoutAndThemeSettings) {
            this.isBodyCompact = (_a = this.auth.currentUser().accountSettings.layoutAndThemeSettings.compactView) !== null && _a !== void 0 ? _a : false;
            this.applyPadding();
            // this.sideBarColorTheme = this.auth.currentUser().accountSettings.layoutAndThemeSettings.menuTheme ?? 'LIGHT'
            if (this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode) {
                this.layoutMode =
                    MenuOrientation[this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode];
            }
            else {
                this.layoutMode = MenuOrientation['STATIC'];
            }
        }
        this.menuActive = this.isStatic() && !this.isMobile() && this.fullPortalLayout;
        this.validateRequiredInputs();
        this.setSidebarColorTheme();
        this.setCustomTheme();
        if (this.fullPortalLayout) {
            this.loadMenuItems();
        }
        this.router.events.subscribe((event) => {
            // console.log(`nav event ${event.constructor.name}`);
            if (event instanceof NavigationStart) {
                // Show loading indicator
            }
            if (event instanceof ActivationEnd) {
                // this.helpArticleId = event.snapshot.pathFromRoot
                //   .map(i => (i.routeConfig ? i.routeConfig.path : ''))
                //   .join('/');
                // console.log(`aftger event ${this.helpArticleId}`);
            }
            if (event instanceof NavigationEnd && this.fullPortalLayout) {
                // Hide loading indicator
                if (this.currentComponent) {
                    let helpPageIdentifier;
                    if (isTkitPage(this.currentComponent)) {
                        helpPageIdentifier = this.currentComponent.helpArticleId;
                    }
                    else {
                        helpPageIdentifier = event.url || this.currentComponent.constructor.name;
                        console.log(`Page does not have helpItemId, using router path ${helpPageIdentifier}`);
                    }
                    this.helpArticleId = helpPageIdentifier;
                    this.helpDataItem = {
                        helpItemId: helpPageIdentifier,
                        appId: this.appName,
                        baseUrl: DEFAULT_BASE_URL,
                        resourceUrl: '',
                    };
                    this.loadHelpArticle();
                }
            }
            if (event instanceof NavigationError) {
                // Hide loading indicator
                // Present error to user
                this.messageService.add({
                    severity: 'error',
                    summary: 'Navigation error',
                    detail: `Route ${event.url} not recognized`,
                });
            }
            // console.log(`navigate event ${event}`);
            this.setSidebarColorTheme();
        });
        this.translate.get(['GENERAL.SHOW_MENU', 'GENERAL.HIDE_MENU']).subscribe(text => {
            this.hideMenuButtonTitle = text['GENERAL.HIDE_MENU'];
            this.showMenuButtonTitle = text['GENERAL.SHOW_MENU'];
        });
    }
    ngAfterViewInit() {
        this.documentClickListener = this.renderer2.listen('body', 'click', () => {
            if (!this.topbarItemClick) {
                this.activeTopbarItem = null;
            }
            if (!this.menuClick && (this.isHorizontal() || this.isSlim())) {
                this.menuService.reset();
            }
            if (!this.menuClick) {
                if (this.mobileMenuActive) {
                    this.mobileMenuActive = false;
                }
                if (this.isOverlay()) {
                    this.menuActive = false;
                }
                this.menuHoverActive = false;
                this.unblockBodyScroll();
            }
            if (!this.searchClick) {
                this.search = false;
            }
            if (this.inlineMenuActive && !this.inlineMenuClick) {
                this.inlineMenuActive = false;
            }
            this.inlineMenuClick = false;
            this.searchClick = false;
            this.topbarItemClick = false;
            this.menuClick = false;
        });
    }
    loadMenuItems() {
        const portalId = this.configService.getProperty('TKIT_PORTAL_ID');
        const stripForbiddenStr = this.configService.getProperty('TKIT_PORTAL_DISABLE_MENU_PERMISSIONS');
        const stripForbidden = stripForbiddenStr === 'true';
        this.configService.lang$.subscribe(data => (this.lang = data)).unsubscribe();
        if (!portalId) {
            this.portalMenuItems = [{ label: 'Failed to load menu', icon: 'dashboard', routerLink: ['/'] }];
        }
        else if (this.fullPortalLayout) {
            this.menuApiService.getMenuItems(portalId).subscribe(data => {
                let serverMenuItems = [];
                const mainMenuItem = data.find(item => item.key === 'PORTAL_MAIN_MENU');
                this.portalHomeMenuItem = this.toPrimeNGMenuItem(data.find(item => item.key === 'PORTAL_MENU_HOME'));
                if (!this.portalHomeMenuItem) {
                    this.portalHomeMenuItem = { url: '/', label: 'Home' };
                }
                if (mainMenuItem) {
                    serverMenuItems = mainMenuItem.children
                        .filter(item => (!stripForbidden || this.auth.hasPermission(`${item.permissionObject}#VIEW`)) && !item.disabled)
                        .sort((a, b) => a.position - b.position)
                        .map(item => this.toPrimeNGMenuItem(item));
                }
                this.portalMenuItems = [
                    // { label: 'Portal Home', icon: 'dashboard', routerLink: ['/'] },
                    ...serverMenuItems,
                ];
            });
        }
    }
    toPrimeNGMenuItem(item, level = 1) {
        if (!item) {
            return undefined;
        }
        let isAbsoluteLink = item.url && item.url.match(/^(http|https)/g) !== null;
        const currentHost = document.getElementsByTagName('base')[0].href;
        let routerLink = undefined;
        const label = item.i18n[this.lang] || item.name;
        if (this.appName === item.applicationId) {
            // it is a local link, set routerlink
            if (isAbsoluteLink && item.url.includes(currentHost)) {
                routerLink = [item.url.substr(currentHost.length - 1)];
                isAbsoluteLink = false;
            }
            else {
                const path = currentHost.substring(window.location.origin.length);
                if (path.length >= 1 && item.url.startsWith(path)) {
                    // its a link within same  path
                    routerLink = [item.url.substr(path.length - 1)];
                    isAbsoluteLink = false;
                }
            }
        }
        let badgeIcon = level === 1 ? 'menu' : 'subject';
        if (item.badge !== '' && item.badge) {
            badgeIcon = item.badge;
        }
        return {
            label,
            // badge: '🔗',
            icon: badgeIcon,
            command: e => {
                e.originalEvent.preventDefault();
                if (item.children.length === 0) {
                    item.portalExit
                        ? window.open(item.url, '_blank')
                        : routerLink
                            ? this.router.navigate(routerLink)
                            : window.location.assign(item.url);
                }
            },
            url: item.url,
            routerLinkActiveOptions: [{ exact: false }],
            items: item.children.length > 0
                ? item.children
                    .filter(child => !child.disabled)
                    .sort((a, b) => a.position - b.position)
                    .map(child => this.toPrimeNGMenuItem(child, level + 1))
                : undefined,
        };
    }
    validateRequiredInputs() {
        if (!this.appName) {
            throw new Error(`You must specify [appName] attribute on <tk-portal-viewport> component.`);
        }
    }
    loadHelpArticle() {
        this.helpDataService.getHelpDataItem(this.appName, this.helpArticleId).subscribe(data => {
            if (data) {
                this.helpDataItem = data;
            }
        }, error => console.log('Failed to load help article'));
    }
    onHelpArticleEditorClosed(changed) {
        if (changed) {
            this.helpDataService.saveHelpPage(this.appName, this.helpDataItem).subscribe(res => {
                console.log(`Help item saved: ${res.status}`);
                this.helpPageEditorDisplayed = false;
                this.messageService.add({
                    severity: 'info',
                    summary: 'Help Item definition updated',
                });
                this.loadHelpArticle();
            }, error => {
                console.log(`Could not save help item`);
                this.messageService.add({
                    severity: 'error',
                    summary: 'Help Item definition update failed',
                    detail: `Server error: ${error.status}`,
                });
            });
        }
        else {
            this.helpPageEditorDisplayed = false;
        }
    }
    onAddToLaunchpadClosed(event) {
        this.addToFavouritesDisplayed = false;
    }
    openHelpPage(event) {
        if (this.helpDataItem.id) {
            const url = this.helpDataItem.baseUrl
                ? `${this.helpDataItem.baseUrl}/${this.helpDataItem.resourceUrl}`
                : this.helpDataItem.resourceUrl;
            console.log(`navigate to help page: ${url}`);
            const win = window.open(url, '_blank');
            win.focus();
        }
        else {
            this.dialogService.open(NoHelpInfoComponent, {
                header: 'No help item defined for this page',
                width: '400px',
                data: {
                    pageItem: this.helpArticleId,
                },
            });
        }
        event.preventDefault();
    }
    openHelpPageEditor(event) {
        this.helpPageEditorDisplayed = true;
        event.preventDefault();
    }
    openFeedback(event) {
        if (this.breakpointObserver.isMatched('(max-width: 1024px)')) {
            this.feedbackVisible = true;
        }
        else {
            this.feedbackPanel.toggle(event);
        }
        event.preventDefault();
    }
    openAddToLaunchpad(event) {
        this.addToFavouritesDisplayed = true;
        event.preventDefault();
    }
    openSupportTicket(event) {
        this.supportTicketDisplayed = true;
        event.preventDefault();
    }
    onSubmitFeedback(feedback) {
        this.feedbackSubmitDisabled = true;
        const feedbackDTO = {
            rating: feedback.rating,
            comment: feedback.comment,
            appId: this.appName,
            userId: feedback.anonymous ? 'anonymous' : this.auth.currentUser().userId,
        };
        this.feedbackApiService.sendFeedback(feedbackDTO).subscribe(() => {
            this.closeFeedback();
            this.messageService.add({
                severity: 'success',
                summary: 'Feedback successfully sent',
            });
        }, () => {
            this.closeFeedback();
            this.messageService.add({
                severity: 'error',
                summary: 'Sending feedback failed',
                detail: 'Please try again later',
            });
        });
    }
    closeFeedback() {
        this.feedbackSubmitDisabled = false;
        this.feedbackVisible = false;
        this.feedbackPanel.hide();
    }
    onSubmitTicket(ticket) {
        this.supportTicketApiService.createSupportTicket(ticket, this.appName).subscribe(() => {
            this.messageService.add({
                severity: 'success',
                summary: 'Success!',
                detail: 'Ticket successfully submitted',
            });
        }, () => this.messageService.add({
            severity: 'error',
            summary: 'Error!',
            detail: 'Error occured while submitting a ticket',
        }));
    }
    clearFeedback() {
        this.feedbackData = { comment: '', rating: 0, anonymous: false };
    }
    addClass(element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }
    removeClass(element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    onMenuButtonClick(event) {
        this.menuActive = !this.menuActive;
        this.menuClick = true;
        if (!this.isDesktop()) {
            this.mobileMenuActive = !this.mobileMenuActive;
            if (this.mobileMenuActive) {
                this.blockBodyScroll();
            }
            else {
                this.unblockBodyScroll();
            }
        }
        event.preventDefault();
    }
    onMenuClick($event) {
        this.menuClick = true;
        if (this.inlineMenuActive && !this.inlineMenuClick) {
            this.inlineMenuActive = false;
        }
    }
    onInlineMenuClick(event) {
        this.inlineMenuActive = !this.inlineMenuActive;
        this.inlineMenuClick = true;
    }
    onTopbarMobileButtonClick(event) {
        this.mobileTopbarActive = !this.mobileTopbarActive;
        event.preventDefault();
    }
    onTopbarItemClick(event, item) {
        this.topbarItemClick = true;
        if (this.activeTopbarItem === item) {
            this.activeTopbarItem = null;
        }
        else {
            this.activeTopbarItem = item;
        }
        if (item === 'search') {
            this.search = !this.search;
            this.searchClick = !this.searchClick;
        }
        event.preventDefault();
    }
    onSearchClick(event, val) {
        this.searchClick = val;
        this.search = val;
        event.preventDefault();
    }
    isDesktop() {
        return window.innerWidth > 991;
    }
    isMobile() {
        return window.innerWidth <= 991;
    }
    isStatic() {
        return this.layoutMode === MenuOrientation.STATIC;
    }
    isOverlay() {
        return this.layoutMode === MenuOrientation.OVERLAY;
    }
    isHorizontal() {
        return this.layoutMode === MenuOrientation.HORIZONTAL;
    }
    isSlim() {
        return this.layoutMode === MenuOrientation.SLIM;
    }
    changeToStaticMenu() {
        this.layoutMode = MenuOrientation.STATIC;
    }
    changeToOverlayMenu() {
        this.layoutMode = MenuOrientation.OVERLAY;
    }
    changeToHorizontalMenu() {
        this.layoutMode = MenuOrientation.HORIZONTAL;
    }
    changeToSlimMenu() {
        this.layoutMode = MenuOrientation.SLIM;
    }
    blockBodyScroll() {
        if (document.body.classList) {
            document.body.classList.add('blocked-scroll');
        }
        else {
            document.body.className += ' blocked-scroll';
        }
    }
    unblockBodyScroll() {
        if (document.body.classList) {
            document.body.classList.remove('blocked-scroll');
        }
        else {
            document.body.className = document.body.className.replace(new RegExp('(^|\\b)' +
                'blocked-scroll'.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    setCustomTheme() {
        const disablePortalThemeMgmt = this.configService.getProperty(CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT) === 'true';
        if (disablePortalThemeMgmt) {
            console.log(`Portal theme mgmt is disabled. To enable it, remove env var: ${CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT}`);
            this.preloader = false;
            return;
        }
        console.log(`Setting theme dynamically`);
        let customTheme = this.configService.getPortalData() && this.configService.getPortalData().themeName;
        if (!customTheme) {
            const themeFromEnv = this.configService.getProperty('TKIT_PORTAL_DEFAULT_THEME');
            if (!themeFromEnv) {
                console.log(`Custom theme not defined, or portal data not available, setting default theme CG`);
                customTheme = 'cg';
            }
            else {
                console.log(`Custom theme not defined, or portal data not available, setting theme from 'TKIT_PORTAL_DEFAULT_THEME' var: ${themeFromEnv} `);
                customTheme = themeFromEnv;
            }
        }
        if (document.getElementById('theme-css')) {
            const themeLinkToRemove = document.getElementById('theme-css');
            themeLinkToRemove.remove();
        }
        const themeLink = document.createElement('link');
        themeLink.setAttribute('id', 'theme-css');
        themeLink.setAttribute('rel', 'stylesheet');
        themeLink.setAttribute('type', 'text/css');
        themeLink.onload = () => {
            console.log('theme load done');
            this.preloader = false;
        };
        themeLink.onerror = () => {
            console.log(`Failed to load theme assets for '${customTheme}'`);
            themeLink.setAttribute('href', FALLBACK_THEME_URL);
            this.preloader = false;
        };
        themeLink.setAttribute('href', this.themeService.getThemeHref(customTheme));
        document.getElementsByTagName('head')[0].appendChild(themeLink);
    }
}
PortalViewportComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-portal-viewport',
                template: "<div class=\"loading-block\" *ngIf=\"preloader\">\n  <div\n    class=\"p-d-flex p-mb-3 p-p-1\"\n    style=\"position: fixed;\n    z-index: 100;\n    width: 100%;\n    background-color: #fff;\n    height: 75px;\n    box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\n    -webkit-box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\"\n  >\n    <p-skeleton width=\"8rem\" height=\"60px\" styleClass=\"p-mr-2\"></p-skeleton>\n    <div style=\"flex: 1; height: 100%;\">\n      <p-skeleton width=\"100%\" height=\"60px\"></p-skeleton>\n    </div>\n  </div>\n  <div\n    style=\"overflow: auto;\n    position: fixed;\n    margin-left: 0px;\n    width: 250px;\n    z-index: 99;\n    top: 75px;\n    height: 100%;\n    background-color: #fff;\n    box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -webkit-box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -moz-box-shadow: 3px 0 6px rgba(0,0,0,.3);\n    padding: 1rem\"\n  >\n    <div class=\"custom-skeleton p-p-3 p-mt-4\">\n      <div class=\"p-mb-3 p-ml-5\">\n        <p-skeleton shape=\"circle\" size=\"3rem\" styleClass=\"p-mr-2\"></p-skeleton>\n      </div>\n      <p-skeleton width=\"80%\" height=\"1rem\" styleClass=\"p-mb-1 p-ml-2\"></p-skeleton>\n    </div>\n    <div class=\"p-mt-4\">\n      <p-skeleton *ngFor=\"let number of [0,1,2,3,4,5]\" width=\"100%\" height=\"1.5rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    </div>\n  </div>\n</div>\n<div class=\"exception-body error-page\" *ngIf=\"initError\">\n  <div class=\"exception-type\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\" stroke=\"currentColor\">\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n      />\n    </svg>\n  </div>\n\n  <div class=\"card exception-panel\">\n    <i class=\"pi pi-exclamation-circle\"></i>\n    <h1>Exception Occured</h1>\n    <div class=\"exception-detail\">Please contact system administrator</div>\n\n    <p-button label=\"Homepage\" [routerLink]=\"['/']\" class=\"p-button-help\"></p-button>\n  </div>\n</div>\n\n<div\n  [hidden]=\"preloader || initError\"\n  class=\"layout-wrapper\"\n  [ngClass]=\"{ 'layout-menu-static': isStatic(),\n        'layout-menu-overlay': isOverlay(),\n        'layout-menu-horizontal': isHorizontal(),\n        'layout-menu-slim': isSlim(),\n        'layout-menu-active': menuActive,\n        'layout-menu-mobile-active': mobileMenuActive,\n        'layout-topbar-mobile-active': mobileTopbarActive\n   }\"\n>\n    <tk-header\n      [menuButtonTitle]=\"menuButtonTitle\"\n      [activeTopbarItem]=\"activeTopbarItem\"\n      [isHorizontal]=\"isHorizontal()\"\n      [profileMode]=\"profileMode\"\n      [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n      [homeNavTitle]=\"portalHomeMenuItem.label\"\n      [homeNavUrl]=\"portalHomeMenuItem.url\"\n      [fullPortalLayout]=\"fullPortalLayout\"\n      [search]=\"search\"\n      (searchClick)=\"onSearchClick($event.event, $event.val)\"\n      (menuButtonClick)=\"onMenuButtonClick($event)\"\n      (topbarItemClick)=\"onTopbarItemClick($event.event, $event.arg)\"\n      (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n      (openHelpPage)=\"openHelpPage($event)\"\n      (openFeedback)=\"openFeedback($event)\"\n      (openSupportTicket)=\"openSupportTicket($event)\"\n      (openAddToLaunchpad)=\"openAddToLaunchpad($event)\"\n    ></tk-header>\n\n    <p-overlayPanel #feedbackPanel (onHide)=\"clearFeedback()\">\n      <ng-template pTemplate>\n        <tk-feedback\n          [(feedbackData)]=\"feedbackData\"\n          [submitDisabled]=\"feedbackSubmitDisabled\"\n          (feedbackSubmit)=\"onSubmitFeedback($event)\"\n        >\n        </tk-feedback>\n      </ng-template>\n    </p-overlayPanel>\n\n    <p-dialog header=\"Leave Feedback\" [(visible)]=\"feedbackVisible\" (onHide)=\"clearFeedback()\">\n      <tk-feedback\n        [(feedbackData)]=\"feedbackData\"\n        [submitDisabled]=\"feedbackSubmitDisabled\"\n        (feedbackSubmit)=\"onSubmitFeedback($event)\"\n      >\n      </tk-feedback>\n    </p-dialog>\n\n    <p-toast></p-toast>\n\n    <div class=\"menu-wrapper\" (click)=\"onMenuClick($event)\">\n      <div\n        *ngIf=\"fullPortalLayout\"\n        class=\"layout-menu-container\"\n      >\n        <tk-inline-profile\n          *ngIf=\"showProfileInSidebar && !isHorizontal()\"\n          [inlineMenuActive]=\"inlineMenuActive\"\n          (inlineMenuClick)=\"onInlineMenuClick($event)\"\n        ></tk-inline-profile>\n\n        <tk-menu\n          [(menuActive)]=\"menuActive\"\n          [(mobileMenuActive)]=\"mobileMenuActive\"\n          [isStatic]=\"isStatic()\"\n          [isSlim]=\"isSlim()\"\n          [isHorizontal]=\"isHorizontal()\"\n          [isMobile]=\"isMobile()\"\n          [isDesktop]=\"isDesktop()\"\n          [menuHoverActive]=\"menuHoverActive\"\n          [portalMenu]=\"portalMenuItems\"\n        ></tk-menu>\n      </div>\n    </div>\n\n    <div class=\"layout-main\">\n      <tk-breadcrumb\n        *ngIf=\"enableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n        (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n        (openHelpPage)=\"openHelpPage($event)\"\n      ></tk-breadcrumb>\n\n      <div class=\"layout-content\">\n        <router-outlet (activate)=\"currentComponent = $event\"></router-outlet>\n        <tk-footer [homePortal]=\"mainPortal\"></tk-footer>\n      </div>\n    </div>\n\n    <div class=\"layout-mask modal-in\"></div>\n</div>\n\n<tk-help-editor\n  *ngIf=\"helpDataItem\"\n  [display]=\"helpPageEditorDisplayed\"\n  [helpItem]=\"helpDataItem\"\n  (closed)=\"onHelpArticleEditorClosed($event)\"\n></tk-help-editor>\n\n<tk-add-to-launchpad\n  *ngIf=\"addToFavouritesDisplayed\"\n  [display]=\"addToFavouritesDisplayed\"\n  (closed)=\"onAddToLaunchpadClosed($event)\"\n  [appId]=\"appName\"\n></tk-add-to-launchpad>\n\n<tk-support-ticket [(display)]=\"supportTicketDisplayed\" (submitTicket)=\"onSubmitTicket($event)\"></tk-support-ticket>\n",
                styles: [`
      .loading-block {
      }
    `]
            },] }
];
PortalViewportComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: NgZone },
    { type: Router },
    { type: ActivatedRoute },
    { type: HelpPageAPIService },
    { type: MessageService },
    { type: DialogService },
    { type: BreakpointObserver },
    { type: TranslateService },
    { type: ThemeService },
    { type: MenuService },
    { type: MenuApiService },
    { type: ConfigurationService },
    { type: FeedbackApiService },
    { type: SupportTicketApiService },
    { type: PrimeNGConfig },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
PortalViewportComponent.propDecorators = {
    showProfileInSidebar: [{ type: Input }],
    enableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    appName: [{ type: Input }],
    portalName: [{ type: Input }],
    layoutContainerViewChild: [{ type: ViewChild, args: ['layoutContainer',] }],
    layoutMenuScrollerViewChild: [{ type: ViewChild, args: ['scrollPanel',] }],
    feedbackPanel: [{ type: ViewChild, args: ['feedbackPanel',] }]
};

class PortalSearchPage {
    search() {
        this.searchInProgress = true;
        const resultIntermediate = this.doSearch();
        if (isObservable(resultIntermediate)) {
            resultIntermediate.subscribe(data => {
                this.results = data;
                this.searchInProgress = false;
            });
        }
        else {
            this.results = resultIntermediate;
            this.searchInProgress = false;
        }
    }
    reset() {
        this.results = [];
        this.criteria = this.getDefaultCriteria();
    }
    ngOnInit() {
        this.reset();
    }
}
PortalSearchPage.decorators = [
    { type: Injectable }
];

const reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
const dateReviver = function (key, value) {
    if (typeof value === 'string') {
        const a = reISO.exec(value);
        if (a) {
            return new Date(value);
        }
    }
    return value;
};
const ɵ0 = dateReviver;
class PortalSearchPageComponent extends PortalPageComponent {
    constructor(injectorChild, messageService, searchTemplateApi, auth, viewPort, searchPage) {
        super(injectorChild);
        this.messageService = messageService;
        this.searchTemplateApi = searchTemplateApi;
        this.auth = auth;
        this.viewPort = viewPort;
        this.searchPage = searchPage;
        this.searchCriteriaTemplatesEnabled = true;
        this.enableSearchToolbar = false;
        this.onSearch = new EventEmitter();
        this.newTemplateDefaultFlag = false;
    }
    ngOnInit() {
        super.ngOnInit();
        this.validatedInputs();
        if (this.pageName) {
            this.fetchSearchTemplates();
        }
    }
    onSearchTemplateSelection(event) {
        if (event.value) {
            this.activeSearchTemplateId = event.value;
            this.searchTemplateApi
                .getTemplateById(this.activeSearchTemplateId)
                .subscribe(template => {
                this.activeSearchTemplate = template;
                // TODO allow override
                this.searchPage.criteria = JSON.parse(template.criteriaAsJson, dateReviver);
            });
        }
        else {
            this.activeSearchTemplateId = null;
            this.activeSearchTemplate = null;
        }
    }
    fetchSearchTemplates() {
        this.searchTemplateApi
            .getSearchTemplatesLegacy(this.auth.currentUser().userId, this.viewPort.appName, this.pageName)
            .subscribe(templates => {
            this.searchTemplateOptions = [
                { value: null, label: 'Pick saved template' },
                ...templates.map(t => ({ label: t.name, value: t.id }))
            ];
            // if a default template exists preselect it
            const defaultTemplate = templates.find(t => t.defaultTemplate);
            if (defaultTemplate) {
                this.onSearchTemplateSelection({ value: defaultTemplate.id });
            }
        });
    }
    validatedInputs() {
        if (!this.searchPage) {
            console.error(`<tk-search-page> can only be used in a component that extends "PortalSearchPage". See README.MD chapter #Generic Search Page`);
        }
        if (!this.pageName) {
            console.warn(`You did not specify [pageName] attribute for search page component. Without it, some features will not work.`);
        }
    }
    triggerSearch() {
        console.log(`Click search`);
        this.onSearch.emit(1);
    }
    triggerCriteriaTemplateUpdate() {
        console.log('update tempalte');
        this.activeSearchTemplate.criteriaAsJson = JSON.stringify(this.searchPage.criteria);
        this.searchTemplateApi
            .updateTemplate(this.activeSearchTemplateId, this.activeSearchTemplate)
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template updated'
            });
        });
    }
    triggerCriteriaTemplateSave(event, op) {
        this.searchTemplateApi
            .createNewTemplate({
            application: this.viewPort.appName,
            page: this.pageName,
            user: this.auth.currentUser().userId,
            name: this.newTemplateName,
            defaultTemplate: this.newTemplateDefaultFlag,
            criteriaAsJson: JSON.stringify(this.searchPage.criteria)
        })
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.searchTemplateOptions.push({
                label: savedTemplate.name,
                value: savedTemplate.id
            });
            this.activeSearchTemplateId = savedTemplate.id;
            op.hide();
            this.newTemplateDefaultFlag = false;
            this.newTemplateName = undefined;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template saved'
            });
        });
    }
    triggerCriteriaTemplateDelete() {
        this.searchTemplateApi
            .deleteTemplate(this.activeSearchTemplateId)
            .subscribe(ok => {
            this.messageService.add({
                severity: 'info',
                summary: 'Search template deleted'
            });
            this.searchTemplateOptions.splice(this.searchTemplateOptions.findIndex(i => i.value == this.activeSearchTemplateId), 1);
            this.activeSearchTemplateId = undefined;
            this.activeSearchTemplate = undefined;
        });
    }
}
PortalSearchPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-portal-search-page',
                template: "<tk-portal-page\n  header=\"{{ header }}\"\n  [leftToolbar]=\"pageToolbarLeft\"\n  [rightToolbar]=\"pageToolbarRight\"\n>\n  <div id=\"criteria-panel\" tkCollapsible>\n    <ng-content select=\"[criteria]\"></ng-content>\n  </div>\n\n  <div id=\"search-results\">\n    <ng-content select=\"[results]\"></ng-content>\n  </div>\n</tk-portal-page>\n\n<ng-template #pageToolbarLeft>\n  <tk-toolbar-item\n    *ngIf=\"enableSearchToolbar\"\n    title=\"Suchen\"\n    icon=\"search\"\n    (click)=\"triggerSearch()\"\n  ></tk-toolbar-item>\n  <ng-container *ngTemplateOutlet=\"leftToolbar\"></ng-container>\n</ng-template>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <p-overlayPanel\n    #op\n    [dismissable]=\"true\"\n    [showCloseIcon]=\"true\"\n    appendTo=\"body\"\n  >\n    <div class=\"p-fluid\" [ngStyle]=\"{ width: '400px' }\">\n      <h5>Save a new search template</h5>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"templateName\">Template Name</label>\n        <div class=\"p-col-12 p-md-8\">\n          <input\n            id=\"templateName\"\n            pInputText\n            type=\"text\"\n            [(ngModel)]=\"newTemplateName\"\n          />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"defaultFlag\">Set as default?</label>\n        <!--      </div>-->\n        <div class=\"p-col-12 p-md-8\">\n          <p-inputSwitch\n            id=\"defaultFlag\"\n            [(ngModel)]=\"newTemplateDefaultFlag\"\n          ></p-inputSwitch>\n        </div>\n      </div>\n\n      <div class=\"p-grid\">\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Cancel\"\n            (click)=\"op.hide()\"\n            class=\"p-button-secondary p-col-12\"\n          ></button>\n        </div>\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Save\"\n            class=\"p-col-12\"\n            (click)=\"triggerCriteriaTemplateSave($event, op)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </p-overlayPanel>\n  <tk-toolbar-item\n    *ngIf=\"searchCriteriaTemplatesEnabled\"\n    title=\"Neue Suchvorlage Erstellen\"\n    icon=\"plus\"\n    (click)=\"op.show($event)\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Speichern\"\n    icon=\"save\"\n    (click)=\"triggerCriteriaTemplateUpdate()\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Loeschen\"\n    icon=\"trash\"\n    (click)=\"triggerCriteriaTemplateDelete()\"\n  ></tk-toolbar-item>\n  <div class=\"search-template-box\" *ngIf=\"searchTemplateOptions\">\n    <p-dropdown\n      [style]=\"{ width: '150px' }\"\n      appendTo=\"body\"\n      [ngModel]=\"activeSearchTemplateId\"\n      [options]=\"searchTemplateOptions\"\n      [filter]=\"true\"\n      (onChange)=\"onSearchTemplateSelection($event)\"\n    ></p-dropdown>\n  </div>\n\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n",
                styles: [".search-template-box{display:inline-block;padding-top:.2em}.search-template-box ::ng-deep .p-dropdown-label{padding:.5em}"]
            },] }
];
PortalSearchPageComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessageService },
    { type: SearchTemplateAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: PortalViewportComponent },
    { type: PortalSearchPage, decorators: [{ type: SkipSelf }, { type: Optional }] }
];
PortalSearchPageComponent.propDecorators = {
    searchCriteriaTemplatesEnabled: [{ type: Input }],
    enableSearchToolbar: [{ type: Input }],
    onSearch: [{ type: Output }],
    pageName: [{ type: Input }]
};

class TkIfPermDirective {
    constructor(templateRef, viewContainer, authService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authService = authService;
    }
    set tkIfPerm(permission) {
        this.permission = permission;
    }
    ngOnInit() {
        if (!this.authService.hasPermission(this.permission)) {
            console.log(`Hide element because no perm ${this.permission}`);
            this.viewContainer.clear();
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
}
TkIfPermDirective.decorators = [
    { type: Directive, args: [{ selector: '[tkIfPerm]' },] }
];
TkIfPermDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
TkIfPermDirective.propDecorators = {
    loaderState: [{ type: Input }],
    tkIfPerm: [{ type: Input }]
};

// TODO is <a> without click actually OK? How about a11y?
class ToolbarItemComponent {
    constructor() { }
    ngOnInit() { }
}
ToolbarItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-toolbar-item',
                template: `
    <a
      pRipple
      *ngIf="link"
      class="toolbar-item"
      [href]="link"
      [target]="linkTarget"
      [rel]="linkRel"
      title="{{ title }}"
      role="button"
      ><i class="pi pi-{{icon}}"></i>
    </a>
    <a
      pRipple
      *ngIf="!link"
      href="javascript:void(0)"
      class="toolbar-item"
      title="{{ title }}"
      role="button"
      ><i class="pi pi-{{icon}}"></i>
    </a>
  `,
                styles: [`
      .toolbar-item {
        color: #757575;
        display: inline-block;
        padding: 3px;
        text-align: center;
        font-size: 1.3em;
        transition: all 0.4s;
      }
      .toolbar-item i {
        transition: all 0.4s;
        font-size: 1.5rem;
        padding: 0.2em;
      }
      .toolbar-item:hover {
        background-color: #e8e8e8;
      }
      .toolbar-item:focus {
        background-color: #e8e8e8;
      }

    `]
            },] }
];
ToolbarItemComponent.ctorParameters = () => [];
ToolbarItemComponent.propDecorators = {
    title: [{ type: Input }],
    permission: [{ type: Input }],
    link: [{ type: Input }],
    linkTarget: [{ type: Input }],
    linkRel: [{ type: Input }],
    action: [{ type: Input }],
    icon: [{ type: Input }]
};

class HttpProgressInterceptor {
    constructor(loaderService) {
        this.loaderService = loaderService;
        this.requests = [];
    }
    removeRequest(req) {
        const i = this.requests.indexOf(req);
        if (i >= 0) {
            this.requests.splice(i, 1);
        }
        this.loaderService.isLoading.next(this.requests.length > 0);
    }
    intercept(req, next) {
        const started = Date.now();
        this.requests.push(req);
        this.loaderService.isLoading.next(true);
        return next.handle(req).pipe(tap(event => {
            if (event instanceof HttpResponse) {
                const elapsed = Date.now() - started;
                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms with result ${event.status}. ${this.requests.length}`);
                this.removeRequest(req);
            }
        }, error => {
            console.log(`Http err: status ${error.status} ${JSON.stringify(error)}`);
            this.removeRequest(req);
        }));
    }
}
HttpProgressInterceptor.ɵprov = ɵɵdefineInjectable({ factory: function HttpProgressInterceptor_Factory() { return new HttpProgressInterceptor(ɵɵinject(HttpProgressLoaderService)); }, token: HttpProgressInterceptor, providedIn: "root" });
HttpProgressInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
HttpProgressInterceptor.ctorParameters = () => [
    { type: HttpProgressLoaderService }
];

function tkitPortalInitializer(configService, translateService, authService) {
    const startTime = new Date().getTime();
    console.log(`Start tkit portal module initializer`);
    return () => configService
        .init()
        .then(() => console.log('Config initialized, next: init auth'))
        .then(() => authService.init())
        .then(res => {
        var _a, _b;
        console.log(`Auth service init resolved ${res}, next: set default lang`);
        const availLangsCSV = configService.getProperty('SUPPORTED_LANGUAGES') || 'en,de';
        const availableLangs = availLangsCSV.split(',').map(l => l.trim());
        let lang = ((_b = (_a = authService.currentUser().accountSettings) === null || _a === void 0 ? void 0 : _a.localeAndTimeSettings) === null || _b === void 0 ? void 0 : _b.locale) || translateService.getBrowserLang();
        lang = availableLangs.includes(lang) ? lang : 'de';
        translateService.use(lang);
        configService.setLang(lang);
        const duration = new Date().getTime() - startTime;
        console.log(`Tkit portal module initializer finished in ${(duration / 1000).toFixed(2)}s`);
        return true;
    })
        .catch(err => {
        console.log(`
      #####################################
      Tkit portal lib initialization failed
      #####################################
      `);
        configService.error = err;
        //throw err;
    });
}

class PortalItemService {
    constructor(http) {
        this.http = http;
        this.url = 'portal-api/v1/portalItems/search';
    }
    searchForServices(query, portalId, count) {
        let params = new HttpParams();
        if (query) {
            params = params.set('query', query);
        }
        if (portalId) {
            params = params.set('portal-id', portalId);
        }
        if (count) {
            params = params.set('count', count.toString());
        }
        return this.http.get(this.url, {
            params
        });
    }
}
PortalItemService.ɵprov = ɵɵdefineInjectable({ factory: function PortalItemService_Factory() { return new PortalItemService(ɵɵinject(HttpClient)); }, token: PortalItemService, providedIn: "root" });
PortalItemService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
PortalItemService.ctorParameters = () => [
    { type: HttpClient }
];

var SearchItemType;
(function (SearchItemType) {
    SearchItemType["APPLICATION"] = "APPLICATION";
    SearchItemType["OPEN_SEARCH"] = "OPEN_SEARCH";
})(SearchItemType || (SearchItemType = {}));

class SearchBarComponent {
    constructor(searchService, config, translateService, messageService) {
        this.searchService = searchService;
        this.config = config;
        this.translateService = translateService;
        this.messageService = messageService;
        this.SearchItemType = SearchItemType;
        this.searchClick = new EventEmitter();
    }
    get openInSearchItem() {
        return {
            type: SearchItemType.OPEN_SEARCH,
            name: 'Open in search view',
            url: `${this.searchUrl}${this.query.value}`,
            queryString: this.query.value,
        };
    }
    ngOnInit() {
        this.query = new FormControl('');
        const searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
        this.searchUrl = `${searchUrl}/search?query=`;
    }
    ngAfterViewInit() {
        setTimeout(() => this.searchInputViewChild.focusInput(), 0);
    }
    search(event) {
        this.searchService.searchForServices(event.query, null).subscribe(data => {
            data = data.slice(0, this.maxResults);
            data.push(this.openInSearchItem);
            this.results = data;
        });
    }
    select(event) {
        if (event.type === SearchItemType.OPEN_SEARCH) {
            this.query.setValue(event.queryString);
        }
        else {
            this.query.setValue(event.name);
        }
        window.open(event.url);
    }
    goToSearch(clickEnter) {
        if (this.query.value) {
            window.open(`${this.searchUrl}${this.query.value}`);
        }
        else {
            if (clickEnter === false) {
                this.messageService.add({
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    summary: this.translateService.instant('QUICK_SEARCH_FORM.WRONG_DATA'),
                    severity: 'error',
                });
            }
        }
    }
    onSearchClick(event, val) {
        this.searchClick.emit({ event, val });
    }
}
SearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-search-bar',
                template: "<div class=\"search-bar\">\n  <form [spellcheck]=\"false\" (ngSubmit)=\"goToSearch(false)\">\n    <p-autoComplete\n      #searchInput\n      [formControl]=\"query\"\n      [suggestions]=\"results\"\n      (completeMethod)=\"search($event)\"\n      (onSelect)=\"select($event)\"\n      (click)=\"onSearchClick($event, true)\"\n      (keydown.escape)=\"onSearchClick($event, false)\"\n      (keydown.enter)=\"goToSearch(true)\"\n      [style]=\"{ width: '100%', height: '4rem' }\"\n      placeholder=\"Search for apps\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <span\n            *ngSwitchCase=\"SearchItemType.APPLICATION\"\n            class=\"item-badge item-app\"\n            >APP</span\n          >\n        <span>{{ item.name }}</span>\n        </ng-container>\n      </ng-template>\n    </p-autoComplete>\n  </form>\n</div>\n",
                styles: [":host{flex:1 1 auto}.search-bar ::ng-deep .item-badge{font-size:10px;border-radius:.1rem;margin-right:1em;padding:.25em .5em;text-transform:uppercase;font-weight:700;letter-spacing:.3px}.search-bar ::ng-deep .item-badge.item-app{background-color:green;color:#fff}"]
            },] }
];
SearchBarComponent.ctorParameters = () => [
    { type: PortalItemService },
    { type: ConfigurationService },
    { type: TranslateService },
    { type: MessageService }
];
SearchBarComponent.propDecorators = {
    searchInputViewChild: [{ type: ViewChild, args: ['searchInput',] }],
    searchClick: [{ type: Output }]
};

class ResultTextComponent {
    constructor() { }
    ;
}
ResultTextComponent.decorators = [
    { type: Component, args: [{
                selector: "tk-result-text",
                template: `
    <span *ngIf="resultsCount > 0 && state.totalRecords > 0; else noResults">
      {{ 'SEARCH.SHOWING' | translate }} {{ state.first + 1 }} -
      {{
        state.rows * (state.page + 1) < state.totalRecords
          ? state.rows * (state.page + 1)
          : state.totalRecords
      }}
      {{ 'SEARCH.OUT_OF_TOTAL' | translate }} {{ state.totalRecords }}
    </span>
    <ng-template #noResults>
      {{ 'SEARCH.NO_RESULTS' | translate }}
    </ng-template>
  `
            },] }
];
ResultTextComponent.ctorParameters = () => [];
ResultTextComponent.propDecorators = {
    resultsCount: [{ type: Input }],
    state: [{ type: Input }]
};
class CustomTableState {
}

class FeedbackComponent {
    constructor(fb) {
        this.fb = fb;
        this.minLength = 5;
        this.submitDisabled = false;
        this.feedbackDataChange = new EventEmitter();
        this.feedbackSubmit = new EventEmitter();
        this.commentRequired = false;
        this.requiredCommentValidator = (fg) => {
            const rating = fg.controls.rating.value;
            const comment = fg.controls.comment.value;
            if (rating > 0 && rating < 5) {
                this.commentRequired = true;
                return comment.length >= this.minLength ? null : { missingComment: true };
            }
            else {
                this.commentRequired = false;
                return null;
            }
        };
    }
    set feedbackData(feedback) {
        if (this.form) {
            this.form.patchValue(feedback);
        }
    }
    ngOnInit() {
        this.form = this.fb.group({
            rating: [0, [Validators.required, Validators.min(1), Validators.max(5)]],
            comment: ['', Validators.minLength(this.minLength)],
            anonymous: false
        }, { validators: this.requiredCommentValidator });
        this.form.valueChanges.subscribe(values => {
            this.feedbackDataChange.emit(values);
        });
    }
    submitFeedback() {
        if (this.form.valid && !this.submitDisabled) {
            this.submitDisabled = true;
            this.feedbackSubmit.emit(this.form.value);
        }
    }
}
FeedbackComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-feedback',
                template: "<form [formGroup]=\"form\">\n  <div class=\"feedback\">\n    <div>Rate app</div>\n    <div class=\"rating\">\n      <p-rating [cancel]=\"false\" formControlName=\"rating\"></p-rating>\n    </div>\n    <div>Comments {{ commentRequired ? \"(required)\" : \"(optional)\" }}</div>\n    <div>\n      <textarea\n        class=\"fill\"\n        pInputTextarea\n        rows=\"5\"\n        placeholder=\"Min. {{ minLength }} characters\"\n        formControlName=\"comment\"\n      ></textarea>\n    </div>\n    <div class=\"anon\">\n      <p-checkbox\n        name=\"anon\"\n        value=\"Anonymous\"\n        label=\"Anonymous\"\n        formControlName=\"anonymous\"\n      ></p-checkbox>\n    </div>\n    <div class=\"submit\">\n      <button\n        pButton\n        [disabled]=\"form.invalid || submitDisabled\"\n        label=\"Submit\"\n        (click)=\"submitFeedback()\"\n      ></button>\n    </div>\n  </div>\n</form>\n",
                styles: [".feedback .fill{width:15rem;background-color:#efefef}.feedback .rating{text-align:center}.feedback .anon{padding:.5rem 0}.feedback .submit{padding:.5em 0}.feedback .submit button{width:100%}"]
            },] }
];
FeedbackComponent.ctorParameters = () => [
    { type: FormBuilder }
];
FeedbackComponent.propDecorators = {
    submitDisabled: [{ type: Input }],
    feedbackData: [{ type: Input }],
    feedbackDataChange: [{ type: Output }],
    feedbackSubmit: [{ type: Output }]
};

class SupportTicketComponent {
    constructor(fb) {
        this.fb = fb;
        this.display = false;
        this.displayChange = new EventEmitter();
        this.submitTicket = new EventEmitter();
    }
    ngOnInit() {
        this.formGroup = this.fb.group({
            title: ['', Validators.required],
            description: ['', Validators.required]
        });
    }
    close() {
        this.displayChange.emit(false);
    }
    submit() {
        this.submitTicket.emit(this.formGroup.value);
    }
}
SupportTicketComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-support-ticket',
                template: "<p-dialog\n  header=\"Create Support Ticket\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '500px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close()\"\n>\n  <form [formGroup]=\"formGroup\">\n    <div class=\"p-grid\">\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <input id=\"ticket-title\" formControlName=\"title\" pInputText />\n          <label for=\"ticket-title\">Title</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <textarea\n            id=\"ticket-description\"\n            formControlName=\"description\"\n            pInputTextarea\n            rows=\"10\"\n          >\n          </textarea>\n          <label for=\"ticket-description\">Description</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <button\n          pButton\n          label=\"Submit\"\n          (click)=\"submit()\"\n          [disabled]=\"formGroup.invalid\"\n        ></button>\n      </div>\n    </div>\n  </form>\n</p-dialog>\n",
                styles: ["input,textarea{width:100%;resize:none}"]
            },] }
];
SupportTicketComponent.ctorParameters = () => [
    { type: FormBuilder }
];
SupportTicketComponent.propDecorators = {
    display: [{ type: Input }],
    displayChange: [{ type: Output }],
    submitTicket: [{ type: Output }]
};

class IconsService {
    constructor(http) {
        this.http = http;
    }
    getPrimeicons() {
        return this.http
            .get('./portal-lib/assets/primeicons.csv', { responseType: 'text' })
            .pipe(map(data => data.split('\n')));
    }
}
IconsService.ɵprov = ɵɵdefineInjectable({ factory: function IconsService_Factory() { return new IconsService(ɵɵinject(HttpClient)); }, token: IconsService, providedIn: "root" });
IconsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
IconsService.ctorParameters = () => [
    { type: HttpClient }
];

class LaunchpadService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.url = "./launchpad-api/launchpad";
    }
    getLaunchpads(criteria) {
        const parameters = new HttpParams();
        Object.keys(criteria).forEach(key => parameters.set(key, criteria[key]));
        const options = { params: parameters };
        return this.httpClient.get(this.url, options);
    }
    addToLaunchpad(id, createTileDTO) {
        const httpOptions = {
            headers: new HttpHeaders({
                "Content-Type": "application/json"
            })
        };
        return this.httpClient.post(`${this.url}/${id}/tiles`, createTileDTO, httpOptions);
    }
}
LaunchpadService.ɵprov = ɵɵdefineInjectable({ factory: function LaunchpadService_Factory() { return new LaunchpadService(ɵɵinject(HttpClient)); }, token: LaunchpadService, providedIn: "root" });
LaunchpadService.decorators = [
    { type: Injectable, args: [{ providedIn: "root" },] }
];
LaunchpadService.ctorParameters = () => [
    { type: HttpClient }
];

class AddToLaunchpadComponent {
    constructor(iconsService, fb, launchpadService, auth, messageService, confService) {
        this.iconsService = iconsService;
        this.fb = fb;
        this.launchpadService = launchpadService;
        this.auth = auth;
        this.messageService = messageService;
        this.confService = confService;
        this.closed = new EventEmitter();
        this.launchpads = [];
    }
    ngOnInit() {
        this.iconsService.getPrimeicons().subscribe(icons => (this.icons = icons.filter(i => !!i)), error => console.log(error));
        this.launchpadForm = this.fb.group({
            icon: ['', Validators.required],
            type: [{ value: 'FAVOURITE', disabled: true }],
            name: ['', Validators.required],
            appId: [{ value: this.appId, disabled: true }],
            appUrl: [
                {
                    value: window.location.href.replace(window.location.origin, ''),
                    disabled: true,
                },
            ],
            launchpad: ['', Validators.required],
        });
        const launchpadCriteria = {
            portalId: this.confService.getProperty('TKIT_PORTAL_ID'),
        };
        this.launchpadService.getLaunchpads(launchpadCriteria).subscribe(data => (this.launchpads = data), error => console.log(error));
    }
    addToLaunchpad() {
        const createTileDTO = {
            appId: this.launchpadForm.get('appId').value,
            appUrl: this.launchpadForm.get('appUrl').value,
            name: this.launchpadForm.get('name').value,
            type: this.launchpadForm.get('type').value,
            icon: this.launchpadForm.get('icon').value,
        };
        this.launchpadService.addToLaunchpad(this.launchpadForm.get('launchpad').value.id, createTileDTO).subscribe(() => {
            this.messageService.add({
                summary: 'App added to favourites successfully',
                severity: 'success',
            });
            this.close();
        }, () => {
            this.messageService.add({
                summary: 'Failed to add app to favourites',
                severity: 'error',
            });
        });
    }
    filterIcons(event) {
        const query = event.query.toLowerCase();
        this.filteredIcons = this.icons.filter(icon => icon.toLowerCase().includes(query));
    }
    close(event) {
        this.closed.emit(false);
    }
}
AddToLaunchpadComponent.decorators = [
    { type: Component, args: [{
                selector: 'tk-add-to-launchpad',
                template: "<p-dialog\n  header=\"Add to Favourites\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '700px', 'max-height': '600px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close($event)\"\n  [modal]=\"true\"\n>\n  <form [formGroup]=\"launchpadForm\" (ngSubmit)=\"addToLaunchpad()\">\n    <div class=\"p-fluid modal-content\">\n      <div class=\"p-field p-grid\">\n        <label for=\"name\" class=\"p-col-12 p-md-3\">Tile Name: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"name\" id=\"name\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appId\" class=\"p-col-12 p-md-3\">AppId: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appId\" id=\"appId\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appUrl\" class=\"p-col-12 p-md-3\">AppUrl: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appUrl\" id=\"appUrl\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"launchpad\" class=\"p-col-12 p-md-3\">Launchpad: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-dropdown\n            inputId=\"launchpad\"\n            [options]=\"launchpads\"\n            formControlName=\"launchpad\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_LAUNCHPAD' | translate }}\"\n          >\n            <ng-template let-item pTemplate=\"item\">\n              <span class=\"custom-launchpad-container\">\n                <span> {{ item.name }} </span>\n                <span>\n                  {{ item.type }}\n                </span>\n              </span>\n            </ng-template>\n          </p-dropdown>\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"type\" class=\"p-col-12 p-md-3\">{{ \"LAUNCHPAD.TILE_TYPE\" | translate }}: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input id=\"text\" type=\"text\" pInputText formControlName=\"type\" value=\"FAVOURITE\" readonly />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"icon\" class=\"p-col-12 p-md-3\">Icon: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-autoComplete\n            [suggestions]=\"filteredIcons\"\n            inputId=\"icon\"\n            formControlName=\"icon\"\n            (completeMethod)=\"filterIcons($event)\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_ICON' | translate }}\"\n            forceSelection=\"true\"\n            completeOnFocus=\"true\"\n          >\n            <ng-template let-icon pTemplate=\"item\">\n              <div class=\"custom-item-container\">\n                <div>{{ icon }}</div>\n                <span class=\"pi pi-{{icon}}\"></span>\n              </div>\n            </ng-template>\n          </p-autoComplete>\n        </div>\n      </div>\n    </div>\n    <p-footer class=\"submit\">\n      <button\n        pButton\n        type=\"submit\"\n        label=\"{{ 'LAUNCHPAD.SAVE' | translate }}\"\n        [disabled]=\"!launchpadForm.valid\"\n      ></button>\n    </p-footer>\n  </form>\n</p-dialog>\n",
                styles: [".custom-launchpad-container{display:flex}.custom-launchpad-container span:last-of-type{margin-left:auto}.submit{padding:.5em 0;margin-top:20px}.submit button{margin-top:.5em;width:100%}.custom-item-container div{display:inline-block}.custom-item-container span{float:left;margin-right:5px}"]
            },] }
];
AddToLaunchpadComponent.ctorParameters = () => [
    { type: IconsService },
    { type: FormBuilder },
    { type: LaunchpadService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: MessageService },
    { type: ConfigurationService }
];
AddToLaunchpadComponent.propDecorators = {
    display: [{ type: Input }],
    appId: [{ type: Input }],
    closed: [{ type: Output }]
};

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class TooltipAriaDirective extends Tooltip {
    constructor(el, zone) {
        super(el, zone);
        this.el = el;
        this.zone = zone;
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            switch (this.tooltipEvent) {
                case 'hover':
                    this.initHoverForTooltipEvent();
                    break;
                case 'focus':
                    this.initFocusForTooltipEvent();
                    break;
                case 'hover|focus':
                    this.initHoverForTooltipEvent();
                    this.initFocusForTooltipEvent();
                    break;
                case 'focus|hover':
                    this.initHoverForTooltipEvent();
                    this.initFocusForTooltipEvent();
                    break;
            }
        });
    }
    initHoverForTooltipEvent() {
        this.mouseEnterListener = this.onMouseEnter.bind(this);
        this.mouseLeaveListener = this.onMouseLeave.bind(this);
        this.clickListener = this.onClick.bind(this);
        this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);
        this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);
        this.el.nativeElement.addEventListener('click', this.clickListener);
    }
    initFocusForTooltipEvent() {
        this.focusListener = this.onFocus.bind(this);
        this.blurListener = this.onBlur.bind(this);
        this.el.nativeElement.addEventListener('focus', this.focusListener);
        this.el.nativeElement.addEventListener('blur', this.blurListener);
    }
    set pTooltipText(text) {
        this.text = text;
    }
}
TooltipAriaDirective.decorators = [
    { type: Directive, args: [{ selector: '[pTooltip-aria]' },] }
];
TooltipAriaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
TooltipAriaDirective.propDecorators = {
    pTooltipText: [{ type: Input, args: ['pTooltip-aria',] }]
};

function HttpLoaderFactory2(http) {
    return new TranslateHttpLoader(http, './portal-lib/assets/i18n/');
}
function StandardTranslateHttpLoader(http) {
    return new MultiTranslateHttpLoader(http, [
        { prefix: './assets/i18n/', suffix: '.json' },
        { prefix: './portal-lib/assets/i18n/', suffix: '.json' },
    ]);
}
const ɵ0$1 = tkitPortalInitializer;
class TkitPortalModule {
}
TkitPortalModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PortalViewportComponent,
                    ToolbarItemComponent,
                    AppMenuComponent,
                    AppSubMenuComponent,
                    HeaderComponent,
                    AppFooterComponent,
                    HelpEditDialogComponent,
                    BreadcrumbComponent,
                    AppInlineProfileComponent,
                    HttpProgressLoaderComponent,
                    PortalPageComponent,
                    PanelHeaderComponent,
                    CollapsibleDirective,
                    ActionDirective,
                    TooltipAriaDirective,
                    NoHelpInfoComponent,
                    PortalSearchPageComponent,
                    LoadingComponent,
                    TkIfPermDirective,
                    SearchBarComponent,
                    ResultTextComponent,
                    FeedbackComponent,
                    AddToLaunchpadComponent,
                    SupportTicketComponent,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    // KeycloakAngularModule,
                    // primeng
                    // TODO do not import all!!!
                    AutoCompleteModule,
                    BreadcrumbModule,
                    ButtonModule,
                    CalendarModule,
                    CardModule,
                    CheckboxModule,
                    ConfirmDialogModule,
                    DialogModule,
                    DynamicDialogModule,
                    DropdownModule,
                    InputSwitchModule,
                    InputTextModule,
                    InputTextareaModule,
                    MenuModule,
                    MessageModule,
                    MessagesModule,
                    OverlayPanelModule,
                    PanelModule,
                    PanelMenuModule,
                    RatingModule,
                    RippleModule,
                    ScrollPanelModule,
                    SkeletonModule,
                    TableModule,
                    ToastModule,
                    ToggleButtonModule,
                    TooltipModule,
                    // end primeng modules
                    HttpClientModule,
                    HttpCacheInterceptorModule.forRoot(),
                    TranslateModule,
                ],
                exports: [
                    FormsModule,
                    // reexport primeng
                    AutoCompleteModule,
                    BreadcrumbModule,
                    ButtonModule,
                    CalendarModule,
                    CardModule,
                    CheckboxModule,
                    ConfirmDialogModule,
                    DialogModule,
                    DynamicDialogModule,
                    DropdownModule,
                    InputSwitchModule,
                    InputTextModule,
                    InputTextareaModule,
                    MenuModule,
                    MessageModule,
                    MessagesModule,
                    OverlayPanelModule,
                    PaginatorModule,
                    PanelModule,
                    PanelMenuModule,
                    RatingModule,
                    RippleModule,
                    SelectButtonModule,
                    SkeletonModule,
                    TableModule,
                    ToastModule,
                    ToggleButtonModule,
                    TooltipModule,
                    // angular common
                    HttpClientModule,
                    HttpCacheInterceptorModule,
                    // our components
                    PortalViewportComponent,
                    PortalPageComponent,
                    PortalSearchPageComponent,
                    PanelHeaderComponent,
                    ToolbarItemComponent,
                    LoadingComponent,
                    CollapsibleDirective,
                    ActionDirective,
                    TooltipAriaDirective,
                    TkIfPermDirective,
                    ResultTextComponent,
                ],
                entryComponents: [NoHelpInfoComponent],
                providers: [
                    useHttpCacheLocalStorage,
                    DialogService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: HttpProgressInterceptor,
                        multi: true,
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: ɵ0$1,
                        multi: true,
                        deps: [ConfigurationService, TranslateService, AUTH_SERVICE],
                    },
                ],
            },] }
];

function provideParent(component, parentType) {
    return {
        provide: parentType || PortalSearchPage,
        useExisting: forwardRef(() => component)
    };
}

/*
 * Public API Surface of portal-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { APP_CONFIG, AUTH_SERVICE, ActionDirective, AuthModule, BreadcrumbService, CollapsibleDirective, ConfigurationService, DEFAULT_AVATAR_URL, HttpLoaderFactory2, LoadingComponent, MockAuthModule, PanelHeaderComponent, PhoneType, PortalPageComponent, PortalSearchPage, PortalSearchPageComponent, PortalViewportComponent, ResultTextComponent, StandardTranslateHttpLoader, StateService, TkIfPermDirective, TkitPortalModule, ToolbarItemComponent, TooltipAriaDirective, UserProfileService, initializer, isTkitPage, provideParent, ɵ0$1 as ɵ0, MockAuthService as ɵa, KeycloakAuthService as ɵb, SupportTicketComponent as ɵba, HttpProgressInterceptor as ɵbb, tkitPortalInitializer as ɵbc, PortalApiService as ɵc, HelpPageAPIService as ɵd, ThemeService as ɵe, MenuService as ɵf, MenuApiService as ɵg, FeedbackApiService as ɵh, SupportTicketApiService as ɵi, AppMenuComponent as ɵj, AppSubMenuComponent as ɵk, HeaderComponent as ɵl, AppFooterComponent as ɵm, HelpEditDialogComponent as ɵn, BreadcrumbComponent as ɵo, AppInlineProfileComponent as ɵp, HttpProgressLoaderComponent as ɵq, HttpProgressLoaderService as ɵr, NoHelpInfoComponent as ɵs, SearchTemplateAPIService as ɵt, SearchBarComponent as ɵu, PortalItemService as ɵv, FeedbackComponent as ɵw, AddToLaunchpadComponent as ɵx, IconsService as ɵy, LaunchpadService as ɵz };
//# sourceMappingURL=portal-lib.js.map
