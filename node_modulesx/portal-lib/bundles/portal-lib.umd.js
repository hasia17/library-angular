(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('keycloak-angular'), require('@angular/common/http'), require('@ngneat/cashew'), require('rxjs/operators'), require('@angular/router'), require('@angular/forms'), require('@ngx-translate/core'), require('@ngx-translate/http-loader'), require('primeng/button'), require('primeng/calendar'), require('primeng/card'), require('primeng/checkbox'), require('primeng/confirmdialog'), require('primeng/dialog'), require('primeng/dropdown'), require('primeng/dynamicdialog'), require('primeng/inputswitch'), require('primeng/inputtext'), require('primeng/inputtextarea'), require('primeng/menu'), require('primeng/message'), require('primeng/messages'), require('primeng/overlaypanel'), require('primeng/paginator'), require('primeng/panel'), require('primeng/panelmenu'), require('primeng/scrollpanel'), require('primeng/selectbutton'), require('primeng/table'), require('primeng/toast'), require('primeng/togglebutton'), require('primeng/tooltip'), require('primeng/autocomplete'), require('primeng/rating'), require('primeng/ripple'), require('primeng/skeleton'), require('primeng/breadcrumb'), require('@angular/animations'), require('primeng/dynamicdialog/'), require('primeng/api'), require('@angular/cdk/layout'), require('ngx-translate-multi-http-loader')) :
    typeof define === 'function' && define.amd ? define('portal-lib', ['exports', '@angular/core', 'rxjs', '@angular/common', 'keycloak-angular', '@angular/common/http', '@ngneat/cashew', 'rxjs/operators', '@angular/router', '@angular/forms', '@ngx-translate/core', '@ngx-translate/http-loader', 'primeng/button', 'primeng/calendar', 'primeng/card', 'primeng/checkbox', 'primeng/confirmdialog', 'primeng/dialog', 'primeng/dropdown', 'primeng/dynamicdialog', 'primeng/inputswitch', 'primeng/inputtext', 'primeng/inputtextarea', 'primeng/menu', 'primeng/message', 'primeng/messages', 'primeng/overlaypanel', 'primeng/paginator', 'primeng/panel', 'primeng/panelmenu', 'primeng/scrollpanel', 'primeng/selectbutton', 'primeng/table', 'primeng/toast', 'primeng/togglebutton', 'primeng/tooltip', 'primeng/autocomplete', 'primeng/rating', 'primeng/ripple', 'primeng/skeleton', 'primeng/breadcrumb', '@angular/animations', 'primeng/dynamicdialog/', 'primeng/api', '@angular/cdk/layout', 'ngx-translate-multi-http-loader'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['portal-lib'] = {}, global.ng.core, global.rxjs, global.ng.common, global.keycloakAngular, global.ng.common.http, global.cashew, global.rxjs.operators, global.ng.router, global.ng.forms, global.core, global.httpLoader, global.button, global.calendar, global.card, global.checkbox, global.confirmdialog, global.dialog, global.dropdown, global.dynamicdialog, global.inputswitch, global.inputtext, global.inputtextarea, global.menu, global.message, global.messages, global.overlaypanel, global.paginator, global.panel, global.panelmenu, global.scrollpanel, global.selectbutton, global.table, global.toast, global.togglebutton, global.tooltip, global.autocomplete, global.rating, global.ripple, global.skeleton, global.breadcrumb, global.ng.animations, global._, global.i2, global.ng.cdk.layout, global.ngxTranslateMultiHttpLoader));
}(this, (function (exports, i0, rxjs, common, keycloakAngular, i1, cashew, operators, router, forms, core, httpLoader, button, calendar, card, checkbox, confirmdialog, dialog, dropdown, dynamicdialog, inputswitch, inputtext, inputtextarea, menu, message, messages, overlaypanel, paginator, panel, panelmenu, scrollpanel, selectbutton, table, toast, togglebutton, tooltip, autocomplete, rating, ripple, skeleton, breadcrumb, animations, _, i2, layout, ngxTranslateMultiHttpLoader) { 'use strict';

    var APP_CONFIG = new i0.InjectionToken('APP_CONFIG');
    var AUTH_SERVICE = new i0.InjectionToken('AUTH_SERVICE');

    var MockAuthService = /** @class */ (function () {
        function MockAuthService() {
            this.mockUser = {
                person: {
                    displayName: 'Max Musterman',
                    firstName: 'Max',
                    lastName: 'Mustermann',
                    email: 'max.mustermann@capgemini.com'
                },
                accountSettings: {
                    localeAndTimeSettings: { locale: 'de', timezone: 'GMT' },
                    notificationSettings: {},
                    preferences: [],
                    privacySettings: {}
                },
                id: 'ID_MOCK_USER',
                identityProvider: 'MOCK_TKIT_PORTAL_LIB',
                identityProviderId: 'MOCK_ID',
                roles: ['user', 'admin'],
                memberships: [
                    {
                        application: 'APP1',
                        roleMemberships: [
                            {
                                role: 'user',
                                permissions: [
                                    {
                                        action: 'EDIT',
                                        resource: 'ITEM',
                                        name: 'Edit item',
                                        key: 'ITEM#EDIT'
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };
        }
        MockAuthService.prototype.currentUser = function () {
            return this.mockUser;
        };
        MockAuthService.prototype.getAvatar = function () {
            return rxjs.of(this.mockUser.avatar);
        };
        MockAuthService.prototype.init = function () {
            return new Promise(function (resolve, reject) { return resolve(true); });
        };
        MockAuthService.prototype.hasPermission = function (permissionKey) {
            return true;
        };
        MockAuthService.prototype.logout = function () {
            throw new Error('Method not implemented.');
        };
        MockAuthService.prototype.getAuthProviderName = function () {
            return 'MOCK_TKIT_PORTAL_LIB';
        };
        MockAuthService.prototype.hasRole = function (role) {
            return true;
        };
        MockAuthService.prototype.getRoles = function () {
            return ['tkit-portal-admin'];
        };
        return MockAuthService;
    }());
    MockAuthService.decorators = [
        { type: i0.Injectable }
    ];
    MockAuthService.ctorParameters = function () { return []; };

    function initializer(authService) {
        console.log("Start Mock auth initializer");
        return function () { return authService.init().then(function (res) {
            console.log("mock auth app_initializer resolved " + res);
            return res;
        }); };
    }
    /**
     * Mock auth module providing mocked user profile and authnetication. For dev use only.
     */
    var MockAuthModule = /** @class */ (function () {
        function MockAuthModule() {
        }
        return MockAuthModule;
    }());
    MockAuthModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [],
                    declarations: [],
                    providers: [
                        {
                            provide: AUTH_SERVICE,
                            useClass: MockAuthService,
                        },
                        {
                            provide: i0.APP_INITIALIZER,
                            useFactory: initializer,
                            multi: true,
                            deps: [AUTH_SERVICE],
                        },
                    ],
                },] }
    ];

    var PortalApiService = /** @class */ (function () {
        function PortalApiService(httpClient) {
            this.httpClient = httpClient;
            this.baseUrl = "./portal-api/v1/portals";
        }
        PortalApiService.prototype.getPortalData = function (portal) {
            return this.httpClient.get(this.baseUrl + "/" + portal, cashew.withCache());
        };
        return PortalApiService;
    }());
    PortalApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PortalApiService_Factory() { return new PortalApiService(i0.ɵɵinject(i1.HttpClient)); }, token: PortalApiService, providedIn: "root" });
    PortalApiService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: "root" },] }
    ];
    PortalApiService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var TKIT_PORTAL_ID = 'TKIT_PORTAL_ID';
    var ConfigurationService = /** @class */ (function () {
        function ConfigurationService(http, portalService, appConfig) {
            this.http = http;
            this.portalService = portalService;
            this.appConfig = appConfig;
            this.lang$ = new rxjs.ReplaySubject(1);
        }
        ConfigurationService.prototype.init = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this.appConfig.skipRemoteConfigLoad) {
                    console.log('TKA001: Remote config load is disabled. To enable it, remove the "skipRemoteConfigLoad" key in your environemnt.json');
                    _this.customEnv = _this.appConfig;
                    resolve(false);
                }
                var loadConfigPromise;
                // if we have Backend env vars injected in HTML, use it
                console.log("ENV resolved " + window['APP_CONFIG']);
                if (window['APP_CONFIG']) {
                    loadConfigPromise = new Promise(function (resolve, reject) {
                        resolve(window['APP_CONFIG']);
                    });
                }
                else {
                    console.log('noooo moar http');
                    //otherwise fetch them from env.json
                    loadConfigPromise = _this.http.get(_this.appConfig.remoteConfigURL || 'assets/env.json').toPromise();
                }
                loadConfigPromise
                    .then(function (config) {
                    if (config) {
                        var sanitizedEnvValues = _this.sanitizeConfig(config);
                        _this.customEnv = Object.assign(Object.assign({}, _this.appConfig), sanitizedEnvValues);
                    }
                })
                    .then(function () {
                    var portalId = _this.customEnv[TKIT_PORTAL_ID] || 'PORTAL';
                    _this.portalService
                        .getPortalData(portalId)
                        .toPromise()
                        .then(function (data) {
                        if (data) {
                            _this.portalData = data;
                        }
                        resolve(true);
                    })
                        .catch(function (err) {
                        console.log("Failed to load portal data! " + JSON.stringify(err));
                        _this.portalData = { portalId: 'PORTAL' };
                        resolve(true);
                    });
                })
                    .catch(function (e) {
                    console.log("Failed to load env configuration");
                    reject(e);
                });
            });
        };
        ConfigurationService.prototype.sanitizeConfig = function (config) {
            return (Object.keys(config)
                // only take values that are interpolated/set
                .filter(function (key) { return !config[key].startsWith('${'); })
                .reduce(function (obj, key) {
                obj[key] = config[key];
                return obj;
            }, {}));
        };
        ConfigurationService.prototype.getProperty = function (key) {
            return this.customEnv[key];
        };
        ConfigurationService.prototype.getPortalData = function () {
            return this.portalData;
        };
        ConfigurationService.prototype.setLang = function (lang) {
            console.log('[CONFIG SERVICE] SETTING LANG: ', lang);
            this.lang$.next(lang);
        };
        return ConfigurationService;
    }());
    ConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(PortalApiService), i0.ɵɵinject(APP_CONFIG)); }, token: ConfigurationService, providedIn: "root" });
    ConfigurationService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConfigurationService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: PortalApiService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [APP_CONFIG,] }] }
    ]; };

    var UserProfileService = /** @class */ (function () {
        function UserProfileService(http) {
            this.http = http;
            this.url = './portal-api/v1/userProfile/me';
            this.personUrl = './portal-api/v1/userProfile/me/userPerson';
            this.avatarUrl = './portal-api/v1/userProfile/me/avatar';
            this.settingsUrl = './portal-api/v1/userProfile/me/settings';
            this.changePasswordUrl = './portal-api/v1/userProfile/me/change-password';
            this.refreshProfile$ = new rxjs.ReplaySubject(1);
            this.currentAvatar$ = new rxjs.ReplaySubject(1);
            this.currentUser$ = this.refreshProfile$.pipe(operators.switchMapTo(this.http.get(this.url)), operators.shareReplay(1));
        }
        UserProfileService.prototype.getCurrentUser = function () {
            return this.currentUser$;
        };
        UserProfileService.prototype.getUpdatedAvatar = function () {
            return this.currentAvatar$;
        };
        UserProfileService.prototype.updatePersonalInfo = function (person) {
            return this.http.put(this.personUrl, person);
            // .pipe(tap(() => this.refreshProfile()));
        };
        UserProfileService.prototype.setUserAvatar = function (file) {
            var _this = this;
            var formData = new FormData();
            formData.append('file', file);
            return this.http.put(this.avatarUrl, formData).pipe(operators.tap(function (avatar) { return _this.currentAvatar$.next(avatar); }));
        };
        UserProfileService.prototype.removeAvatar = function () {
            var _this = this;
            return this.http.delete(this.avatarUrl).pipe(operators.tap(function () { return _this.currentAvatar$.next(null); }));
        };
        UserProfileService.prototype.updateUserSettings = function (settings) {
            return this.http.patch(this.settingsUrl, settings);
        };
        UserProfileService.prototype.refreshProfile = function () {
            this.refreshProfile$.next();
        };
        UserProfileService.prototype.getUserSettings = function () {
            return this.http.get(this.settingsUrl);
        };
        UserProfileService.prototype.getCurrentUserFromBE = function () {
            return this.http.get(this.url);
        };
        UserProfileService.prototype.changeUserPassword = function (resetPasswordDTO) {
            return this.http.put(this.changePasswordUrl, resetPasswordDTO);
        };
        return UserProfileService;
    }());
    UserProfileService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserProfileService_Factory() { return new UserProfileService(i0.ɵɵinject(i1.HttpClient)); }, token: UserProfileService, providedIn: "root" });
    UserProfileService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    UserProfileService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var DEFAULT_AVATAR_URL = 'portal-lib/assets/images/default_avatar.png';
    var CONFIG_KEY_TKIT_PORTAL_DEFAULT_THEME = "TKIT_PORTAL_DEFAULT_THEME";
    var CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT = "TKIT_PORTAL_DISABLE_THEME_MANAGEMENT";
    var CONFIG_KEY_TKIT_PORTAL_THEME_SERVER_URL = "TKIT_PORTAL_THEME_SERVER_URL";
    var CONFIG_KEY_TKIT_TOKEN_ROLE_CLAIM_NAME = "TKIT_TOKEN_ROLE_CLAIM_NAME";
    var CONFIG_KEY_TKIT_PORTAL_ID = "TKIT_PORTAL_ID";
    var CONFIG_KEY_TKIT_SUPPORTED_LANGUAGES = "TKIT_SUPPORTED_LANGUAGES";
    var CONFIG_KEY_TKIT_SEARCH_BASE_URL = "TKIT_SEARCH_BASE_URL";
    var CONFIG_KEY_APP_BASE_HREF = "APP_BASE_HREF";
    var CONFIG_KEY_KEYCLOAK_REALM = "KEYCLOAK_REALM";
    var CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO = "KEYCLOAK_ENABLE_SILENT_SSO";
    var CONFIG_KEY_KEYCLOAK_URL = "KEYCLOAK_URL";
    var CONFIG_KEY_KEYCLOAK_CLIENT_ID = "KEYCLOAK_CLIENT_ID";

    var KC_REFRESH_TOKEN_LS = 'kc_refreshToken';
    var KC_ID_TOKEN_LS = 'kc_idToken';
    var KC_TOKEN_LS = 'kc_token';
    var TKIT_USER_PROFILE_LS = 'tkit_user_profile';
    var KeycloakAuthService = /** @class */ (function () {
        function KeycloakAuthService(keycloakService, configService, userProfileService, router) {
            this.keycloakService = keycloakService;
            this.configService = configService;
            this.userProfileService = userProfileService;
            this.router = router;
            this.user = {
                userId: 'anonymous',
                userPerson: { firstName: 'Guest' },
                functions: [],
                roles: [],
            };
        }
        KeycloakAuthService.prototype.hasPermission = function (permissionKey) {
            return this.user.functions ? this.user.functions.includes(permissionKey) : false;
        };
        KeycloakAuthService.prototype.currentUser = function () {
            return this.userProfile;
        };
        KeycloakAuthService.prototype.logout = function () {
            this.clearKCStateFromLocalstorage();
            this.keycloakService.logout();
        };
        KeycloakAuthService.prototype.getAuthProviderName = function () {
            return 'Keycloak based Security';
        };
        KeycloakAuthService.prototype.init = function () {
            var _this = this;
            console.log('Keycloak Auth initialization');
            // load previous tokens, saved after successful login of keycloak success callback
            var token = localStorage.getItem(KC_TOKEN_LS);
            var idToken = localStorage.getItem(KC_ID_TOKEN_LS);
            var refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
            if (token) {
                var parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
                console.log("Got tokens in LC " + parsedToken.exp + " " + parsedToken.sub);
                if (parsedToken.exp * 1000 < new Date().getTime()) {
                    //refresh expired, drop everything
                    console.log("Refresh token expired");
                    token = undefined;
                    refreshToken = undefined;
                    idToken = undefined;
                    this.clearKCStateFromLocalstorage();
                }
            }
            this.setupEventListener();
            // try constructing the KC config from values in env
            var kcConfig = {
                url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
                clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
                realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
            };
            // If any of the required props is missing, fallback to loading KC conf from file
            if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
                kcConfig = './assets/keycloak.json';
            }
            var enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
            var kcOptions = {
                loadUserProfileAtStartUp: false,
                config: kcConfig,
                initOptions: {
                    // onLoad: "login-required",
                    onLoad: 'check-sso',
                    checkLoginIframe: false,
                    silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                    idToken: idToken,
                    refreshToken: refreshToken,
                    token: token,
                },
                enableBearerInterceptor: true,
                bearerExcludedUrls: ['/assets'],
            };
            // console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`)
            return this.keycloakService
                .init(kcOptions)
                .catch(function (err) {
                console.log("kc err " + err + ", try force login");
                return _this.keycloakService.login();
            })
                .then(function (loginOk) {
                // this will be false if our silent login did not work
                console.log("Keycloak init done, loginOk?: " + loginOk);
                if (loginOk) {
                    return _this.keycloakService.getToken();
                }
                else {
                    // we want to block bootstrap process now
                    return _this.keycloakService.login().then(function () { return 'login'; });
                }
            })
                .then(function (tokenString) {
                var parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
                console.log("fetching profile " + JSON.stringify(parsedToken));
                var profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS) &&
                    JSON.parse(localStorage.getItem(TKIT_USER_PROFILE_LS));
                if (profileFromCache) {
                    //if we have already a profile in LS, check if it is the smae user
                    if (profileFromCache.person.email === parsedToken['email']) {
                        //same user, take from LS and load async to refresh
                        _this.refreshProfile();
                        console.log("load user profile from cache(and reloading asynchronously)");
                        return profileFromCache;
                    }
                    else {
                        console.log("User profile in LS does not match Keycloak token");
                        localStorage.removeItem(TKIT_USER_PROFILE_LS);
                    }
                }
                console.log("load user profile from API");
                return _this.userProfileService.getCurrentUserFromBE().toPromise();
            })
                .then(function (userProfile) {
                // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
                console.log("Got user profile, update state");
                // this.updateUserFromKeycloak(results[0], parsedToken);
                _this.userProfile = userProfile;
                _this.avatarSubject = new rxjs.ReplaySubject(1);
                _this.handleAvatarUpdate(_this.userProfile.avatar);
                _this.userProfileService.getUpdatedAvatar().subscribe(function (avatar) { return _this.handleAvatarUpdate(avatar); });
                _this.updateUserFromUserProfile(_this.userProfile);
                localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
                console.log("Keycloak auth init complete");
                return true;
            })
                .catch(function (err) {
                console.log("KC ERROR " + err + " as json " + JSON.stringify(err));
                throw err;
            });
        };
        KeycloakAuthService.prototype.init2 = function () {
            var _this = this;
            console.log('kc init 4');
            // load previous tokens, saved after successful login of keycloak success callback
            var token = localStorage.getItem(KC_TOKEN_LS);
            var idToken = localStorage.getItem(KC_ID_TOKEN_LS);
            var refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
            if (token) {
                var parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
                if (parsedToken.exp * 1000 < new Date().getTime()) {
                    //refresh expired, drop everything
                    console.log("Refresh token expired");
                    token = undefined;
                    refreshToken = undefined;
                    idToken = undefined;
                    this.clearKCStateFromLocalstorage();
                }
            }
            this.setupEventListener();
            // try constructing the KC config from values in env
            var kcConfig = {
                url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
                clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
                realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
            };
            // If any of the required props is missing, fallback to loading KC conf from file
            if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
                kcConfig = './assets/keycloak.json';
            }
            var enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
            var kcOptions = {
                loadUserProfileAtStartUp: false,
                config: kcConfig,
                initOptions: {
                    // onLoad: "login-required",
                    onLoad: 'check-sso',
                    checkLoginIframe: false,
                    silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                    idToken: idToken,
                    refreshToken: refreshToken,
                    token: token,
                },
                enableBearerInterceptor: true,
                bearerExcludedUrls: ['/assets'],
            };
            console.log("INit KC with " + JSON.stringify(kcOptions, null, 2));
            return (this.keycloakService
                .init(kcOptions)
                .catch(function (err) {
                console.log("kc err " + err + ", try force login");
                return _this.keycloakService.login();
            })
                .then(function (ok) {
                console.log("After KC init " + ok);
                return _this.keycloakService.getToken();
            })
                .then(function (tokenString) {
                if (tokenString) {
                    var parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
                    console.log('fetching profile');
                    var profileFromCache = void 0;
                    if ((profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS))) {
                        console.log("load user profile from cache");
                        //if we have already a profile in LS, check if it is the smae user
                        if (profileFromCache['email'] === parsedToken['email']) {
                            //same user, take from LS and load async to refresh
                            _this.refreshProfile();
                            return JSON.parse(profileFromCache);
                        }
                        else {
                            console.log("USer in LS does tno match. clear");
                            localStorage.removeItem(TKIT_USER_PROFILE_LS);
                        }
                    }
                    console.log("load user profile from API");
                    return _this.userProfileService.getCurrentUserFromBE().toPromise();
                }
                else {
                    console.log("no TOKEN AAAAA");
                }
            })
                // .then(ok => {
                //   // return Promise.all([
                //   //   this.keycloakService.loadUserProfile(),
                //   //   this.keycloakService.getToken(),
                //   //   this.userProfileService.getCurrentUserFromBE().toPromise()
                //   // ]);
                // })
                .catch(function (err) {
                console.log("KC ERROR " + err);
                throw err;
            })
                .then(function (userProfile) {
                // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
                console.log("Got user profile, update");
                // this.updateUserFromKeycloak(results[0], parsedToken);
                _this.userProfile = userProfile;
                _this.avatarSubject = new rxjs.ReplaySubject(1);
                _this.handleAvatarUpdate(_this.userProfile.avatar);
                _this.userProfileService.getUpdatedAvatar().subscribe(function (avatar) { return _this.handleAvatarUpdate(avatar); });
                _this.updateUserFromUserProfile(_this.userProfile);
                localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
                console.log("KC init complete returnint");
                return true;
            }));
        };
        KeycloakAuthService.prototype.setupEventListener = function () {
            var _this = this;
            this.keycloakService.keycloakEvents$.subscribe(function (ke) {
                // console.log(
                //   `KC Event ${ke.type} token: ${
                //     this.keycloakService.getKeycloakInstance().token
                //   }`
                // );
                // we are logged in, get tokens and store them in localstorage
                if (_this.keycloakService.getKeycloakInstance().token) {
                    localStorage.setItem(KC_TOKEN_LS, _this.keycloakService.getKeycloakInstance().token);
                }
                else {
                    localStorage.removeItem(KC_TOKEN_LS);
                }
                if (_this.keycloakService.getKeycloakInstance().idToken) {
                    localStorage.setItem(KC_ID_TOKEN_LS, _this.keycloakService.getKeycloakInstance().idToken);
                }
                else {
                    localStorage.removeItem(KC_ID_TOKEN_LS);
                }
                if (_this.keycloakService.getKeycloakInstance().refreshToken) {
                    localStorage.setItem(KC_REFRESH_TOKEN_LS, _this.keycloakService.getKeycloakInstance().refreshToken);
                }
                else {
                    localStorage.removeItem(KC_REFRESH_TOKEN_LS);
                }
                if (ke.type === keycloakAngular.KeycloakEventType.OnAuthLogout) {
                    console.log('SSO logout nav to root');
                    _this.clearKCStateFromLocalstorage();
                    _this.router.navigateByUrl('/');
                }
            });
        };
        KeycloakAuthService.prototype.clearKCStateFromLocalstorage = function () {
            localStorage.removeItem(KC_ID_TOKEN_LS);
            localStorage.removeItem(KC_TOKEN_LS);
            localStorage.removeItem(KC_REFRESH_TOKEN_LS);
        };
        KeycloakAuthService.prototype.getSilentSSOUrl = function () {
            var currentBase = document.getElementsByTagName('base')[0].href;
            if (currentBase === '/') {
                currentBase = '';
            }
            return currentBase + "/assets/silent-check-sso.html";
        };
        KeycloakAuthService.prototype.hasRole = function (role) {
            if (typeof role === 'string') {
                var roleString = role;
                return this.user.roles.map(function (e) { return e.toUpperCase(); }).includes(roleString.toUpperCase());
            }
            else {
                return (this.user.roles
                    .map(function (e) { return e.toUpperCase(); })
                    .filter(function (item) { return role.map(function (e) { return e.toUpperCase(); }).includes(item.toUpperCase()); }).length > 0);
            }
        };
        KeycloakAuthService.prototype.getRoles = function () {
            return this.user.roles;
        };
        KeycloakAuthService.prototype.refreshProfile = function () {
            var _this = this;
            this.userProfileService.getCurrentUserFromBE().subscribe(function (profileData) {
                _this.userProfile = profileData;
                localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(profileData));
                _this.updateUserFromUserProfile(_this.userProfile);
            });
        };
        KeycloakAuthService.prototype.loadFullProfile = function () {
            return this.userProfileService.getCurrentUser();
        };
        KeycloakAuthService.prototype.handleAvatarUpdate = function (avatarInfo) {
            if ((avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarImageUrl) && (avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarSmallImageUrl)) {
                this.avatarSubject.next({
                    avatarImageUrl: 'portal-api' + avatarInfo.avatarImageUrl,
                    avatarSmallImageUrl: 'portal-api' + avatarInfo.avatarSmallImageUrl
                });
            }
            else {
                this.avatarSubject.next(null);
            }
        };
        KeycloakAuthService.prototype.getAvatar = function () {
            return this.avatarSubject.asObservable();
        };
        KeycloakAuthService.prototype.updateUserFromUserProfile = function (userProfile) {
            var _this = this;
            this.user = {
                roles: userProfile.roles,
                userId: userProfile.id,
                principalId: userProfile.id,
                commonName: userProfile.person.displayName,
                userPerson: Object.assign({}, userProfile.person),
                functions: [],
            };
            if (this.userProfile.memberships) {
                this.userProfile.memberships.forEach(function (m) {
                    m.roleMemberships.forEach(function (r) {
                        r.permissions.forEach(function (p) {
                            _this.user.functions.push(p.key);
                        });
                    });
                });
            }
        };
        return KeycloakAuthService;
    }());
    KeycloakAuthService.decorators = [
        { type: i0.Injectable }
    ];
    KeycloakAuthService.ctorParameters = function () { return [
        { type: keycloakAngular.KeycloakService },
        { type: ConfigurationService },
        { type: UserProfileService },
        { type: router.Router }
    ]; };

    var AuthModule = /** @class */ (function () {
        function AuthModule() {
        }
        return AuthModule;
    }());
    AuthModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [],
                    imports: [common.CommonModule, keycloakAngular.KeycloakAngularModule],
                    exports: [keycloakAngular.KeycloakAngularModule],
                    providers: [
                        {
                            provide: AUTH_SERVICE,
                            useClass: KeycloakAuthService
                        }
                    ]
                },] }
    ];

    /**
     * 1000kit internal api
     * API for portal
     *
     * OpenAPI spec version: v1
     *
     *
     * NOTE: This class is auto generated by the swagger code generator program.
     * https://github.com/swagger-api/swagger-codegen.git
     * Do not edit the class manually.
     */
    (function (PhoneType) {
        PhoneType["MOBILE"] = "MOBILE";
        PhoneType["LANDLINE"] = "LANDLINE";
    })(exports.PhoneType || (exports.PhoneType = {}));

    var BreadcrumbService = /** @class */ (function () {
        function BreadcrumbService() {
            this.itemsSource = new rxjs.Subject();
            this.itemsHandler = this.itemsSource.asObservable();
        }
        BreadcrumbService.prototype.setItems = function (items) {
            this.itemsSource.next(items);
        };
        return BreadcrumbService;
    }());
    BreadcrumbService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(); }, token: BreadcrumbService, providedIn: "root" });
    BreadcrumbService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    BreadcrumbService.ctorParameters = function () { return []; };

    var StateService = /** @class */ (function () {
        function StateService() {
        }
        StateService.prototype.getUserSettingsActivatedTab = function () {
            return this.userSettingsActivatedTab;
        };
        StateService.prototype.setUserSettingsActivatedTab = function (tab) {
            this.userSettingsActivatedTab = tab;
        };
        return StateService;
    }());
    StateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StateService_Factory() { return new StateService(); }, token: StateService, providedIn: "root" });
    StateService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: "root"
                },] }
    ];

    var ActionDirective = /** @class */ (function () {
        function ActionDirective(renderer, el, 
        // private templateRef: TemplateRef<any>,
        viewContainer, authService) {
            this.renderer = renderer;
            this.el = el;
            this.viewContainer = viewContainer;
            this.authService = authService;
        }
        ActionDirective.prototype.ngOnInit = function () {
            console.log("Action permission " + this.permission);
            if (!this.authService.hasPermission(this.permission)) {
                console.log("Disable btn because no perm " + this.permission);
                this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
                this.viewContainer.clear();
            }
        };
        return ActionDirective;
    }());
    ActionDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[tkAction]' },] }
    ];
    ActionDirective.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: i0.ViewContainerRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] }
    ]; };
    ActionDirective.propDecorators = {
        permission: [{ type: i0.Input }],
        loaderState: [{ type: i0.Input }]
    };

    var BreadcrumbComponent = /** @class */ (function () {
        function BreadcrumbComponent(breadcrumbService) {
            this.breadcrumbService = breadcrumbService;
            this.openHelpPage = new i0.EventEmitter();
            this.openHelpPageEditor = new i0.EventEmitter();
        }
        BreadcrumbComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.breadcrumbService.itemsHandler.subscribe(function (response) {
                _this.items = response;
            });
            this.home = { icon: 'pi pi-home', routerLink: '/' };
        };
        BreadcrumbComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        BreadcrumbComponent.prototype.onOpenHelpPageEditor = function (evt) {
            this.openHelpPageEditor.emit(evt);
        };
        BreadcrumbComponent.prototype.onOpenHelpPage = function (evt) {
            this.openHelpPage.emit(evt);
        };
        return BreadcrumbComponent;
    }());
    BreadcrumbComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-breadcrumb',
                    template: "<div *ngIf=\"disableBreadcrumbs\" class=\"header-breadcrumb\">\n  <ul>\n    <li>\n      <a class=\"home-icon\" routerLink=\"\">\n        <i class=\"pi pi-home\"></i>\n      </a>\n    </li>\n    <li></li>\n    <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n      <li>\n        <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{ item.label }}</a>\n        <ng-container *ngIf=\"!item.routerLink\">{{ item.label }}</ng-container>\n      </li>\n      <li *ngIf=\"!last\">/</li>\n    </ng-template>\n    <li>\n      <tk-http-progress-loader class=\"p-ml-2\"></tk-http-progress-loader>\n    </li>\n  </ul>\n</div>\n<div *ngIf=\"!disableBreadcrumbs\" class=\"layout-breadcrumb-container p-d-flex p-jc-between p-ai-center p-shadow-1\">\n  <p-breadcrumb [home]=\"home\" [model]=\"items\" styleClass=\"layout-breadcrumb p-pl-4 p-py-2\"></p-breadcrumb>\n  <div *ngIf=\"fullPortalLayout\" class=\"layout-breadcrumb-buttons p-d-flex p-ai-center p-pr-3\">\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n      (click)=\"onOpenHelpPage($event)\"\n      icon=\"pi pi-question-circle\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n      (click)=\"onOpenHelpPageEditor($event)\"\n      icon=\"pi pi-pencil\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n  </div>\n</div>\n",
                    styles: [".home-icon{margin-right:.3em}.home-icon i{font-size:28px}.header-breadcrumb{display:flex;flex-direction:row;font-size:large}.header-breadcrumb a i{vertical-align:middle;color:#fff}.header-breadcrumb ul{padding:0;list-style:none;display:inline-block}.header-breadcrumb ul li{display:inline-block;color:#fff;vertical-align:middle}.header-breadcrumb ul li:nth-child(2n){font-size:20px}"]
                },] }
    ];
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    BreadcrumbComponent.propDecorators = {
        disableBreadcrumbs: [{ type: i0.Input }],
        fullPortalLayout: [{ type: i0.Input }],
        openHelpPage: [{ type: i0.Output }],
        openHelpPageEditor: [{ type: i0.Output }]
    };

    var CollapsibleDirective = /** @class */ (function () {
        function CollapsibleDirective(el) {
            this.el = el;
            this.isCollapsed = true;
            this.collapsed = new i0.EventEmitter();
            this.expanded = new i0.EventEmitter();
            console.log("collapsible directive constructor " + el.nativeElement.classList);
            el.nativeElement.classList.add("collapsible");
        }
        CollapsibleDirective.prototype.toggle = function () {
            this.isCollapsed ? this.show() : this.hide();
        };
        CollapsibleDirective.prototype.show = function () {
            this.isCollapsed = false;
        };
        CollapsibleDirective.prototype.hide = function () {
            this.isCollapsed = true;
        };
        return CollapsibleDirective;
    }());
    CollapsibleDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: "[tkCollapsible]"
                },] }
    ];
    CollapsibleDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    CollapsibleDirective.propDecorators = {
        isCollapsed: [{ type: i0.Input }],
        collapsed: [{ type: i0.Output }],
        expanded: [{ type: i0.Output }]
    };

    var AppFooterComponent = /** @class */ (function () {
        function AppFooterComponent() {
        }
        return AppFooterComponent;
    }());
    AppFooterComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: "tk-footer",
                    template: "\n    <div \n      class=\"footer\"\n      id=\"footer\"\n      role=\"contentinfo\"\n    >\n      <span class=\"footer-left-segment\">\n        <a\n          *ngIf=\"homePortal.homePage; else withoutHref\"\n          [href]=\"homePortal.homePage\"\n        >\n          {{ homePortal.footerLabel }}\n        </a>\n        <ng-template #withoutHref>\n          <a>\n            {{ homePortal.footerLabel }}\n          </a>\n        </ng-template>\n        -\n        <span>&copy; All Rights Reserved</span>\n      </span>\n      <div class=\"footer-right-segment\">\n        <span class=\"links\" *ngFor=\"let link of homePortal.subjectLinks\">\n          <a [href]=\"link.url\">{{ link.label }}</a>\n        </span>\n      </div>\n    </div>\n  ",
                    styles: ["\n      .footer span {\n        vertical-align: middle;\n      }\n      .footer-right-segment a {\n        margin-left: 5px;\n        margin-right: 5px;\n      }\n      .footer-right-segment {\n        margin-right: 10px;\n        float: right;\n      }\n      .footer-left-segment {\n        margin-left: 15px;\n        float: left;\n      }\n      .footer-left-segment a {\n        color: #000000;\n      }\n    "]
                },] }
    ];
    AppFooterComponent.propDecorators = {
        homePortal: [{ type: i0.Input }]
    };

    var HelpEditDialogComponent = /** @class */ (function () {
        function HelpEditDialogComponent() {
            this.display = false;
            this.closed = new i0.EventEmitter();
        }
        HelpEditDialogComponent.prototype.ngOnInit = function () { };
        HelpEditDialogComponent.prototype.save = function () {
            this.closed.emit(true);
        };
        HelpEditDialogComponent.prototype.close = function (event) {
            this.closed.emit(false);
        };
        return HelpEditDialogComponent;
    }());
    HelpEditDialogComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-help-editor',
                    template: "\n    <p-dialog\n      header=\"Edit help item for this page\"\n      [contentStyle]=\"{ overflow: 'visible' }\"\n      [style]=\"{ width: '500px', 'max-height': '400px' }\"\n      [(visible)]=\"display\"\n      (onHide)=\"close($event)\"\n    >\n      <div class=\"modal-content\">\n        <form class=\"p-grid p-fluid\">\n          <div class=\"p-col-12\">\n            <span class=\"p-float-label\">\n              <input\n                id=\"page\"\n                type=\"text\"\n                pInputText\n                name=\"page\"\n                disabled=\"true\"\n                [(ngModel)]=\"helpItem.helpItemId\"\n              />\n              <label for=\"page\">Page Item</label>\n            </span>\n          </div>\n          <div class=\"p-col-12\">\n            <span class=\"p-float-label\">\n              <input\n                id=\"baseUrl\"\n                type=\"text\"\n                pInputText\n                name=\"baseUrl\"\n                [(ngModel)]=\"helpItem.baseUrl\"\n              />\n              <label for=\"baseUrl\">Base Url</label>\n            </span>\n          </div>\n          <div class=\"p-col-12\">\n            <span class=\"p-float-label\">\n              <input\n                id=\"relUrl\"\n                type=\"text\"\n                pInputText\n                name=\"relUrl\"\n                [(ngModel)]=\"helpItem.resourceUrl\"\n              />\n              <label for=\"relUrl\">Relative Url</label>\n            </span>\n          </div>\n        </form>\n      </div>\n      <p-footer>\n        <button\n          pButton\n          class=\"primary\"\n          value=\"Save\"\n          label=\"Save\"\n          icon=\"pi pi-check\"\n          (click)=\"save()\"\n        ></button>\n        <button\n          pButton\n          icon=\"pi pi-times\"\n          class=\"flat\"\n          value=\"Cancel\"\n          label=\"Cancel\"\n          (click)=\"display = false\"\n        ></button>\n      </p-footer>\n    </p-dialog>\n  "
                },] }
    ];
    HelpEditDialogComponent.ctorParameters = function () { return []; };
    HelpEditDialogComponent.propDecorators = {
        display: [{ type: i0.Input }],
        helpItem: [{ type: i0.Input }],
        closed: [{ type: i0.Output }]
    };

    var HttpProgressLoaderService = /** @class */ (function () {
        function HttpProgressLoaderService() {
            this.isLoading = new rxjs.BehaviorSubject(false);
        }
        return HttpProgressLoaderService;
    }());
    HttpProgressLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpProgressLoaderService_Factory() { return new HttpProgressLoaderService(); }, token: HttpProgressLoaderService, providedIn: "root" });
    HttpProgressLoaderService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    HttpProgressLoaderService.ctorParameters = function () { return []; };

    var HttpProgressLoaderComponent = /** @class */ (function () {
        function HttpProgressLoaderComponent(loaderService) {
            var _this = this;
            this.loaderService = loaderService;
            this.loaderService.isLoading.subscribe(function (v) {
                _this.loading = v;
            });
        }
        HttpProgressLoaderComponent.prototype.ngOnInit = function () { };
        return HttpProgressLoaderComponent;
    }());
    HttpProgressLoaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-http-progress-loader',
                    template: "\n    <div class=\"wrapper\" [ngClass]=\"{ noshow: !loading }\">\n      <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"50\" cy=\"50\" r=\"45\" />\n      </svg>\n    </div>\n  ",
                    styles: ["\n      :host {\n        display: block;\n        height: 36px;\n      }\n      .wrapper {\n        position: absolute;\n        opacity: 1;\n      }\n      .wrapper.noshow {\n        -webkit-transition: opacity 1s linear;\n        -moz-transition: opacity 1s linear;\n        -o-transition: opacity 1s linear;\n        transition: opacity 1s linear;\n        opacity: 0;\n      }\n      svg {\n        animation: 2s linear infinite svg-animation;\n        width: 36px;\n      }\n\n      .noshow svg {\n        animation: none;\n      }\n\n      @keyframes svg-animation {\n        0% {\n          transform: rotateZ(0deg);\n        }\n        100% {\n          transform: rotateZ(360deg);\n        }\n      }\n\n      circle {\n        animation: 1.4s ease-in-out infinite both circle-animation;\n        display: block;\n        fill: transparent;\n        stroke: #ffffff;\n        stroke-linecap: round;\n        stroke-dasharray: 283;\n        stroke-dashoffset: 280;\n        stroke-width: 10px;\n        transform-origin: 50% 50%;\n      }\n\n      @keyframes circle-animation {\n        0%,\n        25% {\n          stroke-dashoffset: 280;\n          transform: rotate(0);\n        }\n\n        50%,\n        75% {\n          stroke-dashoffset: 75;\n          transform: rotate(45deg);\n        }\n\n        100% {\n          stroke-dashoffset: 280;\n          transform: rotate(360deg);\n        }\n      }\n    "]
                },] }
    ];
    HttpProgressLoaderComponent.ctorParameters = function () { return [
        { type: HttpProgressLoaderService }
    ]; };

    var AppInlineProfileComponent = /** @class */ (function () {
        function AppInlineProfileComponent(authService, router, configService) {
            this.authService = authService;
            this.router = router;
            this.configService = configService;
            this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
            this.inlineMenuClick = new i0.EventEmitter();
        }
        Object.defineProperty(AppInlineProfileComponent.prototype, "displayName", {
            get: function () {
                var _a;
                var person = (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.person;
                if (person === null || person === void 0 ? void 0 : person.displayName) {
                    return person.displayName;
                }
                else if ((person === null || person === void 0 ? void 0 : person.firstName) && person.lastName) {
                    return person.firstName + ' ' + person.lastName;
                }
                else {
                    return this.authService.currentUser().userId;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppInlineProfileComponent.prototype, "baseUrl", {
            get: function () {
                return this.configService.getPortalData().baseUrl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppInlineProfileComponent.prototype, "tabIndex", {
            get: function () {
                return !this.inlineMenuActive ? '-1' : null;
            },
            enumerable: false,
            configurable: true
        });
        AppInlineProfileComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.userProfile = this.authService.currentUser();
            this.authService
                .getAvatar()
                .subscribe(function (avatar) { return (_this.userAvatar = avatar); });
        };
        AppInlineProfileComponent.prototype.onClick = function (event) {
            this.inlineMenuClick.emit(null);
            event.preventDefault();
        };
        AppInlineProfileComponent.prototype.logout = function (event) {
            event.preventDefault();
            this.authService.logout();
        };
        return AppInlineProfileComponent;
    }());
    AppInlineProfileComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-inline-profile',
                    template: "<div [ngClass]=\"{'layout-inline-menu': true, 'layout-inline-menu-active': inlineMenuActive}\">\n  <a class=\"layout-inline-menu-action p-d-flex p-dir-row p-ai-center p-p-3\" (click)=\"onClick($event)\">\n    <img [src]=\"userAvatar?.avatarSmallImageUrl || defaultAvatarUrl\" alt=\"avatar\" class=\"profile-image\" />\n    <span class=\"p-d-flex p-flex-column p-ml-2\">\n      <span class=\"p-text-bold\">{{ displayName }}</span>\n      <small>Portal User</small>\n    </span>\n    <i class=\"layout-inline-menu-icon pi pi-angle-down p-ml-auto\"></i>\n  </a>\n\n  <ul class=\"layout-inline-menu-action-panel\" [@menu]=\"inlineMenuActive ? 'visibleAnimated' : 'hiddenAnimated'\">\n    <li *tkIfPerm=\"'PROFILE#VIEW'\" class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/profile'\"\n        title=\"Manage your personal information and avatar\"\n      >\n        <i class=\"pi pi-user pi-fw\"></i>\n        <span>My Personal Info</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/settings'\"\n        title=\"Manage your preferences and settings\"\n      >\n        <i class=\"pi pi-cog pi-fw\"></i>\n        <span>My Settings</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/change-password'\"\n        title=\"Change your current password\"\n      >\n        <i class=\"pi pi-key pi-fw\"></i>\n        <span>Change Password</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/roles-and-perms'\"\n        title=\"Overview of your application roles and permissions\"\n      >\n        <i class=\"pi pi-unlock pi-fw\"></i>\n        <span>My Roles & Permissions</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a class=\"p-d-flex p-flex-row p-ai-center\" [attr.tabindex]=\"tabIndex\" href=\"#\" (click)=\"logout($event)\">\n        <i class=\"pi pi-power-off pi-fw\"></i>\n        <span>Logout</span>\n      </a>\n    </li>\n  </ul>\n</div>\n",
                    animations: [
                        animations.trigger('menu', [
                            animations.state('hiddenAnimated', animations.style({
                                height: '0px',
                                paddingBottom: '0px',
                                overflow: 'hidden'
                            })),
                            animations.state('visibleAnimated', animations.style({
                                height: '*',
                                overflow: 'visible'
                            })),
                            animations.state('visible', animations.style({
                                opacity: 1,
                                'z-index': 100
                            })),
                            animations.state('hidden', animations.style({
                                opacity: 0,
                                'z-index': '*'
                            })),
                            animations.transition('visibleAnimated => hiddenAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            animations.transition('hiddenAnimated => visibleAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            animations.transition('visible => hidden', animations.animate('.1s linear')),
                            animations.transition('hidden => visible', [animations.style({ transform: 'scaleY(0.8)' }), animations.animate('.12s cubic-bezier(0, 0, 0.2, 1)')])
                        ])
                    ],
                    styles: ["@-webkit-keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}@keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}.profile-content{-webkit-animation:opacityFadeIn .2s linear 0s 1;animation:opacityFadeIn .2s linear 0s 1}.profile-image{border-radius:50%;width:32px;height:32px}"]
                },] }
    ];
    AppInlineProfileComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] },
        { type: router.Router },
        { type: ConfigurationService }
    ]; };
    AppInlineProfileComponent.propDecorators = {
        inlineMenuActive: [{ type: i0.Input }],
        inlineMenuClick: [{ type: i0.Output }]
    };

    var LoadingComponent = /** @class */ (function () {
        function LoadingComponent() {
        }
        LoadingComponent.prototype.ngOnInit = function () { };
        return LoadingComponent;
    }());
    LoadingComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-loading',
                    template: "<div class=\"loading-panel\">\r\n  <span class=\"loader loader--style8\" title=\"7\">\r\n    <svg\r\n      version=\"1.1\"\r\n      id=\"Layer_1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      width=\"24px\"\r\n      height=\"30px\"\r\n      viewBox=\"0 0 24 30\"\r\n      style=\"enable-background:new 0 0 50 50;\"\r\n      xml:space=\"preserve\"\r\n    >\r\n      <rect\r\n        x=\"0\"\r\n        y=\"5.25098\"\r\n        width=\"4\"\r\n        height=\"19.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"8\"\r\n        y=\"7.75098\"\r\n        width=\"4\"\r\n        height=\"14.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"16\"\r\n        y=\"9.74902\"\r\n        width=\"4\"\r\n        height=\"10.502\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n    </svg>\r\n  </span>\r\n  <p>Loading...</p>\r\n</div>\r\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".loading-panel{padding:1em}"]
                },] }
    ];
    LoadingComponent.ctorParameters = function () { return []; };

    var NoHelpInfoComponent = /** @class */ (function () {
        function NoHelpInfoComponent(config, ref) {
            this.config = config;
            this.ref = ref;
            this.pageId = config.data.pageItem;
        }
        NoHelpInfoComponent.prototype.ngOnInit = function () { };
        NoHelpInfoComponent.prototype.close = function () {
            this.ref.close();
        };
        return NoHelpInfoComponent;
    }());
    NoHelpInfoComponent.decorators = [
        { type: i0.Component, args: [{
                    template: "\n    <div>\n      <div class=\"dialog-content\">\n        <span\n          >No help was found for this item. Please ask your system administrator\n          to add it. The context ID for this page is below:</span\n        >\n        <span class=\"code p-my-2\">{{ pageId }}</span>\n      </div>\n      <div class=\"dialog-footer\">\n        <div class=\"p-col p-fluid\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Close\"\n            (click)=\"close()\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n      .code {\n        display: block;\n        clear: both;\n        padding: 0.5em;\n        font-family: monospace;\n        background-color: #ececec;\n        border-radius: 4px;\n      }\n    "]
                },] }
    ];
    NoHelpInfoComponent.ctorParameters = function () { return [
        { type: _.DynamicDialogConfig },
        { type: _.DynamicDialogRef }
    ]; };

    var PanelHeaderComponent = /** @class */ (function () {
        function PanelHeaderComponent() {
        }
        PanelHeaderComponent.prototype.ngOnInit = function () { };
        return PanelHeaderComponent;
    }());
    PanelHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-panel-header',
                    template: "\n    <div class=\"panel-header\">\n      <div class=\"panel-toolbar-left\">\n        <ng-container\n          *ngTemplateOutlet=\"leftToolbar ? leftToolbar : defaultLeftToolbar\"\n        ></ng-container>\n      </div>\n      <h1 class=\"panel-heading\">{{ header }}</h1>\n      <div class=\"panel-toolbar-right\">\n        <ng-container\n          *ngTemplateOutlet=\"rightToolbar ? rightToolbar : defaultRightToolbar\"\n        ></ng-container>\n      </div>\n    </div>\n\n    <ng-template #defaultLeftToolbar> </ng-template>\n    <ng-template #defaultRightToolbar> </ng-template>\n  ",
                    styles: ["\n      .panel-header {\n        display: flex;\n      }\n      .panel-heading {\n        margin: 0px;\n        line-height: 30px;\n        font-weight: 100;\n      }\n      .panel-toolbar-right {\n        margin-left: auto;\n      }\n      .panel-toolbar-left,\n      .panel-toolbar-right {\n        display: flex;\n      }\n    "]
                },] }
    ];
    PanelHeaderComponent.ctorParameters = function () { return []; };
    PanelHeaderComponent.propDecorators = {
        header: [{ type: i0.Input }],
        leftToolbar: [{ type: i0.Input }],
        rightToolbar: [{ type: i0.Input }]
    };

    var HeaderComponent = /** @class */ (function () {
        function HeaderComponent(authService, config, stateService, router) {
            this.authService = authService;
            this.config = config;
            this.stateService = stateService;
            this.router = router;
            this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
            this.menuButtonClick = new i0.EventEmitter();
            this.topbarItemClick = new i0.EventEmitter();
            this.openHelpPage = new i0.EventEmitter();
            this.openHelpPageEditor = new i0.EventEmitter();
            this.openFeedback = new i0.EventEmitter();
            this.openAddToLaunchpad = new i0.EventEmitter();
            this.openSupportTicket = new i0.EventEmitter();
            this.searchClick = new i0.EventEmitter();
            this.homeNavUrl = '/';
            this.homeNavTitle = 'Home';
        }
        HeaderComponent.prototype.ngOnInit = function () {
            this.userProfile = this.authService.currentUser();
            this.userAvatar = this.authService.getAvatar();
            this.userDisplayName = this.authService.currentUser().person.displayName;
            this.searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
        };
        HeaderComponent.prototype.clickMenu = function () {
            console.log('Menu click');
            this.menuExpanded = !this.menuExpanded;
        };
        HeaderComponent.prototype.navigateTo = function (path, event) {
            event.preventDefault();
            path = this.config.getPortalData().baseUrl + path;
            location.assign(path);
        };
        HeaderComponent.prototype.logout = function (event) {
            event.preventDefault();
            this.authService.logout();
        };
        HeaderComponent.prototype.onMenuButtonClick = function (e) {
            this.menuButtonClick.emit(e);
        };
        HeaderComponent.prototype.onTopbarItemClick = function (e, arg) {
            this.topbarItemClick.emit({ event: e, arg: arg });
        };
        HeaderComponent.prototype.onOpenHelpPageEditor = function (e) {
            this.openHelpPageEditor.emit(e);
        };
        HeaderComponent.prototype.onOpenHelpPage = function (e) {
            this.openHelpPage.emit(e);
        };
        HeaderComponent.prototype.onOpenFeedback = function (e) {
            this.openFeedback.emit(e);
        };
        HeaderComponent.prototype.onAddToFavourites = function (e) {
            this.openAddToLaunchpad.emit(e);
        };
        HeaderComponent.prototype.onOpenSupportTicket = function (e) {
            this.openSupportTicket.emit(e);
        };
        HeaderComponent.prototype.onTopbarMobileButtonClick = function ($event) {
            this.mobileTopbarActive = !this.mobileTopbarActive;
            $event.preventDefault();
        };
        HeaderComponent.prototype.onSearchClick = function (e, val) {
            this.searchClick.emit({ event: e, val: val });
        };
        return HeaderComponent;
    }());
    HeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-header',
                    template: "<div class=\"layout-topbar p-shadow-4\" id=\"header\" role=\"banner\">\n  <div class=\"layout-topbar-left\">\n    <a class=\"layout-topbar-logo\" [href]=\"homeNavUrl\" [title]=\"homeNavTitle\">\n      <div class=\"logo\"></div>\n    </a>\n\n    <a *ngIf=\"fullPortalLayout\" class=\"layout-menu-button p-shadow-6\" (click)=\"onMenuButtonClick($event)\" pRipple [title]=\"menuButtonTitle\">\n      <i class=\"pi pi-chevron-right\"></i>\n    </a>\n\n    <a class=\"layout-topbar-mobile-button\" (click)=\"onTopbarMobileButtonClick($event)\" pRipple>\n      <i class=\"pi pi-ellipsis-v fs-large\"></i>\n    </a>\n  </div>\n\n  <div class=\"layout-topbar-right\" [ngClass]=\"{'layout-topbar-mobile-active': mobileTopbarActive}\">\n    <div class=\"layout-topbar-actions-left\">\n      <tk-breadcrumb\n        *ngIf=\"disableBreadcrumbs\"\n        [disableBreadcrumbs]=\"disableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        (openHelpPage)=\"onOpenHelpPage($event)\"\n        (openHelpPageEditor)=\"onOpenHelpPageEditor($event)\"\n      ></tk-breadcrumb>\n    </div>\n    <div class=\"layout-topbar-actions-right\" *ngIf=\"fullPortalLayout\">\n      <ul class=\"layout-topbar-items\">\n        <li class=\"layout-topbar-item\">\n          <a class=\"layout-topbar-action rounded-circle\" href=\"#\" title=\"Feedback\" (click)=\"onOpenFeedback($event)\">\n            <i class=\"pi pi-star-o fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Add to Favourites\"\n            (click)=\"onAddToFavourites($event)\"\n          >\n            <i class=\"pi pi-heart fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Support Ticket\"\n            (click)=\"onOpenSupportTicket($event)\"\n          >\n            <i class=\"pi pi-ticket fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item layout-search-item\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'search')\" pRipple>\n            <i class=\"pi pi-search fs-large\"></i>\n          </a>\n\n          <div class=\"layout-search-panel p-inputgroup\" [@topbarActionPanelAnimation]=\"'visible'\" *ngIf=\"search\">\n            <span class=\"p-inputgroup-addon\"><i class=\"pi pi-search\"></i></span>\n            <tk-search-bar (searchClick)=\"onSearchClick($event.event, $event.val)\"></tk-search-bar>\n            <span class=\"p-inputgroup-addon\">\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                icon=\"pi pi-times\"\n                class=\"p-button-rounded p-button-text p-button-plain\"\n                (click)=\"onSearchClick($event, false)\"\n              ></button>\n            </span>\n          </div>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n            (click)=\"onOpenHelpPage($event)\"\n          >\n            <i class=\"pi pi-question-circle fs-large\"></i>\n          </a>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n            (click)=\"onOpenHelpPageEditor($event)\"\n          >\n            <i class=\"pi pi-pencil fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item notifications\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'notifications')\" pRipple>\n            <i class=\"pi pi-bell fs-large\"></i>\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'notifications'\"\n          >\n            <li class=\"p-mb-3\">\n              <span class=\"p-px-3 fs-small\">Not implemented.</span>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <div class=\"p-d-flex p-flex-row p-ai-center\">\n                <p class=\"avatar-monogram\">MM</p>\n                <div class=\"p-d-flex p-flex-column p-ml-3\" style=\"flex-grow: 1;\">\n                  <div class=\"p-d-flex p-ai-center p-jc-between p-mb-1\">\n                    <span class=\"fs-small p-text-bold\">John Doe</span>\n                    <small>42 mins ago</small>\n                  </div>\n                  <span class=\"fs-small\">Notification example.</span>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action p-d-flex p-dir-row p-jc-center p-ai-center p-px-2 rounded-circle\"\n            pRipple\n            (click)=\"onTopbarItemClick($event, 'profile')\"\n          >\n            <img\n              [src]=\"(userAvatar | async)?.avatarSmallImageUrl || defaultAvatarUrl\"\n              alt=\"avatar\"\n              class=\"profile-image\"\n            />\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'profile'\"\n          >\n            <li class=\"layout-topbar-action-item\" *tkIfPerm=\"'PROFILE#VIEW'\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/profile', $event)\"\n                title=\"Manage your personal information and avatar\"\n              >\n                <i class=\"p-mr-2 pi pi-user\"></i>\n                <span>My Personal Info</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/settings', $event)\"\n                title=\"Manage your preferences and settings\"\n              >\n                <i class=\"p-mr-2 pi pi-cog\"></i>\n                <span>My Settings</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/change-password', $event)\"\n                title=\"Change your current password\"\n              >\n                <i class=\"p-mr-2 pi pi-key\"></i>\n                <span>Change Password</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/roles-and-perms', $event)\"\n                title=\"Overview of your application roles and permissions\"\n              >\n                <i class=\"p-mr-2 pi pi-unlock\"></i>\n                <span>My Roles & Permissions</span>\n              </a>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <a class=\"p-d-flex p-flex-row p-ai-center\" pRipple href=\"#\" (click)=\"logout($event)\">\n                <i class=\"p-mr-2 pi pi-power-off\"></i>\n                <span>Logout</span>\n              </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n",
                    animations: [
                        animations.trigger('topbarActionPanelAnimation', [
                            animations.transition(':enter', [
                                animations.style({ opacity: 0, transform: 'scaleY(0.8)' }),
                                animations.animate('.12s cubic-bezier(0, 0, 0.2, 1)', animations.style({ opacity: 1, transform: '*' })),
                            ]),
                            animations.transition(':leave', [animations.animate('.1s linear', animations.style({ opacity: 0 }))]),
                        ]),
                    ],
                    styles: [".avatar-monogram{margin:0;line-height:32px;background-color:#1e90ff;text-align:center;padding-top:1px;color:#fff}.avatar-monogram,.profile-image{width:32px;height:32px;border-radius:50%}.http-progress-loader{margin-left:8px;padding-top:5px}@media screen and (max-width:1024px){.http-progress-loader{margin-left:0;margin-right:8px}}"]
                },] }
    ];
    HeaderComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] },
        { type: ConfigurationService },
        { type: StateService },
        { type: router.Router }
    ]; };
    HeaderComponent.propDecorators = {
        searchInputViewChild: [{ type: i0.ViewChild, args: ['searchInput',] }],
        menuButtonTitle: [{ type: i0.Input }],
        menuButtonClick: [{ type: i0.Output }],
        topbarItemClick: [{ type: i0.Output }],
        openHelpPage: [{ type: i0.Output }],
        openHelpPageEditor: [{ type: i0.Output }],
        openFeedback: [{ type: i0.Output }],
        openAddToLaunchpad: [{ type: i0.Output }],
        openSupportTicket: [{ type: i0.Output }],
        searchClick: [{ type: i0.Output }],
        profileMode: [{ type: i0.Input }],
        isHorizontal: [{ type: i0.Input }],
        activeTopbarItem: [{ type: i0.Input }],
        disableBreadcrumbs: [{ type: i0.Input }],
        fullPortalLayout: [{ type: i0.Input }],
        search: [{ type: i0.Input }],
        homeNavUrl: [{ type: i0.Input }],
        homeNavTitle: [{ type: i0.Input }]
    };

    var MenuService = /** @class */ (function () {
        function MenuService() {
            this.menuSource = new rxjs.Subject();
            this.resetSource = new rxjs.Subject();
            this.menuSource$ = this.menuSource.asObservable();
            this.resetSource$ = this.resetSource.asObservable();
        }
        MenuService.prototype.onMenuStateChange = function (key) {
            this.menuSource.next(key);
        };
        MenuService.prototype.reset = function () {
            this.resetSource.next();
        };
        return MenuService;
    }());
    MenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MenuService_Factory() { return new MenuService(); }, token: MenuService, providedIn: "root" });
    MenuService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];

    var AppMenuComponent = /** @class */ (function () {
        function AppMenuComponent() {
            this.menuActiveChange = new i0.EventEmitter();
            this.mobileMenuActiveChange = new i0.EventEmitter();
        }
        Object.defineProperty(AppMenuComponent.prototype, "portalMenu", {
            set: function (items) {
                this.menuWithRoot = {
                    label: 'Menu',
                    icon: 'list',
                    items: items
                };
            },
            enumerable: false,
            configurable: true
        });
        return AppMenuComponent;
    }());
    AppMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-menu',
                    template: "<ul class=\"layout-menu\" id=\"nav\" role=\"navigation\">\n  <li\n    tk-submenu\n    [item]=\"menuWithRoot\"\n    [index]=\"0\"\n    root=\"true\"\n    visible=\"true\"\n    [(menuActive)]=\"menuActive\"\n    [(mobileMenuActive)]=\"mobileMenuActive\"\n    [isStatic]=\"isStatic\"\n    [isSlim]=\"isSlim\"\n    [isHorizontal]=\"isHorizontal\"\n    [isMobile]=\"isMobile\"\n    [isDesktop]=\"isDesktop\"\n    [menuHoverActive]=\"menuHoverActive\"\n  ></li>\n</ul>\n"
                },] }
    ];
    AppMenuComponent.ctorParameters = function () { return []; };
    AppMenuComponent.propDecorators = {
        menuActive: [{ type: i0.Input }],
        isStatic: [{ type: i0.Input }],
        isHorizontal: [{ type: i0.Input }],
        isMobile: [{ type: i0.Input }],
        isDesktop: [{ type: i0.Input }],
        isSlim: [{ type: i0.Input }],
        menuHoverActive: [{ type: i0.Input }],
        mobileMenuActive: [{ type: i0.Input }],
        portalMenu: [{ type: i0.Input }],
        menuActiveChange: [{ type: i0.Output }],
        mobileMenuActiveChange: [{ type: i0.Output }]
    };
    var AppSubMenuComponent = /** @class */ (function () {
        function AppSubMenuComponent(menuService, router) {
            this.menuService = menuService;
            this.router = router;
            this.menuActiveChange = new i0.EventEmitter();
            this.mobileMenuActiveChange = new i0.EventEmitter();
            this.active = false;
        }
        AppSubMenuComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.menuSourceSubscription = this.menuService.menuSource$.subscribe(function (key) {
                // deactivate current active menu
                if (_this.active && _this.key !== key && key.indexOf(_this.key) !== 0) {
                    _this.active = false;
                }
            });
            this.menuResetSubscription = this.menuService.resetSource$.subscribe(function () {
                _this.active = false;
            });
            // TODO Ultima11: Verify if this logic works with our setup
            this.router.events.pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }))
                .subscribe(function (params) {
                if (_this.isSlim) {
                    _this.active = false;
                }
                else {
                    if (_this.item.routerLink) {
                        _this.updateActiveStateFromRoute();
                    }
                    else {
                        _this.active = false;
                    }
                }
            });
            if ((this.isHorizontal || this.isSlim) && this.item.routerLink) {
                this.updateActiveStateFromRoute();
            }
            this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);
        };
        AppSubMenuComponent.prototype.ngOnDestroy = function () {
            if (this.menuSourceSubscription) {
                this.menuSourceSubscription.unsubscribe();
            }
            if (this.menuResetSubscription) {
                this.menuResetSubscription.unsubscribe();
            }
        };
        AppSubMenuComponent.prototype.updateActiveStateFromRoute = function () {
            this.active = this.router.isActive(this.item.routerLink[0], !this.item.items);
        };
        AppSubMenuComponent.prototype.itemClick = function (event) {
            // avoid processing disabled items
            if (this.item.disabled) {
                event.preventDefault();
                return true;
            }
            this.menuService.onMenuStateChange(this.key);
            // execute command
            if (this.item.command) {
                this.item.command({ originalEvent: event, item: this.item });
            }
            if (this.item.items) {
                this.active = !this.active;
            }
            else {
                this.active = true;
                if (this.isHorizontal || this.isSlim) {
                    this.menuService.reset();
                    this.menuHoverActive = false;
                }
                if (!this.isStatic) {
                    this.menuActiveChange.emit(false);
                }
                this.mobileMenuActiveChange.emit(false);
            }
            // prevent hash change
            if (this.item.items || (!this.item.url && !this.item.routerLink)) {
                // TODO https://github.com/primefaces/primeng/issues/8751
                // setTimeout(() => {
                //   this.app.layoutMenuScrollerViewChild.moveBar();
                // }, 450);
                event.preventDefault();
            }
        };
        AppSubMenuComponent.prototype.onMouseEnter = function () {
            if (this.root &&
                this.menuHoverActive &&
                (this.isHorizontal || this.isSlim) &&
                this.isDesktop) {
                this.menuService.onMenuStateChange(this.key);
                this.active = true;
            }
        };
        return AppSubMenuComponent;
    }());
    AppSubMenuComponent.decorators = [
        { type: i0.Component, args: [{
                    /* eslint-disable @angular-eslint/component-selector */
                    selector: '[tk-submenu]',
                    /* eslint-enable @angular-eslint/component-selector */
                    template: "\n    <ng-container>\n        <div *ngIf=\"root\">\n          <span class=\"layout-menuitem-text\">{{item.label}}</span>\n        </div>\n        <a [attr.href]=\"item.url\" (click)=\"itemClick($event)\" *ngIf=\"!item.routerLink || item.items\" (keydown.enter)=\"itemClick($event)\"\n           [attr.target]=\"item.target\" [attr.tabindex]=\"0\" (mouseenter)=\"onMouseEnter()\" pRipple>\n          <i [ngClass]=\"'pi-' + item.icon\" class=\"layout-menuitem-icon pi pi-fw\"></i>\n          <span class=\"layout-menuitem-text\">{{item.label}}</span>\n          <span class=\"p-badge p-component p-badge-no-gutter\" *ngIf=\"item.badge && !root\">{{item.badge}}</span>\n          <i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n        </a>\n        <a (click)=\"itemClick($event)\" *ngIf=\"item.routerLink && !item.items\"\n           [routerLink]=\"item.routerLink\" routerLinkActive=\"active-menuitem-routerlink\" [routerLinkActiveOptions]=\"{exact: true}\"\n           [attr.target]=\"item.target\" [attr.tabindex]=\"0\" (mouseenter)=\"onMouseEnter()\" pRipple>\n          <i [ngClass]=\"'pi-' + item.icon\" class=\"layout-menuitem-icon pi pi-fw\"></i>\n          <span class=\"layout-menuitem-text\">{{item.label}}</span>\n          <span class=\"p-badge p-component p-badge-no-gutter\" *ngIf=\"item.badge && !root\">{{item.badge}}</span>\n          <i class=\"pi pi-fw pi-angle-down layout-submenu-toggler\" *ngIf=\"item.items\"></i>\n        </a>\n        <ul *ngIf=\"(item.items && root) || (item.items && active)\" [@children]=\"root ? 'visible' : active ? 'visibleAnimated' : 'hiddenAnimated'\">\n          <ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"item.items\">\n            <li tk-submenu [item]=\"child\" [index]=\"i\" [parentKey]=\"key\"></li>\n          </ng-template>\n        </ul>\n    </ng-container>\n  ",
                    host: {
                        '[class.layout-root-menuitem]': 'root || active',
                        '[class.active-menuitem]': '(active)'
                    },
                    animations: [
                        animations.trigger('children', [
                            animations.state('void', animations.style({
                                height: '0px',
                                padding: '0px'
                            })),
                            animations.state('hiddenAnimated', animations.style({
                                height: '0px',
                                padding: '0px'
                            })),
                            animations.state('visibleAnimated', animations.style({
                                height: '*'
                            })),
                            animations.state('visible', animations.style({
                                height: '*'
                            })),
                            animations.state('hidden', animations.style({
                                height: '0px',
                                padding: '0px'
                            })),
                            animations.transition('visibleAnimated => hiddenAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            animations.transition('hiddenAnimated => visibleAnimated', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            animations.transition('void => visibleAnimated, visibleAnimated => void', animations.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                        ])
                    ]
                },] }
    ];
    AppSubMenuComponent.ctorParameters = function () { return [
        { type: MenuService },
        { type: router.Router }
    ]; };
    AppSubMenuComponent.propDecorators = {
        item: [{ type: i0.Input }],
        root: [{ type: i0.Input }],
        visible: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        parentKey: [{ type: i0.Input }],
        menuActive: [{ type: i0.Input }],
        isStatic: [{ type: i0.Input }],
        isHorizontal: [{ type: i0.Input }],
        isMobile: [{ type: i0.Input }],
        isDesktop: [{ type: i0.Input }],
        isSlim: [{ type: i0.Input }],
        menuHoverActive: [{ type: i0.Input }],
        mobileMenuActive: [{ type: i0.Input }],
        menuActiveChange: [{ type: i0.Output }],
        mobileMenuActiveChange: [{ type: i0.Output }]
    };

    var PortalPageComponent = /** @class */ (function () {
        function PortalPageComponent(injectorObj) {
            this.injectorObj = injectorObj;
            this.collapsed = false;
            this.authService = this.injectorObj.get(AUTH_SERVICE);
        }
        PortalPageComponent.prototype.ngOnInit = function () { };
        PortalPageComponent.prototype.doSomething = function () {
            alert('Hey it worked!');
        };
        PortalPageComponent.prototype.hasAccess = function () {
            return this.permission
                ? this.authService.hasPermission(this.permission)
                : true;
        };
        PortalPageComponent.prototype.collapse = function () {
            this.collapsible2.nativeElement.classList.add('hidden');
            this.collapsed = true;
        };
        PortalPageComponent.prototype.expand = function () {
            this.collapsible2.nativeElement.classList.remove('hidden');
            this.collapsed = false;
        };
        return PortalPageComponent;
    }());
    PortalPageComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-portal-page',
                    template: "<div role=\"main\">\n  <div class=\"p-col-12 content-wrapper\">\n    <!--criteria-->\n    <div\n      class=\"card card-w-title no-margin pt-0\"\n      [ngClass]=\"{ collapsed: collapsed }\"\n    >\n      <ng-container *ngIf=\"hasAccess(); else noAccess\">\n        <tk-panel-header\n          [leftToolbar]=\"leftToolbar\"\n          [rightToolbar]=\"pageToolbarRight\"\n        ></tk-panel-header>\n        <div class=\"page-content\">\n          <ng-content></ng-content>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n\n<ng-template #noAccess>\n  <h3>Unauthorized</h3>\n  <p>\n    Sorry, you do not have the permission required to view this page.\n    <span\n      pTooltip=\"Missing permission key: '{{ permission }}''\"\n      tooltipEvent=\"hover\"\n      hideDelay=\"500\"\n      >More info</span\n    >\n  </p>\n</ng-template>\n",
                    styles: ["::ng-deep .collapsed .collapse-toggle i{transform:rotate(180deg)}:host ::ng-deep child.collapsible{transition:all .4s ease;background-color:initial;transform:scale(1);max-height:1000px;height:auto}:host ::ng-deep child.collapsible.hidden{max-height:0;opacity:0;background-color:#cecece;transform:scale3d(.5,.5,.5);margin:0}@media only screen and (max-width:430px){.card.card-w-title.no-margin.pt-0{padding-left:.25em;padding-right:.25em}}"]
                },] }
    ];
    PortalPageComponent.ctorParameters = function () { return [
        { type: i0.Injector }
    ]; };
    PortalPageComponent.propDecorators = {
        header: [{ type: i0.Input }],
        permission: [{ type: i0.Input }],
        helpArticleId: [{ type: i0.Input }],
        leftToolbar: [{ type: i0.Input }],
        rightToolbar: [{ type: i0.Input }],
        collapsible2: [{ type: i0.ContentChild, args: [CollapsibleDirective, { read: i0.ElementRef },] }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var SearchTemplateAPIService = /** @class */ (function () {
        function SearchTemplateAPIService(httpClient) {
            this.httpClient = httpClient;
            this.baseUrl = './portal-api/v1/searchTemplates';
            this.httpOptions = {
                headers: new i1.HttpHeaders({
                    'Content-Type': 'application/json',
                    Accept: 'application/json'
                })
            };
        }
        SearchTemplateAPIService.prototype.getSearchTemplatesLegacy = function (user, application, page, includeGlobal) {
            if (includeGlobal === void 0) { includeGlobal = true; }
            return this.httpClient.post(this.baseUrl + "/search/criteria", {
                application: application,
                page: page,
                user: user,
                includeGlobal: includeGlobal
            }, this.httpOptions);
        };
        SearchTemplateAPIService.prototype.getTemplateById = function (id) {
            return this.httpClient.get(this.baseUrl + "/" + id, this.httpOptions);
        };
        SearchTemplateAPIService.prototype.createNewTemplate = function (template) {
            return this.httpClient.post("" + this.baseUrl, template, this.httpOptions);
        };
        SearchTemplateAPIService.prototype.updateTemplate = function (id, template) {
            return this.httpClient.put(this.baseUrl + "/" + id, template, this.httpOptions);
        };
        SearchTemplateAPIService.prototype.deleteTemplate = function (id) {
            return this.httpClient.delete(this.baseUrl + "/" + id);
        };
        return SearchTemplateAPIService;
    }());
    SearchTemplateAPIService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SearchTemplateAPIService_Factory() { return new SearchTemplateAPIService(i0.ɵɵinject(i1.HttpClient)); }, token: SearchTemplateAPIService, providedIn: "root" });
    SearchTemplateAPIService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    SearchTemplateAPIService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var baseUrl = './ahm-api/internal/applications';
    var HelpPageAPIService = /** @class */ (function () {
        function HelpPageAPIService(httpClient) {
            this.httpClient = httpClient;
            this.httpOptions = {
                headers: new i1.HttpHeaders({ 'Content-Type': 'application/json' })
            };
        }
        HelpPageAPIService.prototype.getHelpDataItem = function (appId, helpItemId, type) {
            if (type === void 0) { type = 'PAGE'; }
            return this.httpClient
                .get(baseUrl + "/" + appId + "/helpItems", {
                params: {
                    helpItemId: helpItemId
                }
            })
                .pipe(operators.map(function (helpItems) { return helpItems[0]; }));
        };
        HelpPageAPIService.prototype.getHelpDataItemLegacy = function (appId, context, type) {
            if (type === void 0) { type = 'PAGE'; }
            console.log("About to go to " + baseUrl + "/helpdata/" + appId + "/" + encodeURIComponent(context));
            return this.httpClient.post(baseUrl + "/helpdata/" + appId + "/" + encodeURIComponent(context), "\"" + type + "\"", {
                headers: {
                    'Content-Type': 'application/v1+json',
                    Accept: 'application/v1+json'
                }
            });
        };
        HelpPageAPIService.prototype.saveHelpPage = function (appId, helpItem) {
            if (helpItem.id) {
                return this.httpClient.patch(baseUrl + "/" + appId + "/helpItems/" + helpItem.id, helpItem, {
                    observe: 'response'
                });
            }
            else {
                return this.httpClient.post(baseUrl + "/" + appId + "/helpItems", helpItem, {
                    observe: 'response'
                });
            }
        };
        HelpPageAPIService.prototype.saveHelpPageLegacy = function (helpItem) {
            return this.httpClient.post(baseUrl + "/helpdata", helpItem, {
                headers: {
                    'Content-Type': 'application/v1+json',
                    Accept: 'application/v1+json'
                },
                observe: 'response'
            });
        };
        return HelpPageAPIService;
    }());
    HelpPageAPIService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HelpPageAPIService_Factory() { return new HelpPageAPIService(i0.ɵɵinject(i1.HttpClient)); }, token: HelpPageAPIService, providedIn: "root" });
    HelpPageAPIService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    HelpPageAPIService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    function isTkitPage(object) {
        return 'helpArticleId' in object;
    }

    var defaultThemeServerUrl = 'http://portal-theme-management:8080';
    var ThemeService = /** @class */ (function () {
        function ThemeService(configservice) {
            this.configservice = configservice;
            this.themeServerUrl =
                this.configservice.getProperty('TKIT_PORTAL_THEME_SERVER_URL') ||
                    defaultThemeServerUrl;
        }
        ThemeService.prototype.getThemeHref = function (theme) {
            return this.themeServerUrl + "/themes/" + theme + "/" + theme + ".min.css";
        };
        return ThemeService;
    }());
    ThemeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(i0.ɵɵinject(ConfigurationService)); }, token: ThemeService, providedIn: "root" });
    ThemeService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ThemeService.ctorParameters = function () { return [
        { type: ConfigurationService }
    ]; };

    var MenuApiService = /** @class */ (function () {
        function MenuApiService(http, messageService) {
            this.http = http;
            this.messageService = messageService;
            this.menuUrl = './portal-api/legacy/menustructure'; // URL to web api
            this.httpOptions = {
                headers: new i1.HttpHeaders({ 'Content-Type': 'application/json' }),
            };
        }
        MenuApiService.prototype.getMenuItems = function (portalId) {
            return this.http
                .get(this.menuUrl + "/" + portalId, cashew.withCache())
                .pipe(operators.catchError(this.handleError('getMenuItems', [])));
        };
        /**
         * Handle Http operation that failed.
         * Let the app continue.
         * @param operation - name of the operation that failed
         * @param result - optional value to return as the observable result
         */
        MenuApiService.prototype.handleError = function (operation, result) {
            var _this = this;
            if (operation === void 0) { operation = 'operation'; }
            return function (error) {
                // TODO: send the error to remote logging infrastructure
                console.error(error); // log to console instead
                // TODO: better job of transforming error for user consumption
                _this.log(operation + " failed: " + error.message + ", will return " + JSON.stringify(result));
                // Let the app keep running by returning an empty result.
                return rxjs.of(result);
            };
        };
        /** Log a HeroService message with the MessageService */
        MenuApiService.prototype.log = function (message) {
            console.log(message);
        };
        return MenuApiService;
    }());
    MenuApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MenuApiService_Factory() { return new MenuApiService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService)); }, token: MenuApiService, providedIn: "root" });
    MenuApiService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    MenuApiService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: i2.MessageService }
    ]; };

    var FeedbackApiService = /** @class */ (function () {
        function FeedbackApiService(http) {
            this.http = http;
            this.url = './portal-api/v1/feedback/send';
        }
        FeedbackApiService.prototype.sendFeedback = function (feedback) {
            return this.http.post(this.url, feedback);
        };
        return FeedbackApiService;
    }());
    FeedbackApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeedbackApiService_Factory() { return new FeedbackApiService(i0.ɵɵinject(i1.HttpClient)); }, token: FeedbackApiService, providedIn: "root" });
    FeedbackApiService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    FeedbackApiService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var SupportTicketApiService = /** @class */ (function () {
        function SupportTicketApiService(http) {
            this.http = http;
            this.baseUrl = './portal-api/v1/supportTicket/send';
        }
        SupportTicketApiService.prototype.createSupportTicket = function (ticket, appId) {
            var request = {
                processId: ticket.title,
                processStep: ticket.description,
                source: appId,
                sourceDeepLink: window.location.href
            };
            return this.http.post(this.baseUrl, request);
        };
        return SupportTicketApiService;
    }());
    SupportTicketApiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SupportTicketApiService_Factory() { return new SupportTicketApiService(i0.ɵɵinject(i1.HttpClient)); }, token: SupportTicketApiService, providedIn: "root" });
    SupportTicketApiService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    SupportTicketApiService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var MenuOrientation;
    (function (MenuOrientation) {
        MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
        MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
        MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
        MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
    })(MenuOrientation || (MenuOrientation = {}));
    var FALLBACK_THEME_URL = './portal-lib/assets/css/fallback-theme/fallback.css';
    var DEFAULT_BASE_URL = 'https://1000kit.atlassian.net/wiki/spaces/1000KIT/overview';
    var PortalViewportComponent = /** @class */ (function () {
        function PortalViewportComponent(renderer2, zone, router, route, helpDataService, messageService, dialogService, breakpointObserver, translate, themeService, menuService, menuApiService, configService, feedbackApiService, supportTicketApiService, primeNgConfig, auth) {
            this.renderer2 = renderer2;
            this.zone = zone;
            this.router = router;
            this.route = route;
            this.helpDataService = helpDataService;
            this.messageService = messageService;
            this.dialogService = dialogService;
            this.breakpointObserver = breakpointObserver;
            this.translate = translate;
            this.themeService = themeService;
            this.menuService = menuService;
            this.menuApiService = menuApiService;
            this.configService = configService;
            this.feedbackApiService = feedbackApiService;
            this.supportTicketApiService = supportTicketApiService;
            this.primeNgConfig = primeNgConfig;
            this.auth = auth;
            this.showProfileInSidebar = true;
            this.enableBreadcrumbs = false;
            this.fullPortalLayout = true;
            // TKIT
            this.helpPageEditorDisplayed = false;
            this.addToFavouritesDisplayed = false;
            this.supportTicketDisplayed = false;
            this.feedbackData = { comment: '', rating: 0, anonymous: false };
            this.feedbackVisible = false;
            this.feedbackSubmitDisabled = false;
            this.portalName = 'PORTAL';
            // PRIMENG STUFF
            this.layoutMode = MenuOrientation.STATIC;
            // TODO Ultima11: dark menu
            this.darkMenu = false;
            this.profileMode = 'top';
            this.searchClick = false;
            this.search = false;
            this.preloader = true;
            this.portalHomeMenuItem = { url: '/', label: 'Home' };
        }
        Object.defineProperty(PortalViewportComponent.prototype, "menuButtonTitle", {
            get: function () {
                return (this.isDesktop() && this.menuActive || this.isMobile() && this.mobileMenuActive) ? this.hideMenuButtonTitle : this.showMenuButtonTitle;
            },
            enumerable: false,
            configurable: true
        });
        PortalViewportComponent.prototype.applyPadding = function () {
            if (this.isBodyCompact) {
                this.addClass(document.body, 'compact');
            }
            else {
                this.removeClass(document.body, 'compact');
            }
        };
        PortalViewportComponent.prototype.setSidebarColorTheme = function () {
            if (this.sideBarColorTheme === 'DARK') {
                this.darkMenu = true;
            }
            else if (this.sideBarColorTheme === 'LIGHT') {
                this.darkMenu = false;
            }
        };
        PortalViewportComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.primeNgConfig.ripple = true;
            this.initError = this.configService.error;
            if (this.initError) {
                this.preloader = false;
                return;
            }
            this.mainPortal = this.configService.getPortalData();
            if (this.auth.currentUser().accountSettings.layoutAndThemeSettings) {
                this.isBodyCompact = (_a = this.auth.currentUser().accountSettings.layoutAndThemeSettings.compactView) !== null && _a !== void 0 ? _a : false;
                this.applyPadding();
                // this.sideBarColorTheme = this.auth.currentUser().accountSettings.layoutAndThemeSettings.menuTheme ?? 'LIGHT'
                if (this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode) {
                    this.layoutMode =
                        MenuOrientation[this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode];
                }
                else {
                    this.layoutMode = MenuOrientation['STATIC'];
                }
            }
            this.menuActive = this.isStatic() && !this.isMobile() && this.fullPortalLayout;
            this.validateRequiredInputs();
            this.setSidebarColorTheme();
            this.setCustomTheme();
            if (this.fullPortalLayout) {
                this.loadMenuItems();
            }
            this.router.events.subscribe(function (event) {
                // console.log(`nav event ${event.constructor.name}`);
                if (event instanceof router.NavigationStart) {
                    // Show loading indicator
                }
                if (event instanceof router.ActivationEnd) {
                    // this.helpArticleId = event.snapshot.pathFromRoot
                    //   .map(i => (i.routeConfig ? i.routeConfig.path : ''))
                    //   .join('/');
                    // console.log(`aftger event ${this.helpArticleId}`);
                }
                if (event instanceof router.NavigationEnd && _this.fullPortalLayout) {
                    // Hide loading indicator
                    if (_this.currentComponent) {
                        var helpPageIdentifier = void 0;
                        if (isTkitPage(_this.currentComponent)) {
                            helpPageIdentifier = _this.currentComponent.helpArticleId;
                        }
                        else {
                            helpPageIdentifier = event.url || _this.currentComponent.constructor.name;
                            console.log("Page does not have helpItemId, using router path " + helpPageIdentifier);
                        }
                        _this.helpArticleId = helpPageIdentifier;
                        _this.helpDataItem = {
                            helpItemId: helpPageIdentifier,
                            appId: _this.appName,
                            baseUrl: DEFAULT_BASE_URL,
                            resourceUrl: '',
                        };
                        _this.loadHelpArticle();
                    }
                }
                if (event instanceof router.NavigationError) {
                    // Hide loading indicator
                    // Present error to user
                    _this.messageService.add({
                        severity: 'error',
                        summary: 'Navigation error',
                        detail: "Route " + event.url + " not recognized",
                    });
                }
                // console.log(`navigate event ${event}`);
                _this.setSidebarColorTheme();
            });
            this.translate.get(['GENERAL.SHOW_MENU', 'GENERAL.HIDE_MENU']).subscribe(function (text) {
                _this.hideMenuButtonTitle = text['GENERAL.HIDE_MENU'];
                _this.showMenuButtonTitle = text['GENERAL.SHOW_MENU'];
            });
        };
        PortalViewportComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.documentClickListener = this.renderer2.listen('body', 'click', function () {
                if (!_this.topbarItemClick) {
                    _this.activeTopbarItem = null;
                }
                if (!_this.menuClick && (_this.isHorizontal() || _this.isSlim())) {
                    _this.menuService.reset();
                }
                if (!_this.menuClick) {
                    if (_this.mobileMenuActive) {
                        _this.mobileMenuActive = false;
                    }
                    if (_this.isOverlay()) {
                        _this.menuActive = false;
                    }
                    _this.menuHoverActive = false;
                    _this.unblockBodyScroll();
                }
                if (!_this.searchClick) {
                    _this.search = false;
                }
                if (_this.inlineMenuActive && !_this.inlineMenuClick) {
                    _this.inlineMenuActive = false;
                }
                _this.inlineMenuClick = false;
                _this.searchClick = false;
                _this.topbarItemClick = false;
                _this.menuClick = false;
            });
        };
        PortalViewportComponent.prototype.loadMenuItems = function () {
            var _this = this;
            var portalId = this.configService.getProperty('TKIT_PORTAL_ID');
            var stripForbiddenStr = this.configService.getProperty('TKIT_PORTAL_DISABLE_MENU_PERMISSIONS');
            var stripForbidden = stripForbiddenStr === 'true';
            this.configService.lang$.subscribe(function (data) { return (_this.lang = data); }).unsubscribe();
            if (!portalId) {
                this.portalMenuItems = [{ label: 'Failed to load menu', icon: 'dashboard', routerLink: ['/'] }];
            }
            else if (this.fullPortalLayout) {
                this.menuApiService.getMenuItems(portalId).subscribe(function (data) {
                    var serverMenuItems = [];
                    var mainMenuItem = data.find(function (item) { return item.key === 'PORTAL_MAIN_MENU'; });
                    _this.portalHomeMenuItem = _this.toPrimeNGMenuItem(data.find(function (item) { return item.key === 'PORTAL_MENU_HOME'; }));
                    if (!_this.portalHomeMenuItem) {
                        _this.portalHomeMenuItem = { url: '/', label: 'Home' };
                    }
                    if (mainMenuItem) {
                        serverMenuItems = mainMenuItem.children
                            .filter(function (item) { return (!stripForbidden || _this.auth.hasPermission(item.permissionObject + "#VIEW")) && !item.disabled; })
                            .sort(function (a, b) { return a.position - b.position; })
                            .map(function (item) { return _this.toPrimeNGMenuItem(item); });
                    }
                    _this.portalMenuItems = __spread(serverMenuItems);
                });
            }
        };
        PortalViewportComponent.prototype.toPrimeNGMenuItem = function (item, level) {
            var _this = this;
            if (level === void 0) { level = 1; }
            if (!item) {
                return undefined;
            }
            var isAbsoluteLink = item.url && item.url.match(/^(http|https)/g) !== null;
            var currentHost = document.getElementsByTagName('base')[0].href;
            var routerLink = undefined;
            var label = item.i18n[this.lang] || item.name;
            if (this.appName === item.applicationId) {
                // it is a local link, set routerlink
                if (isAbsoluteLink && item.url.includes(currentHost)) {
                    routerLink = [item.url.substr(currentHost.length - 1)];
                    isAbsoluteLink = false;
                }
                else {
                    var path = currentHost.substring(window.location.origin.length);
                    if (path.length >= 1 && item.url.startsWith(path)) {
                        // its a link within same  path
                        routerLink = [item.url.substr(path.length - 1)];
                        isAbsoluteLink = false;
                    }
                }
            }
            var badgeIcon = level === 1 ? 'menu' : 'subject';
            if (item.badge !== '' && item.badge) {
                badgeIcon = item.badge;
            }
            return {
                label: label,
                // badge: '🔗',
                icon: badgeIcon,
                command: function (e) {
                    e.originalEvent.preventDefault();
                    if (item.children.length === 0) {
                        item.portalExit
                            ? window.open(item.url, '_blank')
                            : routerLink
                                ? _this.router.navigate(routerLink)
                                : window.location.assign(item.url);
                    }
                },
                url: item.url,
                routerLinkActiveOptions: [{ exact: false }],
                items: item.children.length > 0
                    ? item.children
                        .filter(function (child) { return !child.disabled; })
                        .sort(function (a, b) { return a.position - b.position; })
                        .map(function (child) { return _this.toPrimeNGMenuItem(child, level + 1); })
                    : undefined,
            };
        };
        PortalViewportComponent.prototype.validateRequiredInputs = function () {
            if (!this.appName) {
                throw new Error("You must specify [appName] attribute on <tk-portal-viewport> component.");
            }
        };
        PortalViewportComponent.prototype.loadHelpArticle = function () {
            var _this = this;
            this.helpDataService.getHelpDataItem(this.appName, this.helpArticleId).subscribe(function (data) {
                if (data) {
                    _this.helpDataItem = data;
                }
            }, function (error) { return console.log('Failed to load help article'); });
        };
        PortalViewportComponent.prototype.onHelpArticleEditorClosed = function (changed) {
            var _this = this;
            if (changed) {
                this.helpDataService.saveHelpPage(this.appName, this.helpDataItem).subscribe(function (res) {
                    console.log("Help item saved: " + res.status);
                    _this.helpPageEditorDisplayed = false;
                    _this.messageService.add({
                        severity: 'info',
                        summary: 'Help Item definition updated',
                    });
                    _this.loadHelpArticle();
                }, function (error) {
                    console.log("Could not save help item");
                    _this.messageService.add({
                        severity: 'error',
                        summary: 'Help Item definition update failed',
                        detail: "Server error: " + error.status,
                    });
                });
            }
            else {
                this.helpPageEditorDisplayed = false;
            }
        };
        PortalViewportComponent.prototype.onAddToLaunchpadClosed = function (event) {
            this.addToFavouritesDisplayed = false;
        };
        PortalViewportComponent.prototype.openHelpPage = function (event) {
            if (this.helpDataItem.id) {
                var url = this.helpDataItem.baseUrl
                    ? this.helpDataItem.baseUrl + "/" + this.helpDataItem.resourceUrl
                    : this.helpDataItem.resourceUrl;
                console.log("navigate to help page: " + url);
                var win = window.open(url, '_blank');
                win.focus();
            }
            else {
                this.dialogService.open(NoHelpInfoComponent, {
                    header: 'No help item defined for this page',
                    width: '400px',
                    data: {
                        pageItem: this.helpArticleId,
                    },
                });
            }
            event.preventDefault();
        };
        PortalViewportComponent.prototype.openHelpPageEditor = function (event) {
            this.helpPageEditorDisplayed = true;
            event.preventDefault();
        };
        PortalViewportComponent.prototype.openFeedback = function (event) {
            if (this.breakpointObserver.isMatched('(max-width: 1024px)')) {
                this.feedbackVisible = true;
            }
            else {
                this.feedbackPanel.toggle(event);
            }
            event.preventDefault();
        };
        PortalViewportComponent.prototype.openAddToLaunchpad = function (event) {
            this.addToFavouritesDisplayed = true;
            event.preventDefault();
        };
        PortalViewportComponent.prototype.openSupportTicket = function (event) {
            this.supportTicketDisplayed = true;
            event.preventDefault();
        };
        PortalViewportComponent.prototype.onSubmitFeedback = function (feedback) {
            var _this = this;
            this.feedbackSubmitDisabled = true;
            var feedbackDTO = {
                rating: feedback.rating,
                comment: feedback.comment,
                appId: this.appName,
                userId: feedback.anonymous ? 'anonymous' : this.auth.currentUser().userId,
            };
            this.feedbackApiService.sendFeedback(feedbackDTO).subscribe(function () {
                _this.closeFeedback();
                _this.messageService.add({
                    severity: 'success',
                    summary: 'Feedback successfully sent',
                });
            }, function () {
                _this.closeFeedback();
                _this.messageService.add({
                    severity: 'error',
                    summary: 'Sending feedback failed',
                    detail: 'Please try again later',
                });
            });
        };
        PortalViewportComponent.prototype.closeFeedback = function () {
            this.feedbackSubmitDisabled = false;
            this.feedbackVisible = false;
            this.feedbackPanel.hide();
        };
        PortalViewportComponent.prototype.onSubmitTicket = function (ticket) {
            var _this = this;
            this.supportTicketApiService.createSupportTicket(ticket, this.appName).subscribe(function () {
                _this.messageService.add({
                    severity: 'success',
                    summary: 'Success!',
                    detail: 'Ticket successfully submitted',
                });
            }, function () { return _this.messageService.add({
                severity: 'error',
                summary: 'Error!',
                detail: 'Error occured while submitting a ticket',
            }); });
        };
        PortalViewportComponent.prototype.clearFeedback = function () {
            this.feedbackData = { comment: '', rating: 0, anonymous: false };
        };
        PortalViewportComponent.prototype.addClass = function (element, className) {
            if (element.classList) {
                element.classList.add(className);
            }
            else {
                element.className += ' ' + className;
            }
        };
        PortalViewportComponent.prototype.removeClass = function (element, className) {
            if (element.classList) {
                element.classList.remove(className);
            }
            else {
                element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        };
        PortalViewportComponent.prototype.onMenuButtonClick = function (event) {
            this.menuActive = !this.menuActive;
            this.menuClick = true;
            if (!this.isDesktop()) {
                this.mobileMenuActive = !this.mobileMenuActive;
                if (this.mobileMenuActive) {
                    this.blockBodyScroll();
                }
                else {
                    this.unblockBodyScroll();
                }
            }
            event.preventDefault();
        };
        PortalViewportComponent.prototype.onMenuClick = function ($event) {
            this.menuClick = true;
            if (this.inlineMenuActive && !this.inlineMenuClick) {
                this.inlineMenuActive = false;
            }
        };
        PortalViewportComponent.prototype.onInlineMenuClick = function (event) {
            this.inlineMenuActive = !this.inlineMenuActive;
            this.inlineMenuClick = true;
        };
        PortalViewportComponent.prototype.onTopbarMobileButtonClick = function (event) {
            this.mobileTopbarActive = !this.mobileTopbarActive;
            event.preventDefault();
        };
        PortalViewportComponent.prototype.onTopbarItemClick = function (event, item) {
            this.topbarItemClick = true;
            if (this.activeTopbarItem === item) {
                this.activeTopbarItem = null;
            }
            else {
                this.activeTopbarItem = item;
            }
            if (item === 'search') {
                this.search = !this.search;
                this.searchClick = !this.searchClick;
            }
            event.preventDefault();
        };
        PortalViewportComponent.prototype.onSearchClick = function (event, val) {
            this.searchClick = val;
            this.search = val;
            event.preventDefault();
        };
        PortalViewportComponent.prototype.isDesktop = function () {
            return window.innerWidth > 991;
        };
        PortalViewportComponent.prototype.isMobile = function () {
            return window.innerWidth <= 991;
        };
        PortalViewportComponent.prototype.isStatic = function () {
            return this.layoutMode === MenuOrientation.STATIC;
        };
        PortalViewportComponent.prototype.isOverlay = function () {
            return this.layoutMode === MenuOrientation.OVERLAY;
        };
        PortalViewportComponent.prototype.isHorizontal = function () {
            return this.layoutMode === MenuOrientation.HORIZONTAL;
        };
        PortalViewportComponent.prototype.isSlim = function () {
            return this.layoutMode === MenuOrientation.SLIM;
        };
        PortalViewportComponent.prototype.changeToStaticMenu = function () {
            this.layoutMode = MenuOrientation.STATIC;
        };
        PortalViewportComponent.prototype.changeToOverlayMenu = function () {
            this.layoutMode = MenuOrientation.OVERLAY;
        };
        PortalViewportComponent.prototype.changeToHorizontalMenu = function () {
            this.layoutMode = MenuOrientation.HORIZONTAL;
        };
        PortalViewportComponent.prototype.changeToSlimMenu = function () {
            this.layoutMode = MenuOrientation.SLIM;
        };
        PortalViewportComponent.prototype.blockBodyScroll = function () {
            if (document.body.classList) {
                document.body.classList.add('blocked-scroll');
            }
            else {
                document.body.className += ' blocked-scroll';
            }
        };
        PortalViewportComponent.prototype.unblockBodyScroll = function () {
            if (document.body.classList) {
                document.body.classList.remove('blocked-scroll');
            }
            else {
                document.body.className = document.body.className.replace(new RegExp('(^|\\b)' +
                    'blocked-scroll'.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            }
        };
        PortalViewportComponent.prototype.setCustomTheme = function () {
            var _this = this;
            var disablePortalThemeMgmt = this.configService.getProperty(CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT) === 'true';
            if (disablePortalThemeMgmt) {
                console.log("Portal theme mgmt is disabled. To enable it, remove env var: " + CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT);
                this.preloader = false;
                return;
            }
            console.log("Setting theme dynamically");
            var customTheme = this.configService.getPortalData() && this.configService.getPortalData().themeName;
            if (!customTheme) {
                var themeFromEnv = this.configService.getProperty('TKIT_PORTAL_DEFAULT_THEME');
                if (!themeFromEnv) {
                    console.log("Custom theme not defined, or portal data not available, setting default theme CG");
                    customTheme = 'cg';
                }
                else {
                    console.log("Custom theme not defined, or portal data not available, setting theme from 'TKIT_PORTAL_DEFAULT_THEME' var: " + themeFromEnv + " ");
                    customTheme = themeFromEnv;
                }
            }
            if (document.getElementById('theme-css')) {
                var themeLinkToRemove = document.getElementById('theme-css');
                themeLinkToRemove.remove();
            }
            var themeLink = document.createElement('link');
            themeLink.setAttribute('id', 'theme-css');
            themeLink.setAttribute('rel', 'stylesheet');
            themeLink.setAttribute('type', 'text/css');
            themeLink.onload = function () {
                console.log('theme load done');
                _this.preloader = false;
            };
            themeLink.onerror = function () {
                console.log("Failed to load theme assets for '" + customTheme + "'");
                themeLink.setAttribute('href', FALLBACK_THEME_URL);
                _this.preloader = false;
            };
            themeLink.setAttribute('href', this.themeService.getThemeHref(customTheme));
            document.getElementsByTagName('head')[0].appendChild(themeLink);
        };
        return PortalViewportComponent;
    }());
    PortalViewportComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-portal-viewport',
                    template: "<div class=\"loading-block\" *ngIf=\"preloader\">\n  <div\n    class=\"p-d-flex p-mb-3 p-p-1\"\n    style=\"position: fixed;\n    z-index: 100;\n    width: 100%;\n    background-color: #fff;\n    height: 75px;\n    box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\n    -webkit-box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\"\n  >\n    <p-skeleton width=\"8rem\" height=\"60px\" styleClass=\"p-mr-2\"></p-skeleton>\n    <div style=\"flex: 1; height: 100%;\">\n      <p-skeleton width=\"100%\" height=\"60px\"></p-skeleton>\n    </div>\n  </div>\n  <div\n    style=\"overflow: auto;\n    position: fixed;\n    margin-left: 0px;\n    width: 250px;\n    z-index: 99;\n    top: 75px;\n    height: 100%;\n    background-color: #fff;\n    box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -webkit-box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -moz-box-shadow: 3px 0 6px rgba(0,0,0,.3);\n    padding: 1rem\"\n  >\n    <div class=\"custom-skeleton p-p-3 p-mt-4\">\n      <div class=\"p-mb-3 p-ml-5\">\n        <p-skeleton shape=\"circle\" size=\"3rem\" styleClass=\"p-mr-2\"></p-skeleton>\n      </div>\n      <p-skeleton width=\"80%\" height=\"1rem\" styleClass=\"p-mb-1 p-ml-2\"></p-skeleton>\n    </div>\n    <div class=\"p-mt-4\">\n      <p-skeleton *ngFor=\"let number of [0,1,2,3,4,5]\" width=\"100%\" height=\"1.5rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    </div>\n  </div>\n</div>\n<div class=\"exception-body error-page\" *ngIf=\"initError\">\n  <div class=\"exception-type\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\" stroke=\"currentColor\">\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n      />\n    </svg>\n  </div>\n\n  <div class=\"card exception-panel\">\n    <i class=\"pi pi-exclamation-circle\"></i>\n    <h1>Exception Occured</h1>\n    <div class=\"exception-detail\">Please contact system administrator</div>\n\n    <p-button label=\"Homepage\" [routerLink]=\"['/']\" class=\"p-button-help\"></p-button>\n  </div>\n</div>\n\n<div\n  [hidden]=\"preloader || initError\"\n  class=\"layout-wrapper\"\n  [ngClass]=\"{ 'layout-menu-static': isStatic(),\n        'layout-menu-overlay': isOverlay(),\n        'layout-menu-horizontal': isHorizontal(),\n        'layout-menu-slim': isSlim(),\n        'layout-menu-active': menuActive,\n        'layout-menu-mobile-active': mobileMenuActive,\n        'layout-topbar-mobile-active': mobileTopbarActive\n   }\"\n>\n    <tk-header\n      [menuButtonTitle]=\"menuButtonTitle\"\n      [activeTopbarItem]=\"activeTopbarItem\"\n      [isHorizontal]=\"isHorizontal()\"\n      [profileMode]=\"profileMode\"\n      [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n      [homeNavTitle]=\"portalHomeMenuItem.label\"\n      [homeNavUrl]=\"portalHomeMenuItem.url\"\n      [fullPortalLayout]=\"fullPortalLayout\"\n      [search]=\"search\"\n      (searchClick)=\"onSearchClick($event.event, $event.val)\"\n      (menuButtonClick)=\"onMenuButtonClick($event)\"\n      (topbarItemClick)=\"onTopbarItemClick($event.event, $event.arg)\"\n      (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n      (openHelpPage)=\"openHelpPage($event)\"\n      (openFeedback)=\"openFeedback($event)\"\n      (openSupportTicket)=\"openSupportTicket($event)\"\n      (openAddToLaunchpad)=\"openAddToLaunchpad($event)\"\n    ></tk-header>\n\n    <p-overlayPanel #feedbackPanel (onHide)=\"clearFeedback()\">\n      <ng-template pTemplate>\n        <tk-feedback\n          [(feedbackData)]=\"feedbackData\"\n          [submitDisabled]=\"feedbackSubmitDisabled\"\n          (feedbackSubmit)=\"onSubmitFeedback($event)\"\n        >\n        </tk-feedback>\n      </ng-template>\n    </p-overlayPanel>\n\n    <p-dialog header=\"Leave Feedback\" [(visible)]=\"feedbackVisible\" (onHide)=\"clearFeedback()\">\n      <tk-feedback\n        [(feedbackData)]=\"feedbackData\"\n        [submitDisabled]=\"feedbackSubmitDisabled\"\n        (feedbackSubmit)=\"onSubmitFeedback($event)\"\n      >\n      </tk-feedback>\n    </p-dialog>\n\n    <p-toast></p-toast>\n\n    <div class=\"menu-wrapper\" (click)=\"onMenuClick($event)\">\n      <div\n        *ngIf=\"fullPortalLayout\"\n        class=\"layout-menu-container\"\n      >\n        <tk-inline-profile\n          *ngIf=\"showProfileInSidebar && !isHorizontal()\"\n          [inlineMenuActive]=\"inlineMenuActive\"\n          (inlineMenuClick)=\"onInlineMenuClick($event)\"\n        ></tk-inline-profile>\n\n        <tk-menu\n          [(menuActive)]=\"menuActive\"\n          [(mobileMenuActive)]=\"mobileMenuActive\"\n          [isStatic]=\"isStatic()\"\n          [isSlim]=\"isSlim()\"\n          [isHorizontal]=\"isHorizontal()\"\n          [isMobile]=\"isMobile()\"\n          [isDesktop]=\"isDesktop()\"\n          [menuHoverActive]=\"menuHoverActive\"\n          [portalMenu]=\"portalMenuItems\"\n        ></tk-menu>\n      </div>\n    </div>\n\n    <div class=\"layout-main\">\n      <tk-breadcrumb\n        *ngIf=\"enableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n        (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n        (openHelpPage)=\"openHelpPage($event)\"\n      ></tk-breadcrumb>\n\n      <div class=\"layout-content\">\n        <router-outlet (activate)=\"currentComponent = $event\"></router-outlet>\n        <tk-footer [homePortal]=\"mainPortal\"></tk-footer>\n      </div>\n    </div>\n\n    <div class=\"layout-mask modal-in\"></div>\n</div>\n\n<tk-help-editor\n  *ngIf=\"helpDataItem\"\n  [display]=\"helpPageEditorDisplayed\"\n  [helpItem]=\"helpDataItem\"\n  (closed)=\"onHelpArticleEditorClosed($event)\"\n></tk-help-editor>\n\n<tk-add-to-launchpad\n  *ngIf=\"addToFavouritesDisplayed\"\n  [display]=\"addToFavouritesDisplayed\"\n  (closed)=\"onAddToLaunchpadClosed($event)\"\n  [appId]=\"appName\"\n></tk-add-to-launchpad>\n\n<tk-support-ticket [(display)]=\"supportTicketDisplayed\" (submitTicket)=\"onSubmitTicket($event)\"></tk-support-ticket>\n",
                    styles: ["\n      .loading-block {\n      }\n    "]
                },] }
    ];
    PortalViewportComponent.ctorParameters = function () { return [
        { type: i0.Renderer2 },
        { type: i0.NgZone },
        { type: router.Router },
        { type: router.ActivatedRoute },
        { type: HelpPageAPIService },
        { type: i2.MessageService },
        { type: dynamicdialog.DialogService },
        { type: layout.BreakpointObserver },
        { type: core.TranslateService },
        { type: ThemeService },
        { type: MenuService },
        { type: MenuApiService },
        { type: ConfigurationService },
        { type: FeedbackApiService },
        { type: SupportTicketApiService },
        { type: i2.PrimeNGConfig },
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] }
    ]; };
    PortalViewportComponent.propDecorators = {
        showProfileInSidebar: [{ type: i0.Input }],
        enableBreadcrumbs: [{ type: i0.Input }],
        fullPortalLayout: [{ type: i0.Input }],
        appName: [{ type: i0.Input }],
        portalName: [{ type: i0.Input }],
        layoutContainerViewChild: [{ type: i0.ViewChild, args: ['layoutContainer',] }],
        layoutMenuScrollerViewChild: [{ type: i0.ViewChild, args: ['scrollPanel',] }],
        feedbackPanel: [{ type: i0.ViewChild, args: ['feedbackPanel',] }]
    };

    var PortalSearchPage = /** @class */ (function () {
        function PortalSearchPage() {
        }
        PortalSearchPage.prototype.search = function () {
            var _this = this;
            this.searchInProgress = true;
            var resultIntermediate = this.doSearch();
            if (rxjs.isObservable(resultIntermediate)) {
                resultIntermediate.subscribe(function (data) {
                    _this.results = data;
                    _this.searchInProgress = false;
                });
            }
            else {
                this.results = resultIntermediate;
                this.searchInProgress = false;
            }
        };
        PortalSearchPage.prototype.reset = function () {
            this.results = [];
            this.criteria = this.getDefaultCriteria();
        };
        PortalSearchPage.prototype.ngOnInit = function () {
            this.reset();
        };
        return PortalSearchPage;
    }());
    PortalSearchPage.decorators = [
        { type: i0.Injectable }
    ];

    var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
    var dateReviver = function (key, value) {
        if (typeof value === 'string') {
            var a = reISO.exec(value);
            if (a) {
                return new Date(value);
            }
        }
        return value;
    };
    var ɵ0 = dateReviver;
    var PortalSearchPageComponent = /** @class */ (function (_super) {
        __extends(PortalSearchPageComponent, _super);
        function PortalSearchPageComponent(injectorChild, messageService, searchTemplateApi, auth, viewPort, searchPage) {
            var _this = _super.call(this, injectorChild) || this;
            _this.messageService = messageService;
            _this.searchTemplateApi = searchTemplateApi;
            _this.auth = auth;
            _this.viewPort = viewPort;
            _this.searchPage = searchPage;
            _this.searchCriteriaTemplatesEnabled = true;
            _this.enableSearchToolbar = false;
            _this.onSearch = new i0.EventEmitter();
            _this.newTemplateDefaultFlag = false;
            return _this;
        }
        PortalSearchPageComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.validatedInputs();
            if (this.pageName) {
                this.fetchSearchTemplates();
            }
        };
        PortalSearchPageComponent.prototype.onSearchTemplateSelection = function (event) {
            var _this = this;
            if (event.value) {
                this.activeSearchTemplateId = event.value;
                this.searchTemplateApi
                    .getTemplateById(this.activeSearchTemplateId)
                    .subscribe(function (template) {
                    _this.activeSearchTemplate = template;
                    // TODO allow override
                    _this.searchPage.criteria = JSON.parse(template.criteriaAsJson, dateReviver);
                });
            }
            else {
                this.activeSearchTemplateId = null;
                this.activeSearchTemplate = null;
            }
        };
        PortalSearchPageComponent.prototype.fetchSearchTemplates = function () {
            var _this = this;
            this.searchTemplateApi
                .getSearchTemplatesLegacy(this.auth.currentUser().userId, this.viewPort.appName, this.pageName)
                .subscribe(function (templates) {
                _this.searchTemplateOptions = __spread([
                    { value: null, label: 'Pick saved template' }
                ], templates.map(function (t) { return ({ label: t.name, value: t.id }); }));
                // if a default template exists preselect it
                var defaultTemplate = templates.find(function (t) { return t.defaultTemplate; });
                if (defaultTemplate) {
                    _this.onSearchTemplateSelection({ value: defaultTemplate.id });
                }
            });
        };
        PortalSearchPageComponent.prototype.validatedInputs = function () {
            if (!this.searchPage) {
                console.error("<tk-search-page> can only be used in a component that extends \"PortalSearchPage\". See README.MD chapter #Generic Search Page");
            }
            if (!this.pageName) {
                console.warn("You did not specify [pageName] attribute for search page component. Without it, some features will not work.");
            }
        };
        PortalSearchPageComponent.prototype.triggerSearch = function () {
            console.log("Click search");
            this.onSearch.emit(1);
        };
        PortalSearchPageComponent.prototype.triggerCriteriaTemplateUpdate = function () {
            var _this = this;
            console.log('update tempalte');
            this.activeSearchTemplate.criteriaAsJson = JSON.stringify(this.searchPage.criteria);
            this.searchTemplateApi
                .updateTemplate(this.activeSearchTemplateId, this.activeSearchTemplate)
                .subscribe(function (savedTemplate) {
                _this.activeSearchTemplate = savedTemplate;
                _this.messageService.add({
                    severity: 'success',
                    summary: 'Search template updated'
                });
            });
        };
        PortalSearchPageComponent.prototype.triggerCriteriaTemplateSave = function (event, op) {
            var _this = this;
            this.searchTemplateApi
                .createNewTemplate({
                application: this.viewPort.appName,
                page: this.pageName,
                user: this.auth.currentUser().userId,
                name: this.newTemplateName,
                defaultTemplate: this.newTemplateDefaultFlag,
                criteriaAsJson: JSON.stringify(this.searchPage.criteria)
            })
                .subscribe(function (savedTemplate) {
                _this.activeSearchTemplate = savedTemplate;
                _this.searchTemplateOptions.push({
                    label: savedTemplate.name,
                    value: savedTemplate.id
                });
                _this.activeSearchTemplateId = savedTemplate.id;
                op.hide();
                _this.newTemplateDefaultFlag = false;
                _this.newTemplateName = undefined;
                _this.messageService.add({
                    severity: 'success',
                    summary: 'Search template saved'
                });
            });
        };
        PortalSearchPageComponent.prototype.triggerCriteriaTemplateDelete = function () {
            var _this = this;
            this.searchTemplateApi
                .deleteTemplate(this.activeSearchTemplateId)
                .subscribe(function (ok) {
                _this.messageService.add({
                    severity: 'info',
                    summary: 'Search template deleted'
                });
                _this.searchTemplateOptions.splice(_this.searchTemplateOptions.findIndex(function (i) { return i.value == _this.activeSearchTemplateId; }), 1);
                _this.activeSearchTemplateId = undefined;
                _this.activeSearchTemplate = undefined;
            });
        };
        return PortalSearchPageComponent;
    }(PortalPageComponent));
    PortalSearchPageComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-portal-search-page',
                    template: "<tk-portal-page\n  header=\"{{ header }}\"\n  [leftToolbar]=\"pageToolbarLeft\"\n  [rightToolbar]=\"pageToolbarRight\"\n>\n  <div id=\"criteria-panel\" tkCollapsible>\n    <ng-content select=\"[criteria]\"></ng-content>\n  </div>\n\n  <div id=\"search-results\">\n    <ng-content select=\"[results]\"></ng-content>\n  </div>\n</tk-portal-page>\n\n<ng-template #pageToolbarLeft>\n  <tk-toolbar-item\n    *ngIf=\"enableSearchToolbar\"\n    title=\"Suchen\"\n    icon=\"search\"\n    (click)=\"triggerSearch()\"\n  ></tk-toolbar-item>\n  <ng-container *ngTemplateOutlet=\"leftToolbar\"></ng-container>\n</ng-template>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <p-overlayPanel\n    #op\n    [dismissable]=\"true\"\n    [showCloseIcon]=\"true\"\n    appendTo=\"body\"\n  >\n    <div class=\"p-fluid\" [ngStyle]=\"{ width: '400px' }\">\n      <h5>Save a new search template</h5>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"templateName\">Template Name</label>\n        <div class=\"p-col-12 p-md-8\">\n          <input\n            id=\"templateName\"\n            pInputText\n            type=\"text\"\n            [(ngModel)]=\"newTemplateName\"\n          />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"defaultFlag\">Set as default?</label>\n        <!--      </div>-->\n        <div class=\"p-col-12 p-md-8\">\n          <p-inputSwitch\n            id=\"defaultFlag\"\n            [(ngModel)]=\"newTemplateDefaultFlag\"\n          ></p-inputSwitch>\n        </div>\n      </div>\n\n      <div class=\"p-grid\">\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Cancel\"\n            (click)=\"op.hide()\"\n            class=\"p-button-secondary p-col-12\"\n          ></button>\n        </div>\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Save\"\n            class=\"p-col-12\"\n            (click)=\"triggerCriteriaTemplateSave($event, op)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </p-overlayPanel>\n  <tk-toolbar-item\n    *ngIf=\"searchCriteriaTemplatesEnabled\"\n    title=\"Neue Suchvorlage Erstellen\"\n    icon=\"plus\"\n    (click)=\"op.show($event)\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Speichern\"\n    icon=\"save\"\n    (click)=\"triggerCriteriaTemplateUpdate()\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Loeschen\"\n    icon=\"trash\"\n    (click)=\"triggerCriteriaTemplateDelete()\"\n  ></tk-toolbar-item>\n  <div class=\"search-template-box\" *ngIf=\"searchTemplateOptions\">\n    <p-dropdown\n      [style]=\"{ width: '150px' }\"\n      appendTo=\"body\"\n      [ngModel]=\"activeSearchTemplateId\"\n      [options]=\"searchTemplateOptions\"\n      [filter]=\"true\"\n      (onChange)=\"onSearchTemplateSelection($event)\"\n    ></p-dropdown>\n  </div>\n\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n",
                    styles: [".search-template-box{display:inline-block;padding-top:.2em}.search-template-box ::ng-deep .p-dropdown-label{padding:.5em}"]
                },] }
    ];
    PortalSearchPageComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i2.MessageService },
        { type: SearchTemplateAPIService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] },
        { type: PortalViewportComponent },
        { type: PortalSearchPage, decorators: [{ type: i0.SkipSelf }, { type: i0.Optional }] }
    ]; };
    PortalSearchPageComponent.propDecorators = {
        searchCriteriaTemplatesEnabled: [{ type: i0.Input }],
        enableSearchToolbar: [{ type: i0.Input }],
        onSearch: [{ type: i0.Output }],
        pageName: [{ type: i0.Input }]
    };

    var TkIfPermDirective = /** @class */ (function () {
        function TkIfPermDirective(templateRef, viewContainer, authService) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.authService = authService;
        }
        Object.defineProperty(TkIfPermDirective.prototype, "tkIfPerm", {
            set: function (permission) {
                this.permission = permission;
            },
            enumerable: false,
            configurable: true
        });
        TkIfPermDirective.prototype.ngOnInit = function () {
            if (!this.authService.hasPermission(this.permission)) {
                console.log("Hide element because no perm " + this.permission);
                this.viewContainer.clear();
            }
            else {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        };
        return TkIfPermDirective;
    }());
    TkIfPermDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[tkIfPerm]' },] }
    ];
    TkIfPermDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] }
    ]; };
    TkIfPermDirective.propDecorators = {
        loaderState: [{ type: i0.Input }],
        tkIfPerm: [{ type: i0.Input }]
    };

    // TODO is <a> without click actually OK? How about a11y?
    var ToolbarItemComponent = /** @class */ (function () {
        function ToolbarItemComponent() {
        }
        ToolbarItemComponent.prototype.ngOnInit = function () { };
        return ToolbarItemComponent;
    }());
    ToolbarItemComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-toolbar-item',
                    template: "\n    <a\n      pRipple\n      *ngIf=\"link\"\n      class=\"toolbar-item\"\n      [href]=\"link\"\n      [target]=\"linkTarget\"\n      [rel]=\"linkRel\"\n      title=\"{{ title }}\"\n      role=\"button\"\n      ><i class=\"pi pi-{{icon}}\"></i>\n    </a>\n    <a\n      pRipple\n      *ngIf=\"!link\"\n      href=\"javascript:void(0)\"\n      class=\"toolbar-item\"\n      title=\"{{ title }}\"\n      role=\"button\"\n      ><i class=\"pi pi-{{icon}}\"></i>\n    </a>\n  ",
                    styles: ["\n      .toolbar-item {\n        color: #757575;\n        display: inline-block;\n        padding: 3px;\n        text-align: center;\n        font-size: 1.3em;\n        transition: all 0.4s;\n      }\n      .toolbar-item i {\n        transition: all 0.4s;\n        font-size: 1.5rem;\n        padding: 0.2em;\n      }\n      .toolbar-item:hover {\n        background-color: #e8e8e8;\n      }\n      .toolbar-item:focus {\n        background-color: #e8e8e8;\n      }\n\n    "]
                },] }
    ];
    ToolbarItemComponent.ctorParameters = function () { return []; };
    ToolbarItemComponent.propDecorators = {
        title: [{ type: i0.Input }],
        permission: [{ type: i0.Input }],
        link: [{ type: i0.Input }],
        linkTarget: [{ type: i0.Input }],
        linkRel: [{ type: i0.Input }],
        action: [{ type: i0.Input }],
        icon: [{ type: i0.Input }]
    };

    var HttpProgressInterceptor = /** @class */ (function () {
        function HttpProgressInterceptor(loaderService) {
            this.loaderService = loaderService;
            this.requests = [];
        }
        HttpProgressInterceptor.prototype.removeRequest = function (req) {
            var i = this.requests.indexOf(req);
            if (i >= 0) {
                this.requests.splice(i, 1);
            }
            this.loaderService.isLoading.next(this.requests.length > 0);
        };
        HttpProgressInterceptor.prototype.intercept = function (req, next) {
            var _this = this;
            var started = Date.now();
            this.requests.push(req);
            this.loaderService.isLoading.next(true);
            return next.handle(req).pipe(operators.tap(function (event) {
                if (event instanceof i1.HttpResponse) {
                    var elapsed = Date.now() - started;
                    console.log("Request for " + req.urlWithParams + " took " + elapsed + " ms with result " + event.status + ". " + _this.requests.length);
                    _this.removeRequest(req);
                }
            }, function (error) {
                console.log("Http err: status " + error.status + " " + JSON.stringify(error));
                _this.removeRequest(req);
            }));
        };
        return HttpProgressInterceptor;
    }());
    HttpProgressInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function HttpProgressInterceptor_Factory() { return new HttpProgressInterceptor(i0.ɵɵinject(HttpProgressLoaderService)); }, token: HttpProgressInterceptor, providedIn: "root" });
    HttpProgressInterceptor.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    HttpProgressInterceptor.ctorParameters = function () { return [
        { type: HttpProgressLoaderService }
    ]; };

    function tkitPortalInitializer(configService, translateService, authService) {
        var startTime = new Date().getTime();
        console.log("Start tkit portal module initializer");
        return function () { return configService
            .init()
            .then(function () { return console.log('Config initialized, next: init auth'); })
            .then(function () { return authService.init(); })
            .then(function (res) {
            var _a, _b;
            console.log("Auth service init resolved " + res + ", next: set default lang");
            var availLangsCSV = configService.getProperty('SUPPORTED_LANGUAGES') || 'en,de';
            var availableLangs = availLangsCSV.split(',').map(function (l) { return l.trim(); });
            var lang = ((_b = (_a = authService.currentUser().accountSettings) === null || _a === void 0 ? void 0 : _a.localeAndTimeSettings) === null || _b === void 0 ? void 0 : _b.locale) || translateService.getBrowserLang();
            lang = availableLangs.includes(lang) ? lang : 'de';
            translateService.use(lang);
            configService.setLang(lang);
            var duration = new Date().getTime() - startTime;
            console.log("Tkit portal module initializer finished in " + (duration / 1000).toFixed(2) + "s");
            return true;
        })
            .catch(function (err) {
            console.log("\n      #####################################\n      Tkit portal lib initialization failed\n      #####################################\n      ");
            configService.error = err;
            //throw err;
        }); };
    }

    var PortalItemService = /** @class */ (function () {
        function PortalItemService(http) {
            this.http = http;
            this.url = 'portal-api/v1/portalItems/search';
        }
        PortalItemService.prototype.searchForServices = function (query, portalId, count) {
            var params = new i1.HttpParams();
            if (query) {
                params = params.set('query', query);
            }
            if (portalId) {
                params = params.set('portal-id', portalId);
            }
            if (count) {
                params = params.set('count', count.toString());
            }
            return this.http.get(this.url, {
                params: params
            });
        };
        return PortalItemService;
    }());
    PortalItemService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PortalItemService_Factory() { return new PortalItemService(i0.ɵɵinject(i1.HttpClient)); }, token: PortalItemService, providedIn: "root" });
    PortalItemService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    PortalItemService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var SearchItemType;
    (function (SearchItemType) {
        SearchItemType["APPLICATION"] = "APPLICATION";
        SearchItemType["OPEN_SEARCH"] = "OPEN_SEARCH";
    })(SearchItemType || (SearchItemType = {}));

    var SearchBarComponent = /** @class */ (function () {
        function SearchBarComponent(searchService, config, translateService, messageService) {
            this.searchService = searchService;
            this.config = config;
            this.translateService = translateService;
            this.messageService = messageService;
            this.SearchItemType = SearchItemType;
            this.searchClick = new i0.EventEmitter();
        }
        Object.defineProperty(SearchBarComponent.prototype, "openInSearchItem", {
            get: function () {
                return {
                    type: SearchItemType.OPEN_SEARCH,
                    name: 'Open in search view',
                    url: "" + this.searchUrl + this.query.value,
                    queryString: this.query.value,
                };
            },
            enumerable: false,
            configurable: true
        });
        SearchBarComponent.prototype.ngOnInit = function () {
            this.query = new forms.FormControl('');
            var searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
            this.searchUrl = searchUrl + "/search?query=";
        };
        SearchBarComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            setTimeout(function () { return _this.searchInputViewChild.focusInput(); }, 0);
        };
        SearchBarComponent.prototype.search = function (event) {
            var _this = this;
            this.searchService.searchForServices(event.query, null).subscribe(function (data) {
                data = data.slice(0, _this.maxResults);
                data.push(_this.openInSearchItem);
                _this.results = data;
            });
        };
        SearchBarComponent.prototype.select = function (event) {
            if (event.type === SearchItemType.OPEN_SEARCH) {
                this.query.setValue(event.queryString);
            }
            else {
                this.query.setValue(event.name);
            }
            window.open(event.url);
        };
        SearchBarComponent.prototype.goToSearch = function (clickEnter) {
            if (this.query.value) {
                window.open("" + this.searchUrl + this.query.value);
            }
            else {
                if (clickEnter === false) {
                    this.messageService.add({
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        summary: this.translateService.instant('QUICK_SEARCH_FORM.WRONG_DATA'),
                        severity: 'error',
                    });
                }
            }
        };
        SearchBarComponent.prototype.onSearchClick = function (event, val) {
            this.searchClick.emit({ event: event, val: val });
        };
        return SearchBarComponent;
    }());
    SearchBarComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-search-bar',
                    template: "<div class=\"search-bar\">\n  <form [spellcheck]=\"false\" (ngSubmit)=\"goToSearch(false)\">\n    <p-autoComplete\n      #searchInput\n      [formControl]=\"query\"\n      [suggestions]=\"results\"\n      (completeMethod)=\"search($event)\"\n      (onSelect)=\"select($event)\"\n      (click)=\"onSearchClick($event, true)\"\n      (keydown.escape)=\"onSearchClick($event, false)\"\n      (keydown.enter)=\"goToSearch(true)\"\n      [style]=\"{ width: '100%', height: '4rem' }\"\n      placeholder=\"Search for apps\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <span\n            *ngSwitchCase=\"SearchItemType.APPLICATION\"\n            class=\"item-badge item-app\"\n            >APP</span\n          >\n        <span>{{ item.name }}</span>\n        </ng-container>\n      </ng-template>\n    </p-autoComplete>\n  </form>\n</div>\n",
                    styles: [":host{flex:1 1 auto}.search-bar ::ng-deep .item-badge{font-size:10px;border-radius:.1rem;margin-right:1em;padding:.25em .5em;text-transform:uppercase;font-weight:700;letter-spacing:.3px}.search-bar ::ng-deep .item-badge.item-app{background-color:green;color:#fff}"]
                },] }
    ];
    SearchBarComponent.ctorParameters = function () { return [
        { type: PortalItemService },
        { type: ConfigurationService },
        { type: core.TranslateService },
        { type: i2.MessageService }
    ]; };
    SearchBarComponent.propDecorators = {
        searchInputViewChild: [{ type: i0.ViewChild, args: ['searchInput',] }],
        searchClick: [{ type: i0.Output }]
    };

    var ResultTextComponent = /** @class */ (function () {
        function ResultTextComponent() {
        }
        ;
        return ResultTextComponent;
    }());
    ResultTextComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: "tk-result-text",
                    template: "\n    <span *ngIf=\"resultsCount > 0 && state.totalRecords > 0; else noResults\">\n      {{ 'SEARCH.SHOWING' | translate }} {{ state.first + 1 }} -\n      {{\n        state.rows * (state.page + 1) < state.totalRecords\n          ? state.rows * (state.page + 1)\n          : state.totalRecords\n      }}\n      {{ 'SEARCH.OUT_OF_TOTAL' | translate }} {{ state.totalRecords }}\n    </span>\n    <ng-template #noResults>\n      {{ 'SEARCH.NO_RESULTS' | translate }}\n    </ng-template>\n  "
                },] }
    ];
    ResultTextComponent.ctorParameters = function () { return []; };
    ResultTextComponent.propDecorators = {
        resultsCount: [{ type: i0.Input }],
        state: [{ type: i0.Input }]
    };
    var CustomTableState = /** @class */ (function () {
        function CustomTableState() {
        }
        return CustomTableState;
    }());

    var FeedbackComponent = /** @class */ (function () {
        function FeedbackComponent(fb) {
            var _this = this;
            this.fb = fb;
            this.minLength = 5;
            this.submitDisabled = false;
            this.feedbackDataChange = new i0.EventEmitter();
            this.feedbackSubmit = new i0.EventEmitter();
            this.commentRequired = false;
            this.requiredCommentValidator = function (fg) {
                var rating = fg.controls.rating.value;
                var comment = fg.controls.comment.value;
                if (rating > 0 && rating < 5) {
                    _this.commentRequired = true;
                    return comment.length >= _this.minLength ? null : { missingComment: true };
                }
                else {
                    _this.commentRequired = false;
                    return null;
                }
            };
        }
        Object.defineProperty(FeedbackComponent.prototype, "feedbackData", {
            set: function (feedback) {
                if (this.form) {
                    this.form.patchValue(feedback);
                }
            },
            enumerable: false,
            configurable: true
        });
        FeedbackComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.form = this.fb.group({
                rating: [0, [forms.Validators.required, forms.Validators.min(1), forms.Validators.max(5)]],
                comment: ['', forms.Validators.minLength(this.minLength)],
                anonymous: false
            }, { validators: this.requiredCommentValidator });
            this.form.valueChanges.subscribe(function (values) {
                _this.feedbackDataChange.emit(values);
            });
        };
        FeedbackComponent.prototype.submitFeedback = function () {
            if (this.form.valid && !this.submitDisabled) {
                this.submitDisabled = true;
                this.feedbackSubmit.emit(this.form.value);
            }
        };
        return FeedbackComponent;
    }());
    FeedbackComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-feedback',
                    template: "<form [formGroup]=\"form\">\n  <div class=\"feedback\">\n    <div>Rate app</div>\n    <div class=\"rating\">\n      <p-rating [cancel]=\"false\" formControlName=\"rating\"></p-rating>\n    </div>\n    <div>Comments {{ commentRequired ? \"(required)\" : \"(optional)\" }}</div>\n    <div>\n      <textarea\n        class=\"fill\"\n        pInputTextarea\n        rows=\"5\"\n        placeholder=\"Min. {{ minLength }} characters\"\n        formControlName=\"comment\"\n      ></textarea>\n    </div>\n    <div class=\"anon\">\n      <p-checkbox\n        name=\"anon\"\n        value=\"Anonymous\"\n        label=\"Anonymous\"\n        formControlName=\"anonymous\"\n      ></p-checkbox>\n    </div>\n    <div class=\"submit\">\n      <button\n        pButton\n        [disabled]=\"form.invalid || submitDisabled\"\n        label=\"Submit\"\n        (click)=\"submitFeedback()\"\n      ></button>\n    </div>\n  </div>\n</form>\n",
                    styles: [".feedback .fill{width:15rem;background-color:#efefef}.feedback .rating{text-align:center}.feedback .anon{padding:.5rem 0}.feedback .submit{padding:.5em 0}.feedback .submit button{width:100%}"]
                },] }
    ];
    FeedbackComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    FeedbackComponent.propDecorators = {
        submitDisabled: [{ type: i0.Input }],
        feedbackData: [{ type: i0.Input }],
        feedbackDataChange: [{ type: i0.Output }],
        feedbackSubmit: [{ type: i0.Output }]
    };

    var SupportTicketComponent = /** @class */ (function () {
        function SupportTicketComponent(fb) {
            this.fb = fb;
            this.display = false;
            this.displayChange = new i0.EventEmitter();
            this.submitTicket = new i0.EventEmitter();
        }
        SupportTicketComponent.prototype.ngOnInit = function () {
            this.formGroup = this.fb.group({
                title: ['', forms.Validators.required],
                description: ['', forms.Validators.required]
            });
        };
        SupportTicketComponent.prototype.close = function () {
            this.displayChange.emit(false);
        };
        SupportTicketComponent.prototype.submit = function () {
            this.submitTicket.emit(this.formGroup.value);
        };
        return SupportTicketComponent;
    }());
    SupportTicketComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-support-ticket',
                    template: "<p-dialog\n  header=\"Create Support Ticket\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '500px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close()\"\n>\n  <form [formGroup]=\"formGroup\">\n    <div class=\"p-grid\">\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <input id=\"ticket-title\" formControlName=\"title\" pInputText />\n          <label for=\"ticket-title\">Title</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <textarea\n            id=\"ticket-description\"\n            formControlName=\"description\"\n            pInputTextarea\n            rows=\"10\"\n          >\n          </textarea>\n          <label for=\"ticket-description\">Description</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <button\n          pButton\n          label=\"Submit\"\n          (click)=\"submit()\"\n          [disabled]=\"formGroup.invalid\"\n        ></button>\n      </div>\n    </div>\n  </form>\n</p-dialog>\n",
                    styles: ["input,textarea{width:100%;resize:none}"]
                },] }
    ];
    SupportTicketComponent.ctorParameters = function () { return [
        { type: forms.FormBuilder }
    ]; };
    SupportTicketComponent.propDecorators = {
        display: [{ type: i0.Input }],
        displayChange: [{ type: i0.Output }],
        submitTicket: [{ type: i0.Output }]
    };

    var IconsService = /** @class */ (function () {
        function IconsService(http) {
            this.http = http;
        }
        IconsService.prototype.getPrimeicons = function () {
            return this.http
                .get('./portal-lib/assets/primeicons.csv', { responseType: 'text' })
                .pipe(operators.map(function (data) { return data.split('\n'); }));
        };
        return IconsService;
    }());
    IconsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function IconsService_Factory() { return new IconsService(i0.ɵɵinject(i1.HttpClient)); }, token: IconsService, providedIn: "root" });
    IconsService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    IconsService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var LaunchpadService = /** @class */ (function () {
        function LaunchpadService(httpClient) {
            this.httpClient = httpClient;
            this.url = "./launchpad-api/launchpad";
        }
        LaunchpadService.prototype.getLaunchpads = function (criteria) {
            var parameters = new i1.HttpParams();
            Object.keys(criteria).forEach(function (key) { return parameters.set(key, criteria[key]); });
            var options = { params: parameters };
            return this.httpClient.get(this.url, options);
        };
        LaunchpadService.prototype.addToLaunchpad = function (id, createTileDTO) {
            var httpOptions = {
                headers: new i1.HttpHeaders({
                    "Content-Type": "application/json"
                })
            };
            return this.httpClient.post(this.url + "/" + id + "/tiles", createTileDTO, httpOptions);
        };
        return LaunchpadService;
    }());
    LaunchpadService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LaunchpadService_Factory() { return new LaunchpadService(i0.ɵɵinject(i1.HttpClient)); }, token: LaunchpadService, providedIn: "root" });
    LaunchpadService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: "root" },] }
    ];
    LaunchpadService.ctorParameters = function () { return [
        { type: i1.HttpClient }
    ]; };

    var AddToLaunchpadComponent = /** @class */ (function () {
        function AddToLaunchpadComponent(iconsService, fb, launchpadService, auth, messageService, confService) {
            this.iconsService = iconsService;
            this.fb = fb;
            this.launchpadService = launchpadService;
            this.auth = auth;
            this.messageService = messageService;
            this.confService = confService;
            this.closed = new i0.EventEmitter();
            this.launchpads = [];
        }
        AddToLaunchpadComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.iconsService.getPrimeicons().subscribe(function (icons) { return (_this.icons = icons.filter(function (i) { return !!i; })); }, function (error) { return console.log(error); });
            this.launchpadForm = this.fb.group({
                icon: ['', forms.Validators.required],
                type: [{ value: 'FAVOURITE', disabled: true }],
                name: ['', forms.Validators.required],
                appId: [{ value: this.appId, disabled: true }],
                appUrl: [
                    {
                        value: window.location.href.replace(window.location.origin, ''),
                        disabled: true,
                    },
                ],
                launchpad: ['', forms.Validators.required],
            });
            var launchpadCriteria = {
                portalId: this.confService.getProperty('TKIT_PORTAL_ID'),
            };
            this.launchpadService.getLaunchpads(launchpadCriteria).subscribe(function (data) { return (_this.launchpads = data); }, function (error) { return console.log(error); });
        };
        AddToLaunchpadComponent.prototype.addToLaunchpad = function () {
            var _this = this;
            var createTileDTO = {
                appId: this.launchpadForm.get('appId').value,
                appUrl: this.launchpadForm.get('appUrl').value,
                name: this.launchpadForm.get('name').value,
                type: this.launchpadForm.get('type').value,
                icon: this.launchpadForm.get('icon').value,
            };
            this.launchpadService.addToLaunchpad(this.launchpadForm.get('launchpad').value.id, createTileDTO).subscribe(function () {
                _this.messageService.add({
                    summary: 'App added to favourites successfully',
                    severity: 'success',
                });
                _this.close();
            }, function () {
                _this.messageService.add({
                    summary: 'Failed to add app to favourites',
                    severity: 'error',
                });
            });
        };
        AddToLaunchpadComponent.prototype.filterIcons = function (event) {
            var query = event.query.toLowerCase();
            this.filteredIcons = this.icons.filter(function (icon) { return icon.toLowerCase().includes(query); });
        };
        AddToLaunchpadComponent.prototype.close = function (event) {
            this.closed.emit(false);
        };
        return AddToLaunchpadComponent;
    }());
    AddToLaunchpadComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'tk-add-to-launchpad',
                    template: "<p-dialog\n  header=\"Add to Favourites\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '700px', 'max-height': '600px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close($event)\"\n  [modal]=\"true\"\n>\n  <form [formGroup]=\"launchpadForm\" (ngSubmit)=\"addToLaunchpad()\">\n    <div class=\"p-fluid modal-content\">\n      <div class=\"p-field p-grid\">\n        <label for=\"name\" class=\"p-col-12 p-md-3\">Tile Name: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"name\" id=\"name\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appId\" class=\"p-col-12 p-md-3\">AppId: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appId\" id=\"appId\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appUrl\" class=\"p-col-12 p-md-3\">AppUrl: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appUrl\" id=\"appUrl\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"launchpad\" class=\"p-col-12 p-md-3\">Launchpad: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-dropdown\n            inputId=\"launchpad\"\n            [options]=\"launchpads\"\n            formControlName=\"launchpad\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_LAUNCHPAD' | translate }}\"\n          >\n            <ng-template let-item pTemplate=\"item\">\n              <span class=\"custom-launchpad-container\">\n                <span> {{ item.name }} </span>\n                <span>\n                  {{ item.type }}\n                </span>\n              </span>\n            </ng-template>\n          </p-dropdown>\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"type\" class=\"p-col-12 p-md-3\">{{ \"LAUNCHPAD.TILE_TYPE\" | translate }}: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input id=\"text\" type=\"text\" pInputText formControlName=\"type\" value=\"FAVOURITE\" readonly />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"icon\" class=\"p-col-12 p-md-3\">Icon: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-autoComplete\n            [suggestions]=\"filteredIcons\"\n            inputId=\"icon\"\n            formControlName=\"icon\"\n            (completeMethod)=\"filterIcons($event)\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_ICON' | translate }}\"\n            forceSelection=\"true\"\n            completeOnFocus=\"true\"\n          >\n            <ng-template let-icon pTemplate=\"item\">\n              <div class=\"custom-item-container\">\n                <div>{{ icon }}</div>\n                <span class=\"pi pi-{{icon}}\"></span>\n              </div>\n            </ng-template>\n          </p-autoComplete>\n        </div>\n      </div>\n    </div>\n    <p-footer class=\"submit\">\n      <button\n        pButton\n        type=\"submit\"\n        label=\"{{ 'LAUNCHPAD.SAVE' | translate }}\"\n        [disabled]=\"!launchpadForm.valid\"\n      ></button>\n    </p-footer>\n  </form>\n</p-dialog>\n",
                    styles: [".custom-launchpad-container{display:flex}.custom-launchpad-container span:last-of-type{margin-left:auto}.submit{padding:.5em 0;margin-top:20px}.submit button{margin-top:.5em;width:100%}.custom-item-container div{display:inline-block}.custom-item-container span{float:left;margin-right:5px}"]
                },] }
    ];
    AddToLaunchpadComponent.ctorParameters = function () { return [
        { type: IconsService },
        { type: forms.FormBuilder },
        { type: LaunchpadService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [AUTH_SERVICE,] }] },
        { type: i2.MessageService },
        { type: ConfigurationService }
    ]; };
    AddToLaunchpadComponent.propDecorators = {
        display: [{ type: i0.Input }],
        appId: [{ type: i0.Input }],
        closed: [{ type: i0.Output }]
    };

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var TooltipAriaDirective = /** @class */ (function (_super) {
        __extends(TooltipAriaDirective, _super);
        function TooltipAriaDirective(el, zone) {
            var _this = _super.call(this, el, zone) || this;
            _this.el = el;
            _this.zone = zone;
            return _this;
        }
        TooltipAriaDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                switch (_this.tooltipEvent) {
                    case 'hover':
                        _this.initHoverForTooltipEvent();
                        break;
                    case 'focus':
                        _this.initFocusForTooltipEvent();
                        break;
                    case 'hover|focus':
                        _this.initHoverForTooltipEvent();
                        _this.initFocusForTooltipEvent();
                        break;
                    case 'focus|hover':
                        _this.initHoverForTooltipEvent();
                        _this.initFocusForTooltipEvent();
                        break;
                }
            });
        };
        TooltipAriaDirective.prototype.initHoverForTooltipEvent = function () {
            this.mouseEnterListener = this.onMouseEnter.bind(this);
            this.mouseLeaveListener = this.onMouseLeave.bind(this);
            this.clickListener = this.onClick.bind(this);
            this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);
            this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);
            this.el.nativeElement.addEventListener('click', this.clickListener);
        };
        TooltipAriaDirective.prototype.initFocusForTooltipEvent = function () {
            this.focusListener = this.onFocus.bind(this);
            this.blurListener = this.onBlur.bind(this);
            this.el.nativeElement.addEventListener('focus', this.focusListener);
            this.el.nativeElement.addEventListener('blur', this.blurListener);
        };
        Object.defineProperty(TooltipAriaDirective.prototype, "pTooltipText", {
            set: function (text) {
                this.text = text;
            },
            enumerable: false,
            configurable: true
        });
        return TooltipAriaDirective;
    }(tooltip.Tooltip));
    TooltipAriaDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[pTooltip-aria]' },] }
    ];
    TooltipAriaDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone }
    ]; };
    TooltipAriaDirective.propDecorators = {
        pTooltipText: [{ type: i0.Input, args: ['pTooltip-aria',] }]
    };

    function HttpLoaderFactory2(http) {
        return new httpLoader.TranslateHttpLoader(http, './portal-lib/assets/i18n/');
    }
    function StandardTranslateHttpLoader(http) {
        return new ngxTranslateMultiHttpLoader.MultiTranslateHttpLoader(http, [
            { prefix: './assets/i18n/', suffix: '.json' },
            { prefix: './portal-lib/assets/i18n/', suffix: '.json' },
        ]);
    }
    var ɵ0$1 = tkitPortalInitializer;
    var TkitPortalModule = /** @class */ (function () {
        function TkitPortalModule() {
        }
        return TkitPortalModule;
    }());
    TkitPortalModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        PortalViewportComponent,
                        ToolbarItemComponent,
                        AppMenuComponent,
                        AppSubMenuComponent,
                        HeaderComponent,
                        AppFooterComponent,
                        HelpEditDialogComponent,
                        BreadcrumbComponent,
                        AppInlineProfileComponent,
                        HttpProgressLoaderComponent,
                        PortalPageComponent,
                        PanelHeaderComponent,
                        CollapsibleDirective,
                        ActionDirective,
                        TooltipAriaDirective,
                        NoHelpInfoComponent,
                        PortalSearchPageComponent,
                        LoadingComponent,
                        TkIfPermDirective,
                        SearchBarComponent,
                        ResultTextComponent,
                        FeedbackComponent,
                        AddToLaunchpadComponent,
                        SupportTicketComponent,
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        // KeycloakAngularModule,
                        // primeng
                        // TODO do not import all!!!
                        autocomplete.AutoCompleteModule,
                        breadcrumb.BreadcrumbModule,
                        button.ButtonModule,
                        calendar.CalendarModule,
                        card.CardModule,
                        checkbox.CheckboxModule,
                        confirmdialog.ConfirmDialogModule,
                        dialog.DialogModule,
                        dynamicdialog.DynamicDialogModule,
                        dropdown.DropdownModule,
                        inputswitch.InputSwitchModule,
                        inputtext.InputTextModule,
                        inputtextarea.InputTextareaModule,
                        menu.MenuModule,
                        message.MessageModule,
                        messages.MessagesModule,
                        overlaypanel.OverlayPanelModule,
                        panel.PanelModule,
                        panelmenu.PanelMenuModule,
                        rating.RatingModule,
                        ripple.RippleModule,
                        scrollpanel.ScrollPanelModule,
                        skeleton.SkeletonModule,
                        table.TableModule,
                        toast.ToastModule,
                        togglebutton.ToggleButtonModule,
                        tooltip.TooltipModule,
                        // end primeng modules
                        i1.HttpClientModule,
                        cashew.HttpCacheInterceptorModule.forRoot(),
                        core.TranslateModule,
                    ],
                    exports: [
                        forms.FormsModule,
                        // reexport primeng
                        autocomplete.AutoCompleteModule,
                        breadcrumb.BreadcrumbModule,
                        button.ButtonModule,
                        calendar.CalendarModule,
                        card.CardModule,
                        checkbox.CheckboxModule,
                        confirmdialog.ConfirmDialogModule,
                        dialog.DialogModule,
                        dynamicdialog.DynamicDialogModule,
                        dropdown.DropdownModule,
                        inputswitch.InputSwitchModule,
                        inputtext.InputTextModule,
                        inputtextarea.InputTextareaModule,
                        menu.MenuModule,
                        message.MessageModule,
                        messages.MessagesModule,
                        overlaypanel.OverlayPanelModule,
                        paginator.PaginatorModule,
                        panel.PanelModule,
                        panelmenu.PanelMenuModule,
                        rating.RatingModule,
                        ripple.RippleModule,
                        selectbutton.SelectButtonModule,
                        skeleton.SkeletonModule,
                        table.TableModule,
                        toast.ToastModule,
                        togglebutton.ToggleButtonModule,
                        tooltip.TooltipModule,
                        // angular common
                        i1.HttpClientModule,
                        cashew.HttpCacheInterceptorModule,
                        // our components
                        PortalViewportComponent,
                        PortalPageComponent,
                        PortalSearchPageComponent,
                        PanelHeaderComponent,
                        ToolbarItemComponent,
                        LoadingComponent,
                        CollapsibleDirective,
                        ActionDirective,
                        TooltipAriaDirective,
                        TkIfPermDirective,
                        ResultTextComponent,
                    ],
                    entryComponents: [NoHelpInfoComponent],
                    providers: [
                        cashew.useHttpCacheLocalStorage,
                        dynamicdialog.DialogService,
                        {
                            provide: i1.HTTP_INTERCEPTORS,
                            useClass: HttpProgressInterceptor,
                            multi: true,
                        },
                        {
                            provide: i0.APP_INITIALIZER,
                            useFactory: ɵ0$1,
                            multi: true,
                            deps: [ConfigurationService, core.TranslateService, AUTH_SERVICE],
                        },
                    ],
                },] }
    ];

    function provideParent(component, parentType) {
        return {
            provide: parentType || PortalSearchPage,
            useExisting: i0.forwardRef(function () { return component; })
        };
    }

    /*
     * Public API Surface of portal-lib
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.APP_CONFIG = APP_CONFIG;
    exports.AUTH_SERVICE = AUTH_SERVICE;
    exports.ActionDirective = ActionDirective;
    exports.AuthModule = AuthModule;
    exports.BreadcrumbService = BreadcrumbService;
    exports.CollapsibleDirective = CollapsibleDirective;
    exports.ConfigurationService = ConfigurationService;
    exports.DEFAULT_AVATAR_URL = DEFAULT_AVATAR_URL;
    exports.HttpLoaderFactory2 = HttpLoaderFactory2;
    exports.LoadingComponent = LoadingComponent;
    exports.MockAuthModule = MockAuthModule;
    exports.PanelHeaderComponent = PanelHeaderComponent;
    exports.PortalPageComponent = PortalPageComponent;
    exports.PortalSearchPage = PortalSearchPage;
    exports.PortalSearchPageComponent = PortalSearchPageComponent;
    exports.PortalViewportComponent = PortalViewportComponent;
    exports.ResultTextComponent = ResultTextComponent;
    exports.StandardTranslateHttpLoader = StandardTranslateHttpLoader;
    exports.StateService = StateService;
    exports.TkIfPermDirective = TkIfPermDirective;
    exports.TkitPortalModule = TkitPortalModule;
    exports.ToolbarItemComponent = ToolbarItemComponent;
    exports.TooltipAriaDirective = TooltipAriaDirective;
    exports.UserProfileService = UserProfileService;
    exports.initializer = initializer;
    exports.isTkitPage = isTkitPage;
    exports.provideParent = provideParent;
    exports.ɵ0 = ɵ0$1;
    exports.ɵa = MockAuthService;
    exports.ɵb = KeycloakAuthService;
    exports.ɵba = SupportTicketComponent;
    exports.ɵbb = HttpProgressInterceptor;
    exports.ɵbc = tkitPortalInitializer;
    exports.ɵc = PortalApiService;
    exports.ɵd = HelpPageAPIService;
    exports.ɵe = ThemeService;
    exports.ɵf = MenuService;
    exports.ɵg = MenuApiService;
    exports.ɵh = FeedbackApiService;
    exports.ɵi = SupportTicketApiService;
    exports.ɵj = AppMenuComponent;
    exports.ɵk = AppSubMenuComponent;
    exports.ɵl = HeaderComponent;
    exports.ɵm = AppFooterComponent;
    exports.ɵn = HelpEditDialogComponent;
    exports.ɵo = BreadcrumbComponent;
    exports.ɵp = AppInlineProfileComponent;
    exports.ɵq = HttpProgressLoaderComponent;
    exports.ɵr = HttpProgressLoaderService;
    exports.ɵs = NoHelpInfoComponent;
    exports.ɵt = SearchTemplateAPIService;
    exports.ɵu = SearchBarComponent;
    exports.ɵv = PortalItemService;
    exports.ɵw = FeedbackComponent;
    exports.ɵx = AddToLaunchpadComponent;
    exports.ɵy = IconsService;
    exports.ɵz = LaunchpadService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=portal-lib.umd.js.map
