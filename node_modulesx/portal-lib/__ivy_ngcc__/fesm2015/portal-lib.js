import { InjectionToken, Injectable, NgModule, APP_INITIALIZER, ɵɵdefineInjectable, ɵɵinject, Inject, Directive, Renderer2, ElementRef, ViewContainerRef, Input, EventEmitter, Component, Output, ChangeDetectionStrategy, ViewChild, Injector, ContentChild, NgZone, SkipSelf, Optional, TemplateRef, forwardRef } from '@angular/core';
import { of, ReplaySubject, Subject, BehaviorSubject, isObservable } from 'rxjs';
import { CommonModule } from '@angular/common';
import { KeycloakEventType, KeycloakService, KeycloakAngularModule } from 'keycloak-angular';
import { HttpClient, HttpHeaders, HttpResponse, HttpParams, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { withCache, HttpCacheInterceptorModule, useHttpCacheLocalStorage } from '@ngneat/cashew';
import { switchMapTo, shareReplay, tap, filter, map, catchError } from 'rxjs/operators';
import { Router, NavigationEnd, NavigationStart, ActivationEnd, NavigationError, ActivatedRoute } from '@angular/router';
import { FormControl, Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateService, TranslateModule } from '@ngx-translate/core';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { ButtonModule } from 'primeng/button';
import { CalendarModule } from 'primeng/calendar';
import { CardModule } from 'primeng/card';
import { CheckboxModule } from 'primeng/checkbox';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { DialogModule } from 'primeng/dialog';
import { DropdownModule } from 'primeng/dropdown';
import { DialogService, DynamicDialogModule } from 'primeng/dynamicdialog';
import { InputSwitchModule } from 'primeng/inputswitch';
import { InputTextModule } from 'primeng/inputtext';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { MenuModule } from 'primeng/menu';
import { MessageModule } from 'primeng/message';
import { MessagesModule } from 'primeng/messages';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { PaginatorModule } from 'primeng/paginator';
import { PanelModule } from 'primeng/panel';
import { PanelMenuModule } from 'primeng/panelmenu';
import { ScrollPanelModule } from 'primeng/scrollpanel';
import { SelectButtonModule } from 'primeng/selectbutton';
import { TableModule } from 'primeng/table';
import { ToastModule } from 'primeng/toast';
import { ToggleButtonModule } from 'primeng/togglebutton';
import { Tooltip, TooltipModule } from 'primeng/tooltip';
import { AutoCompleteModule } from 'primeng/autocomplete';
import { RatingModule } from 'primeng/rating';
import { RippleModule } from 'primeng/ripple';
import { SkeletonModule } from 'primeng/skeleton';
import { BreadcrumbModule } from 'primeng/breadcrumb';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { DynamicDialogConfig, DynamicDialogRef } from 'primeng/dynamicdialog/';
import { MessageService, PrimeNGConfig } from 'primeng/api';
import { BreakpointObserver } from '@angular/cdk/layout';
import { MultiTranslateHttpLoader } from 'ngx-translate-multi-http-loader';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from 'keycloak-angular';
import * as ɵngcc3 from '@angular/router';
import * as ɵngcc4 from '@angular/common';
import * as ɵngcc5 from 'primeng/breadcrumb';
import * as ɵngcc6 from 'primeng/button';
import * as ɵngcc7 from 'primeng/ripple';
import * as ɵngcc8 from 'primeng/dialog';
import * as ɵngcc9 from '@angular/forms';
import * as ɵngcc10 from 'primeng/inputtext';
import * as ɵngcc11 from 'primeng/api';
import * as ɵngcc12 from 'primeng/dynamicdialog/';
import * as ɵngcc13 from 'primeng/tooltip';
import * as ɵngcc14 from 'primeng/dynamicdialog';
import * as ɵngcc15 from '@angular/cdk/layout';
import * as ɵngcc16 from '@ngx-translate/core';
import * as ɵngcc17 from 'primeng/overlaypanel';
import * as ɵngcc18 from 'primeng/toast';
import * as ɵngcc19 from 'primeng/skeleton';
import * as ɵngcc20 from 'primeng/inputswitch';
import * as ɵngcc21 from 'primeng/dropdown';
import * as ɵngcc22 from 'primeng/autocomplete';
import * as ɵngcc23 from 'primeng/rating';
import * as ɵngcc24 from 'primeng/inputtextarea';
import * as ɵngcc25 from 'primeng/checkbox';
import * as ɵngcc26 from '@ngneat/cashew';

function BreadcrumbComponent_div_0_ng_template_6_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("routerLink", item_r3.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r3.label);
} }
function BreadcrumbComponent_div_0_ng_template_6_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r3 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(item_r3.label);
} }
function BreadcrumbComponent_div_0_ng_template_6_li_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtext(1, "/");
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbComponent_div_0_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵtemplate(1, BreadcrumbComponent_div_0_ng_template_6_a_1_Template, 2, 2, "a", 7);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_div_0_ng_template_6_ng_container_2_Template, 2, 1, "ng-container", 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, BreadcrumbComponent_div_0_ng_template_6_li_3_Template, 2, 0, "li", 8);
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const last_r4 = ctx.last;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", item_r3.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !item_r3.routerLink);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !last_r4);
} }
function BreadcrumbComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "ul");
    ɵngcc0.ɵɵelementStart(2, "li");
    ɵngcc0.ɵɵelementStart(3, "a", 3);
    ɵngcc0.ɵɵelement(4, "i", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(5, "li");
    ɵngcc0.ɵɵtemplate(6, BreadcrumbComponent_div_0_ng_template_6_Template, 4, 3, "ng-template", 5);
    ɵngcc0.ɵɵelementStart(7, "li");
    ɵngcc0.ɵɵelement(8, "tk-http-progress-loader", 6);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.items);
} }
function BreadcrumbComponent_div_1_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "button", 14);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_div_1_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.onOpenHelpPage($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "button", 15);
    ɵngcc0.ɵɵlistener("click", function BreadcrumbComponent_div_1_div_2_Template_button_click_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onOpenHelpPageEditor($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function BreadcrumbComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵelement(1, "p-breadcrumb", 11);
    ɵngcc0.ɵɵtemplate(2, BreadcrumbComponent_div_1_div_2_Template, 3, 0, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("home", ctx_r1.home)("model", ctx_r1.items);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.fullPortalLayout);
} }
function AppFooterComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("href", ctx_r0.homePortal.homePage, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.homePortal.footerLabel, " ");
} }
function AppFooterComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.homePortal.footerLabel, " ");
} }
function AppFooterComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵelementStart(1, "a", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const link_r4 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("href", link_r4.url, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(link_r4.label);
} }
const _c0 = function () { return { width: "500px", "max-height": "400px" }; };
const _c1 = function () { return { overflow: "visible" }; };
const _c2 = function (a0) { return { noshow: a0 }; };
function AppInlineProfileComponent_li_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 8);
    ɵngcc0.ɵɵelementStart(1, "a", 17);
    ɵngcc0.ɵɵelement(2, "i", 18);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4, "My Personal Info");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("href", ctx_r0.baseUrl + "/account/profile", ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r0.tabIndex);
} }
const _c3 = function (a1) { return { "layout-inline-menu": true, "layout-inline-menu-active": a1 }; };
function PanelHeaderComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function PanelHeaderComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function PanelHeaderComponent_ng_template_7_Template(rf, ctx) { }
function PanelHeaderComponent_ng_template_9_Template(rf, ctx) { }
const _c4 = ["searchInput"];
function HeaderComponent_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 11);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_a_4_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onMenuButtonClick($event); });
    ɵngcc0.ɵɵelement(1, "i", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("title", ctx_r0.menuButtonTitle);
} }
function HeaderComponent_tk_breadcrumb_9_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-breadcrumb", 13);
    ɵngcc0.ɵɵlistener("openHelpPage", function HeaderComponent_tk_breadcrumb_9_Template_tk_breadcrumb_openHelpPage_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onOpenHelpPage($event); })("openHelpPageEditor", function HeaderComponent_tk_breadcrumb_9_Template_tk_breadcrumb_openHelpPageEditor_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onOpenHelpPageEditor($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disableBreadcrumbs", ctx_r1.disableBreadcrumbs)("fullPortalLayout", ctx_r1.fullPortalLayout);
} }
function HeaderComponent_div_10_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 33);
    ɵngcc0.ɵɵelementStart(1, "span", 34);
    ɵngcc0.ɵɵelement(2, "i", 35);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "tk-search-bar", 36);
    ɵngcc0.ɵɵlistener("searchClick", function HeaderComponent_div_10_div_14_Template_tk_search_bar_searchClick_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.onSearchClick($event.event, $event.val); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 34);
    ɵngcc0.ɵɵelementStart(5, "button", 37);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_div_14_Template_button_click_5_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onSearchClick($event, false); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@topbarActionPanelAnimation", "visible");
} }
function HeaderComponent_div_10_li_15_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 16);
    ɵngcc0.ɵɵelementStart(1, "a", 38);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_li_15_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.onOpenHelpPage($event); });
    ɵngcc0.ɵɵelement(2, "i", 39);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function HeaderComponent_div_10_li_16_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 16);
    ɵngcc0.ɵɵelementStart(1, "a", 40);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_li_16_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.onOpenHelpPageEditor($event); });
    ɵngcc0.ɵɵelement(2, "i", 41);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function HeaderComponent_div_10_ul_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 42);
    ɵngcc0.ɵɵelementStart(1, "li", 43);
    ɵngcc0.ɵɵelementStart(2, "span", 44);
    ɵngcc0.ɵɵtext(3, "Not implemented.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "li", 45);
    ɵngcc0.ɵɵelementStart(5, "div", 46);
    ɵngcc0.ɵɵelementStart(6, "p", 47);
    ɵngcc0.ɵɵtext(7, "MM");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 48);
    ɵngcc0.ɵɵelementStart(9, "div", 49);
    ɵngcc0.ɵɵelementStart(10, "span", 50);
    ɵngcc0.ɵɵtext(11, "John Doe");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "small");
    ɵngcc0.ɵɵtext(13, "42 mins ago");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "span", 51);
    ɵngcc0.ɵɵtext(15, "Notification example.");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@topbarActionPanelAnimation", "visible");
} }
function HeaderComponent_div_10_ul_25_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 45);
    ɵngcc0.ɵɵelementStart(1, "a", 61);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_ul_25_li_1_Template_a_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(3); return ctx_r21.navigateTo("/account/profile", $event); });
    ɵngcc0.ɵɵelement(2, "i", 62);
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4, "My Personal Info");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function HeaderComponent_div_10_ul_25_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ul", 42);
    ɵngcc0.ɵɵtemplate(1, HeaderComponent_div_10_ul_25_li_1_Template, 5, 0, "li", 52);
    ɵngcc0.ɵɵelementStart(2, "li", 45);
    ɵngcc0.ɵɵelementStart(3, "a", 53);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_ul_25_Template_a_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.navigateTo("/account/settings", $event); });
    ɵngcc0.ɵɵelement(4, "i", 54);
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6, "My Settings");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(7, "li", 45);
    ɵngcc0.ɵɵelementStart(8, "a", 55);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_ul_25_Template_a_click_8_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r25 = ɵngcc0.ɵɵnextContext(2); return ctx_r25.navigateTo("/account/change-password", $event); });
    ɵngcc0.ɵɵelement(9, "i", 56);
    ɵngcc0.ɵɵelementStart(10, "span");
    ɵngcc0.ɵɵtext(11, "Change Password");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(12, "li", 45);
    ɵngcc0.ɵɵelementStart(13, "a", 57);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_ul_25_Template_a_click_13_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r26 = ɵngcc0.ɵɵnextContext(2); return ctx_r26.navigateTo("/account/roles-and-perms", $event); });
    ɵngcc0.ɵɵelement(14, "i", 58);
    ɵngcc0.ɵɵelementStart(15, "span");
    ɵngcc0.ɵɵtext(16, "My Roles & Permissions");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(17, "li", 45);
    ɵngcc0.ɵɵelementStart(18, "a", 59);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_ul_25_Template_a_click_18_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r27 = ɵngcc0.ɵɵnextContext(2); return ctx_r27.logout($event); });
    ɵngcc0.ɵɵelement(19, "i", 60);
    ɵngcc0.ɵɵelementStart(20, "span");
    ɵngcc0.ɵɵtext(21, "Logout");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵproperty("@topbarActionPanelAnimation", "visible");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("tkIfPerm", "PROFILE#VIEW");
} }
function HeaderComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 14);
    ɵngcc0.ɵɵelementStart(1, "ul", 15);
    ɵngcc0.ɵɵelementStart(2, "li", 16);
    ɵngcc0.ɵɵelementStart(3, "a", 17);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.onOpenFeedback($event); });
    ɵngcc0.ɵɵelement(4, "i", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "li", 16);
    ɵngcc0.ɵɵelementStart(6, "a", 19);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_6_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r30 = ɵngcc0.ɵɵnextContext(); return ctx_r30.onAddToFavourites($event); });
    ɵngcc0.ɵɵelement(7, "i", 20);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "li", 16);
    ɵngcc0.ɵɵelementStart(9, "a", 21);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_9_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.onOpenSupportTicket($event); });
    ɵngcc0.ɵɵelement(10, "i", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "li", 23);
    ɵngcc0.ɵɵelementStart(12, "a", 24);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.onTopbarItemClick($event, "search"); });
    ɵngcc0.ɵɵelement(13, "i", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, HeaderComponent_div_10_div_14_Template, 6, 1, "div", 26);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(15, HeaderComponent_div_10_li_15_Template, 3, 0, "li", 27);
    ɵngcc0.ɵɵtemplate(16, HeaderComponent_div_10_li_16_Template, 3, 0, "li", 27);
    ɵngcc0.ɵɵelementStart(17, "li", 28);
    ɵngcc0.ɵɵelementStart(18, "a", 24);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_18_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r33 = ɵngcc0.ɵɵnextContext(); return ctx_r33.onTopbarItemClick($event, "notifications"); });
    ɵngcc0.ɵɵelement(19, "i", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(20, HeaderComponent_div_10_ul_20_Template, 16, 1, "ul", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(21, "li", 16);
    ɵngcc0.ɵɵelementStart(22, "a", 31);
    ɵngcc0.ɵɵlistener("click", function HeaderComponent_div_10_Template_a_click_22_listener($event) { ɵngcc0.ɵɵrestoreView(_r29); const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.onTopbarItemClick($event, "profile"); });
    ɵngcc0.ɵɵelement(23, "img", 32);
    ɵngcc0.ɵɵpipe(24, "async");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(25, HeaderComponent_div_10_ul_25_Template, 22, 2, "ul", 30);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    let tmp_4_0 = null;
    ɵngcc0.ɵɵadvance(14);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.search);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.disableBreadcrumbs);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.disableBreadcrumbs);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.activeTopbarItem === "notifications");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("src", ((tmp_4_0 = ɵngcc0.ɵɵpipeBind1(24, 6, ctx_r2.userAvatar)) == null ? null : tmp_4_0.avatarSmallImageUrl) || ctx_r2.defaultAvatarUrl, ɵngcc0.ɵɵsanitizeUrl);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.activeTopbarItem === "profile");
} }
const _c5 = function (a0) { return { "layout-topbar-mobile-active": a0 }; };
const _c6 = ["tk-submenu", ""];
function AppSubMenuComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.item.label);
} }
function AppSubMenuComponent_a_2_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r4.item.badge);
} }
function AppSubMenuComponent_a_2_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 9);
} }
function AppSubMenuComponent_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 4);
    ɵngcc0.ɵɵlistener("click", function AppSubMenuComponent_a_2_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.itemClick($event); })("keydown.enter", function AppSubMenuComponent_a_2_Template_a_keydown_enter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.itemClick($event); })("mouseenter", function AppSubMenuComponent_a_2_Template_a_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onMouseEnter(); });
    ɵngcc0.ɵɵelement(1, "i", 5);
    ɵngcc0.ɵɵelementStart(2, "span", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, AppSubMenuComponent_a_2_span_4_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵtemplate(5, AppSubMenuComponent_a_2_i_5_Template, 1, 0, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("href", ctx_r1.item.url, ɵngcc0.ɵɵsanitizeUrl)("target", ctx_r1.item.target)("tabindex", 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", "pi-" + ctx_r1.item.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.item.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.item.badge && !ctx_r1.root);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.item.items);
} }
function AppSubMenuComponent_a_3_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r10.item.badge);
} }
function AppSubMenuComponent_a_3_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "i", 9);
} }
const _c7 = function () { return { exact: true }; };
function AppSubMenuComponent_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 10);
    ɵngcc0.ɵɵlistener("click", function AppSubMenuComponent_a_3_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.itemClick($event); })("mouseenter", function AppSubMenuComponent_a_3_Template_a_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onMouseEnter(); });
    ɵngcc0.ɵɵelement(1, "i", 5);
    ɵngcc0.ɵɵelementStart(2, "span", 3);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, AppSubMenuComponent_a_3_span_4_Template, 2, 1, "span", 6);
    ɵngcc0.ɵɵtemplate(5, AppSubMenuComponent_a_3_i_5_Template, 1, 0, "i", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("routerLink", ctx_r2.item.routerLink)("routerLinkActiveOptions", ɵngcc0.ɵɵpureFunction0(8, _c7));
    ɵngcc0.ɵɵattribute("target", ctx_r2.item.target)("tabindex", 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", "pi-" + ctx_r2.item.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.item.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.item.badge && !ctx_r2.root);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.item.items);
} }
function AppSubMenuComponent_ul_4_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "li", 12);
} if (rf & 2) {
    const child_r16 = ctx.$implicit;
    const i_r17 = ctx.index;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("item", child_r16)("index", i_r17)("parentKey", ctx_r15.key);
} }
function AppSubMenuComponent_ul_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul");
    ɵngcc0.ɵɵtemplate(1, AppSubMenuComponent_ul_4_ng_template_1_Template, 1, 3, "ng-template", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("@children", ctx_r3.root ? "visible" : ctx_r3.active ? "visibleAnimated" : "hiddenAnimated");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.item.items);
} }
function PortalPageComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "tk-panel-header", 6);
    ɵngcc0.ɵɵelementStart(2, "div", 7);
    ɵngcc0.ɵɵprojection(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    const _r1 = ɵngcc0.ɵɵreference(5);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("leftToolbar", ctx_r0.leftToolbar)("rightToolbar", _r1);
} }
function PortalPageComponent_ng_template_4_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function PortalPageComponent_ng_template_4_tk_toolbar_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 10);
    ɵngcc0.ɵɵlistener("click", function PortalPageComponent_ng_template_4_tk_toolbar_item_1_Template_tk_toolbar_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.collapsed ? ctx_r7.expand() : ctx_r7.collapse(); });
    ɵngcc0.ɵɵelementEnd();
} }
function PortalPageComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PortalPageComponent_ng_template_4_ng_container_0_Template, 1, 0, "ng-container", 8);
    ɵngcc0.ɵɵtemplate(1, PortalPageComponent_ng_template_4_tk_toolbar_item_1_Template, 1, 0, "tk-toolbar-item", 9);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r2.rightToolbar);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.collapsible2);
} }
function PortalPageComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "h3");
    ɵngcc0.ɵɵtext(1, "Unauthorized");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "p");
    ɵngcc0.ɵɵtext(3, " Sorry, you do not have the permission required to view this page. ");
    ɵngcc0.ɵɵelementStart(4, "span", 11);
    ɵngcc0.ɵɵtext(5, "More info");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵpropertyInterpolate1("pTooltip", "Missing permission key: '", ctx_r4.permission, "''");
} }
const _c8 = function (a0) { return { collapsed: a0 }; };
const _c9 = ["*"];
const _c10 = ["layoutContainer"];
const _c11 = ["scrollPanel"];
const _c12 = ["feedbackPanel"];
function PortalViewportComponent_div_0_p_skeleton_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "p-skeleton", 32);
} }
const _c13 = function () { return [0, 1, 2, 3, 4, 5]; };
function PortalViewportComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 20);
    ɵngcc0.ɵɵelementStart(1, "div", 21);
    ɵngcc0.ɵɵelement(2, "p-skeleton", 22);
    ɵngcc0.ɵɵelementStart(3, "div", 23);
    ɵngcc0.ɵɵelement(4, "p-skeleton", 24);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "div", 25);
    ɵngcc0.ɵɵelementStart(6, "div", 26);
    ɵngcc0.ɵɵelementStart(7, "div", 27);
    ɵngcc0.ɵɵelement(8, "p-skeleton", 28);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(9, "p-skeleton", 29);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(10, "div", 30);
    ɵngcc0.ɵɵtemplate(11, PortalViewportComponent_div_0_p_skeleton_11_Template, 1, 0, "p-skeleton", 31);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(11);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpureFunction0(1, _c13));
} }
const _c14 = function () { return ["/"]; };
function PortalViewportComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 33);
    ɵngcc0.ɵɵelementStart(1, "div", 34);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(2, "svg", 35);
    ɵngcc0.ɵɵelement(3, "path", 36);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(4, "div", 37);
    ɵngcc0.ɵɵelement(5, "i", 38);
    ɵngcc0.ɵɵelementStart(6, "h1");
    ɵngcc0.ɵɵtext(7, "Exception Occured");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "div", 39);
    ɵngcc0.ɵɵtext(9, "Please contact system administrator");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(10, "p-button", 40);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(10);
    ɵngcc0.ɵɵproperty("routerLink", ɵngcc0.ɵɵpureFunction0(1, _c14));
} }
function PortalViewportComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-feedback", 8);
    ɵngcc0.ɵɵlistener("feedbackDataChange", function PortalViewportComponent_ng_template_6_Template_tk_feedback_feedbackDataChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.feedbackData = $event; })("feedbackSubmit", function PortalViewportComponent_ng_template_6_Template_tk_feedback_feedbackSubmit_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onSubmitFeedback($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("feedbackData", ctx_r3.feedbackData)("submitDisabled", ctx_r3.feedbackSubmitDisabled);
} }
function PortalViewportComponent_div_11_tk_inline_profile_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-inline-profile", 44);
    ɵngcc0.ɵɵlistener("inlineMenuClick", function PortalViewportComponent_div_11_tk_inline_profile_1_Template_tk_inline_profile_inlineMenuClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onInlineMenuClick($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("inlineMenuActive", ctx_r13.inlineMenuActive);
} }
function PortalViewportComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 41);
    ɵngcc0.ɵɵtemplate(1, PortalViewportComponent_div_11_tk_inline_profile_1_Template, 1, 1, "tk-inline-profile", 42);
    ɵngcc0.ɵɵelementStart(2, "tk-menu", 43);
    ɵngcc0.ɵɵlistener("menuActiveChange", function PortalViewportComponent_div_11_Template_tk_menu_menuActiveChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.menuActive = $event; })("mobileMenuActiveChange", function PortalViewportComponent_div_11_Template_tk_menu_mobileMenuActiveChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.mobileMenuActive = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showProfileInSidebar && !ctx_r4.isHorizontal());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("menuActive", ctx_r4.menuActive)("mobileMenuActive", ctx_r4.mobileMenuActive)("isStatic", ctx_r4.isStatic())("isSlim", ctx_r4.isSlim())("isHorizontal", ctx_r4.isHorizontal())("isMobile", ctx_r4.isMobile())("isDesktop", ctx_r4.isDesktop())("menuHoverActive", ctx_r4.menuHoverActive)("portalMenu", ctx_r4.portalMenuItems);
} }
function PortalViewportComponent_tk_breadcrumb_13_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-breadcrumb", 45);
    ɵngcc0.ɵɵlistener("openHelpPageEditor", function PortalViewportComponent_tk_breadcrumb_13_Template_tk_breadcrumb_openHelpPageEditor_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.openHelpPageEditor($event); })("openHelpPage", function PortalViewportComponent_tk_breadcrumb_13_Template_tk_breadcrumb_openHelpPage_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.openHelpPage($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("fullPortalLayout", ctx_r5.fullPortalLayout)("disableBreadcrumbs", !ctx_r5.enableBreadcrumbs);
} }
function PortalViewportComponent_tk_help_editor_18_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-help-editor", 46);
    ɵngcc0.ɵɵlistener("closed", function PortalViewportComponent_tk_help_editor_18_Template_tk_help_editor_closed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.onHelpArticleEditorClosed($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("display", ctx_r6.helpPageEditorDisplayed)("helpItem", ctx_r6.helpDataItem);
} }
function PortalViewportComponent_tk_add_to_launchpad_19_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-add-to-launchpad", 47);
    ɵngcc0.ɵɵlistener("closed", function PortalViewportComponent_tk_add_to_launchpad_19_Template_tk_add_to_launchpad_closed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r25); const ctx_r24 = ɵngcc0.ɵɵnextContext(); return ctx_r24.onAddToLaunchpadClosed($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("display", ctx_r7.addToFavouritesDisplayed)("appId", ctx_r7.appName);
} }
const _c15 = function (a0, a1, a2, a3, a4, a5, a6) { return { "layout-menu-static": a0, "layout-menu-overlay": a1, "layout-menu-horizontal": a2, "layout-menu-slim": a3, "layout-menu-active": a4, "layout-menu-mobile-active": a5, "layout-topbar-mobile-active": a6 }; };
function PortalSearchPageComponent_ng_template_5_tk_toolbar_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 7);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_5_tk_toolbar_item_0_Template_tk_toolbar_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.triggerSearch(); });
    ɵngcc0.ɵɵelementEnd();
} }
function PortalSearchPageComponent_ng_template_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function PortalSearchPageComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, PortalSearchPageComponent_ng_template_5_tk_toolbar_item_0_Template, 1, 0, "tk-toolbar-item", 5);
    ɵngcc0.ɵɵtemplate(1, PortalSearchPageComponent_ng_template_5_ng_container_1_Template, 1, 0, "ng-container", 6);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.enableSearchToolbar);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.leftToolbar);
} }
function PortalSearchPageComponent_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_21_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 26);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_21_Template_tk_toolbar_item_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); ɵngcc0.ɵɵnextContext(); const _r9 = ɵngcc0.ɵɵreference(2); return _r9.show($event); });
    ɵngcc0.ɵɵelementEnd();
} }
function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_22_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 27);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_22_Template_tk_toolbar_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.triggerCriteriaTemplateUpdate(); });
    ɵngcc0.ɵɵelementEnd();
} }
function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_23_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 28);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_23_Template_tk_toolbar_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.triggerCriteriaTemplateDelete(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c16 = function () { return { width: "150px" }; };
function PortalSearchPageComponent_ng_template_7_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelementStart(1, "p-dropdown", 30);
    ɵngcc0.ɵɵlistener("onChange", function PortalSearchPageComponent_ng_template_7_div_24_Template_p_dropdown_onChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.onSearchTemplateSelection($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(5, _c16));
    ɵngcc0.ɵɵproperty("ngModel", ctx_r13.activeSearchTemplateId)("options", ctx_r13.searchTemplateOptions)("filter", true);
} }
function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_25_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tk-toolbar-item", 31);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_tk_toolbar_item_25_Template_tk_toolbar_item_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(2); return ctx_r23.collapsed ? ctx_r23.expand() : ctx_r23.collapse(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c17 = function () { return { width: "400px" }; };
function PortalSearchPageComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, PortalSearchPageComponent_ng_template_7_ng_container_0_Template, 1, 0, "ng-container", 6);
    ɵngcc0.ɵɵelementStart(1, "p-overlayPanel", 8, 9);
    ɵngcc0.ɵɵelementStart(3, "div", 10);
    ɵngcc0.ɵɵelementStart(4, "h5");
    ɵngcc0.ɵɵtext(5, "Save a new search template");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", 11);
    ɵngcc0.ɵɵelementStart(7, "label", 12);
    ɵngcc0.ɵɵtext(8, "Template Name");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "div", 13);
    ɵngcc0.ɵɵelementStart(10, "input", 14);
    ɵngcc0.ɵɵlistener("ngModelChange", function PortalSearchPageComponent_ng_template_7_Template_input_ngModelChange_10_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.newTemplateName = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 11);
    ɵngcc0.ɵɵelementStart(12, "label", 15);
    ɵngcc0.ɵɵtext(13, "Set as default?");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "div", 13);
    ɵngcc0.ɵɵelementStart(15, "p-inputSwitch", 16);
    ɵngcc0.ɵɵlistener("ngModelChange", function PortalSearchPageComponent_ng_template_7_Template_p_inputSwitch_ngModelChange_15_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.newTemplateDefaultFlag = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(16, "div", 17);
    ɵngcc0.ɵɵelementStart(17, "div", 18);
    ɵngcc0.ɵɵelementStart(18, "button", 19);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_Template_button_click_18_listener() { ɵngcc0.ɵɵrestoreView(_r26); const _r9 = ɵngcc0.ɵɵreference(2); return _r9.hide(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(19, "div", 18);
    ɵngcc0.ɵɵelementStart(20, "button", 20);
    ɵngcc0.ɵɵlistener("click", function PortalSearchPageComponent_ng_template_7_Template_button_click_20_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const _r9 = ɵngcc0.ɵɵreference(2); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.triggerCriteriaTemplateSave($event, _r9); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(21, PortalSearchPageComponent_ng_template_7_tk_toolbar_item_21_Template, 1, 0, "tk-toolbar-item", 21);
    ɵngcc0.ɵɵtemplate(22, PortalSearchPageComponent_ng_template_7_tk_toolbar_item_22_Template, 1, 0, "tk-toolbar-item", 22);
    ɵngcc0.ɵɵtemplate(23, PortalSearchPageComponent_ng_template_7_tk_toolbar_item_23_Template, 1, 0, "tk-toolbar-item", 23);
    ɵngcc0.ɵɵtemplate(24, PortalSearchPageComponent_ng_template_7_div_24_Template, 2, 6, "div", 24);
    ɵngcc0.ɵɵtemplate(25, PortalSearchPageComponent_ng_template_7_tk_toolbar_item_25_Template, 1, 0, "tk-toolbar-item", 25);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r3.rightToolbar);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("dismissable", true)("showCloseIcon", true);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction0(11, _c17));
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.newTemplateName);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.newTemplateDefaultFlag);
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.searchCriteriaTemplatesEnabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.activeSearchTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.activeSearchTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.searchTemplateOptions);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.collapsible2);
} }
const _c18 = [[["", "criteria", ""]], [["", "results", ""]]];
const _c19 = ["[criteria]", "[results]"];
function ToolbarItemComponent_a_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 2);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r0.title);
    ɵngcc0.ɵɵproperty("href", ctx_r0.link, ɵngcc0.ɵɵsanitizeUrl)("target", ctx_r0.linkTarget)("rel", ctx_r0.linkRel);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("pi pi-", ctx_r0.icon, "");
} }
function ToolbarItemComponent_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "a", 3);
    ɵngcc0.ɵɵelement(1, "i");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("title", ctx_r1.title);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("pi pi-", ctx_r1.icon, "");
} }
function SearchBarComponent_ng_template_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 7);
    ɵngcc0.ɵɵtext(1, "APP");
    ɵngcc0.ɵɵelementEnd();
} }
function SearchBarComponent_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0, 5);
    ɵngcc0.ɵɵtemplate(1, SearchBarComponent_ng_template_4_span_1_Template, 2, 0, "span", 6);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngSwitch", item_r2.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngSwitchCase", ctx_r1.SearchItemType.APPLICATION);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(item_r2.name);
} }
const _c20 = function () { return { width: "100%", height: "4rem" }; };
function ResultTextComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵpipe(2, "translate");
    ɵngcc0.ɵɵpipe(3, "translate");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate5(" ", ɵngcc0.ɵɵpipeBind1(2, 5, "SEARCH.SHOWING"), " ", ctx_r0.state.first + 1, " - ", ctx_r0.state.rows * (ctx_r0.state.page + 1) < ctx_r0.state.totalRecords ? ctx_r0.state.rows * (ctx_r0.state.page + 1) : ctx_r0.state.totalRecords, " ", ɵngcc0.ɵɵpipeBind1(3, 7, "SEARCH.OUT_OF_TOTAL"), " ", ctx_r0.state.totalRecords, " ");
} }
function ResultTextComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
    ɵngcc0.ɵɵpipe(1, "translate");
} if (rf & 2) {
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(1, 1, "SEARCH.NO_RESULTS"), " ");
} }
const _c21 = function () { return { width: "500px" }; };
function AddToLaunchpadComponent_ng_template_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 20);
    ɵngcc0.ɵɵelementStart(1, "span");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r2.name, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r2.type, " ");
} }
function AddToLaunchpadComponent_ng_template_37_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 21);
    ɵngcc0.ɵɵelementStart(1, "div");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "span");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const icon_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(icon_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassMapInterpolate1("pi pi-", icon_r3, "");
} }
const _c22 = function () { return { width: "700px", "max-height": "600px" }; };
const APP_CONFIG = new InjectionToken('APP_CONFIG');
const AUTH_SERVICE = new InjectionToken('AUTH_SERVICE');

class MockAuthService {
    constructor() {
        this.mockUser = {
            person: {
                displayName: 'Max Musterman',
                firstName: 'Max',
                lastName: 'Mustermann',
                email: 'max.mustermann@capgemini.com'
            },
            accountSettings: {
                localeAndTimeSettings: { locale: 'de', timezone: 'GMT' },
                notificationSettings: {},
                preferences: [],
                privacySettings: {}
            },
            id: 'ID_MOCK_USER',
            identityProvider: 'MOCK_TKIT_PORTAL_LIB',
            identityProviderId: 'MOCK_ID',
            roles: ['user', 'admin'],
            memberships: [
                {
                    application: 'APP1',
                    roleMemberships: [
                        {
                            role: 'user',
                            permissions: [
                                {
                                    action: 'EDIT',
                                    resource: 'ITEM',
                                    name: 'Edit item',
                                    key: 'ITEM#EDIT'
                                }
                            ]
                        }
                    ]
                }
            ]
        };
    }
    currentUser() {
        return this.mockUser;
    }
    getAvatar() {
        return of(this.mockUser.avatar);
    }
    init() {
        return new Promise((resolve, reject) => resolve(true));
    }
    hasPermission(permissionKey) {
        return true;
    }
    logout() {
        throw new Error('Method not implemented.');
    }
    getAuthProviderName() {
        return 'MOCK_TKIT_PORTAL_LIB';
    }
    hasRole(role) {
        return true;
    }
    getRoles() {
        return ['tkit-portal-admin'];
    }
}
MockAuthService.ɵfac = function MockAuthService_Factory(t) { return new (t || MockAuthService)(); };
MockAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MockAuthService, factory: MockAuthService.ɵfac });
MockAuthService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MockAuthService, [{
        type: Injectable
    }], function () { return []; }, null); })();

function initializer(authService) {
    console.log(`Start Mock auth initializer`);
    return () => authService.init().then(res => {
        console.log(`mock auth app_initializer resolved ${res}`);
        return res;
    });
}
/**
 * Mock auth module providing mocked user profile and authnetication. For dev use only.
 */
class MockAuthModule {
}
MockAuthModule.ɵfac = function MockAuthModule_Factory(t) { return new (t || MockAuthModule)(); };
MockAuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MockAuthModule });
MockAuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: AUTH_SERVICE,
            useClass: MockAuthService
        },
        {
            provide: APP_INITIALIZER,
            useFactory: initializer,
            multi: true,
            deps: [AUTH_SERVICE]
        },
    ], imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MockAuthModule, { imports: function () { return [CommonModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MockAuthModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [],
                declarations: [],
                providers: [
                    {
                        provide: AUTH_SERVICE,
                        useClass: MockAuthService
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: initializer,
                        multi: true,
                        deps: [AUTH_SERVICE]
                    },
                ]
            }]
    }], null, null); })();

class PortalApiService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.baseUrl = "./portal-api/v1/portals";
    }
    getPortalData(portal) {
        return this.httpClient.get(`${this.baseUrl}/${portal}`, withCache());
    }
}
PortalApiService.ɵfac = function PortalApiService_Factory(t) { return new (t || PortalApiService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
PortalApiService.ɵprov = ɵɵdefineInjectable({ factory: function PortalApiService_Factory() { return new PortalApiService(ɵɵinject(HttpClient)); }, token: PortalApiService, providedIn: "root" });
PortalApiService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalApiService, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

const TKIT_PORTAL_ID = 'TKIT_PORTAL_ID';
class ConfigurationService {
    constructor(http, portalService, appConfig) {
        this.http = http;
        this.portalService = portalService;
        this.appConfig = appConfig;
        this.lang$ = new ReplaySubject(1);
    }
    init() {
        return new Promise((resolve, reject) => {
            if (this.appConfig.skipRemoteConfigLoad) {
                console.log('TKA001: Remote config load is disabled. To enable it, remove the "skipRemoteConfigLoad" key in your environemnt.json');
                this.customEnv = this.appConfig;
                resolve(false);
            }
            let loadConfigPromise;
            // if we have Backend env vars injected in HTML, use it
            console.log(`ENV resolved ${window['APP_CONFIG']}`);
            if (window['APP_CONFIG']) {
                loadConfigPromise = new Promise((resolve, reject) => {
                    resolve(window['APP_CONFIG']);
                });
            }
            else {
                console.log('noooo moar http');
                //otherwise fetch them from env.json
                loadConfigPromise = this.http.get(this.appConfig.remoteConfigURL || 'assets/env.json').toPromise();
            }
            loadConfigPromise
                .then(config => {
                if (config) {
                    const sanitizedEnvValues = this.sanitizeConfig(config);
                    this.customEnv = Object.assign(Object.assign({}, this.appConfig), sanitizedEnvValues);
                }
            })
                .then(() => {
                const portalId = this.customEnv[TKIT_PORTAL_ID] || 'PORTAL';
                this.portalService
                    .getPortalData(portalId)
                    .toPromise()
                    .then(data => {
                    if (data) {
                        this.portalData = data;
                    }
                    resolve(true);
                })
                    .catch(err => {
                    console.log(`Failed to load portal data! ${JSON.stringify(err)}`);
                    this.portalData = { portalId: 'PORTAL' };
                    resolve(true);
                });
            })
                .catch(e => {
                console.log(`Failed to load env configuration`);
                reject(e);
            });
        });
    }
    sanitizeConfig(config) {
        return (Object.keys(config)
            // only take values that are interpolated/set
            .filter(key => !config[key].startsWith('${'))
            .reduce((obj, key) => {
            obj[key] = config[key];
            return obj;
        }, {}));
    }
    getProperty(key) {
        return this.customEnv[key];
    }
    getPortalData() {
        return this.portalData;
    }
    setLang(lang) {
        console.log('[CONFIG SERVICE] SETTING LANG: ', lang);
        this.lang$.next(lang);
    }
}
ConfigurationService.ɵfac = function ConfigurationService_Factory(t) { return new (t || ConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(PortalApiService), ɵngcc0.ɵɵinject(APP_CONFIG)); };
ConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(ɵɵinject(HttpClient), ɵɵinject(PortalApiService), ɵɵinject(APP_CONFIG)); }, token: ConfigurationService, providedIn: "root" });
ConfigurationService.ctorParameters = () => [
    { type: HttpClient },
    { type: PortalApiService },
    { type: undefined, decorators: [{ type: Inject, args: [APP_CONFIG,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: PortalApiService }, { type: undefined, decorators: [{
                type: Inject,
                args: [APP_CONFIG]
            }] }]; }, null); })();

class UserProfileService {
    constructor(http) {
        this.http = http;
        this.url = './portal-api/v1/userProfile/me';
        this.personUrl = './portal-api/v1/userProfile/me/userPerson';
        this.avatarUrl = './portal-api/v1/userProfile/me/avatar';
        this.settingsUrl = './portal-api/v1/userProfile/me/settings';
        this.changePasswordUrl = './portal-api/v1/userProfile/me/change-password';
        this.refreshProfile$ = new ReplaySubject(1);
        this.currentAvatar$ = new ReplaySubject(1);
        this.currentUser$ = this.refreshProfile$.pipe(switchMapTo(this.http.get(this.url)), shareReplay(1));
    }
    getCurrentUser() {
        return this.currentUser$;
    }
    getUpdatedAvatar() {
        return this.currentAvatar$;
    }
    updatePersonalInfo(person) {
        return this.http.put(this.personUrl, person);
        // .pipe(tap(() => this.refreshProfile()));
    }
    setUserAvatar(file) {
        const formData = new FormData();
        formData.append('file', file);
        return this.http.put(this.avatarUrl, formData).pipe(tap(avatar => this.currentAvatar$.next(avatar)));
    }
    removeAvatar() {
        return this.http.delete(this.avatarUrl).pipe(tap(() => this.currentAvatar$.next(null)));
    }
    updateUserSettings(settings) {
        return this.http.patch(this.settingsUrl, settings);
    }
    refreshProfile() {
        this.refreshProfile$.next();
    }
    getUserSettings() {
        return this.http.get(this.settingsUrl);
    }
    getCurrentUserFromBE() {
        return this.http.get(this.url);
    }
    changeUserPassword(resetPasswordDTO) {
        return this.http.put(this.changePasswordUrl, resetPasswordDTO);
    }
}
UserProfileService.ɵfac = function UserProfileService_Factory(t) { return new (t || UserProfileService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
UserProfileService.ɵprov = ɵɵdefineInjectable({ factory: function UserProfileService_Factory() { return new UserProfileService(ɵɵinject(HttpClient)); }, token: UserProfileService, providedIn: "root" });
UserProfileService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UserProfileService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

const DEFAULT_AVATAR_URL = 'portal-lib/assets/images/default_avatar.png';
const CONFIG_KEY_TKIT_PORTAL_DEFAULT_THEME = "TKIT_PORTAL_DEFAULT_THEME";
const CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT = "TKIT_PORTAL_DISABLE_THEME_MANAGEMENT";
const CONFIG_KEY_TKIT_PORTAL_THEME_SERVER_URL = "TKIT_PORTAL_THEME_SERVER_URL";
const CONFIG_KEY_TKIT_TOKEN_ROLE_CLAIM_NAME = "TKIT_TOKEN_ROLE_CLAIM_NAME";
const CONFIG_KEY_TKIT_PORTAL_ID = "TKIT_PORTAL_ID";
const CONFIG_KEY_TKIT_SUPPORTED_LANGUAGES = "TKIT_SUPPORTED_LANGUAGES";
const CONFIG_KEY_TKIT_SEARCH_BASE_URL = "TKIT_SEARCH_BASE_URL";
const CONFIG_KEY_APP_BASE_HREF = "APP_BASE_HREF";
const CONFIG_KEY_KEYCLOAK_REALM = "KEYCLOAK_REALM";
const CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO = "KEYCLOAK_ENABLE_SILENT_SSO";
const CONFIG_KEY_KEYCLOAK_URL = "KEYCLOAK_URL";
const CONFIG_KEY_KEYCLOAK_CLIENT_ID = "KEYCLOAK_CLIENT_ID";

const KC_REFRESH_TOKEN_LS = 'kc_refreshToken';
const KC_ID_TOKEN_LS = 'kc_idToken';
const KC_TOKEN_LS = 'kc_token';
const TKIT_USER_PROFILE_LS = 'tkit_user_profile';
class KeycloakAuthService {
    constructor(keycloakService, configService, userProfileService, router) {
        this.keycloakService = keycloakService;
        this.configService = configService;
        this.userProfileService = userProfileService;
        this.router = router;
        this.user = {
            userId: 'anonymous',
            userPerson: { firstName: 'Guest' },
            functions: [],
            roles: [],
        };
    }
    hasPermission(permissionKey) {
        return this.user.functions ? this.user.functions.includes(permissionKey) : false;
    }
    currentUser() {
        return this.userProfile;
    }
    logout() {
        this.clearKCStateFromLocalstorage();
        this.keycloakService.logout();
    }
    getAuthProviderName() {
        return 'Keycloak based Security';
    }
    init() {
        console.log('Keycloak Auth initialization');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            console.log(`Got tokens in LC ${parsedToken.exp} ${parsedToken.sub}`);
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        // console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`)
        return this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(loginOk => {
            // this will be false if our silent login did not work
            console.log(`Keycloak init done, loginOk?: ${loginOk}`);
            if (loginOk) {
                return this.keycloakService.getToken();
            }
            else {
                // we want to block bootstrap process now
                return this.keycloakService.login().then(() => 'login');
            }
        })
            .then(tokenString => {
            const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
            console.log(`fetching profile ${JSON.stringify(parsedToken)}`);
            let profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS) &&
                JSON.parse(localStorage.getItem(TKIT_USER_PROFILE_LS));
            if (profileFromCache) {
                //if we have already a profile in LS, check if it is the smae user
                if (profileFromCache.person.email === parsedToken['email']) {
                    //same user, take from LS and load async to refresh
                    this.refreshProfile();
                    console.log(`load user profile from cache(and reloading asynchronously)`);
                    return profileFromCache;
                }
                else {
                    console.log(`User profile in LS does not match Keycloak token`);
                    localStorage.removeItem(TKIT_USER_PROFILE_LS);
                }
            }
            console.log(`load user profile from API`);
            return this.userProfileService.getCurrentUserFromBE().toPromise();
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update state`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`Keycloak auth init complete`);
            return true;
        })
            .catch(err => {
            console.log(`KC ERROR ${err} as json ${JSON.stringify(err)}`);
            throw err;
        });
    }
    init2() {
        console.log('kc init 4');
        // load previous tokens, saved after successful login of keycloak success callback
        let token = localStorage.getItem(KC_TOKEN_LS);
        let idToken = localStorage.getItem(KC_ID_TOKEN_LS);
        let refreshToken = localStorage.getItem(KC_REFRESH_TOKEN_LS);
        if (token) {
            const parsedToken = JSON.parse(atob(refreshToken.split('.')[1]));
            if (parsedToken.exp * 1000 < new Date().getTime()) {
                //refresh expired, drop everything
                console.log(`Refresh token expired`);
                token = undefined;
                refreshToken = undefined;
                idToken = undefined;
                this.clearKCStateFromLocalstorage();
            }
        }
        this.setupEventListener();
        // try constructing the KC config from values in env
        let kcConfig = {
            url: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_URL),
            clientId: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_CLIENT_ID) || this.configService.getProperty('appId'),
            realm: this.configService.getProperty(CONFIG_KEY_KEYCLOAK_REALM),
        };
        // If any of the required props is missing, fallback to loading KC conf from file
        if (!kcConfig.clientId || !kcConfig.realm || !kcConfig.url) {
            kcConfig = './assets/keycloak.json';
        }
        const enableSilentSSOCheck = this.configService.getProperty(CONFIG_KEY_KEYCLOAK_ENABLE_SILENT_SSO) === 'true';
        const kcOptions = {
            loadUserProfileAtStartUp: false,
            config: kcConfig,
            initOptions: {
                // onLoad: "login-required",
                onLoad: 'check-sso',
                checkLoginIframe: false,
                silentCheckSsoRedirectUri: enableSilentSSOCheck ? this.getSilentSSOUrl() : undefined,
                idToken,
                refreshToken,
                token,
            },
            enableBearerInterceptor: true,
            bearerExcludedUrls: ['/assets'],
        };
        console.log(`INit KC with ${JSON.stringify(kcOptions, null, 2)}`);
        return (this.keycloakService
            .init(kcOptions)
            .catch(err => {
            console.log(`kc err ${err}, try force login`);
            return this.keycloakService.login();
        })
            .then(ok => {
            console.log(`After KC init ${ok}`);
            return this.keycloakService.getToken();
        })
            .then(tokenString => {
            if (tokenString) {
                const parsedToken = JSON.parse(atob(tokenString.split('.')[1]));
                console.log('fetching profile');
                let profileFromCache;
                if ((profileFromCache = localStorage.getItem(TKIT_USER_PROFILE_LS))) {
                    console.log(`load user profile from cache`);
                    //if we have already a profile in LS, check if it is the smae user
                    if (profileFromCache['email'] === parsedToken['email']) {
                        //same user, take from LS and load async to refresh
                        this.refreshProfile();
                        return JSON.parse(profileFromCache);
                    }
                    else {
                        console.log(`USer in LS does tno match. clear`);
                        localStorage.removeItem(TKIT_USER_PROFILE_LS);
                    }
                }
                console.log(`load user profile from API`);
                return this.userProfileService.getCurrentUserFromBE().toPromise();
            }
            else {
                console.log(`no TOKEN AAAAA`);
            }
        })
            // .then(ok => {
            //   // return Promise.all([
            //   //   this.keycloakService.loadUserProfile(),
            //   //   this.keycloakService.getToken(),
            //   //   this.userProfileService.getCurrentUserFromBE().toPromise()
            //   // ]);
            // })
            .catch(err => {
            console.log(`KC ERROR ${err}`);
            throw err;
        })
            .then(userProfile => {
            // const parsedToken = JSON.parse(atob(results[1].split(".")[1]));
            console.log(`Got user profile, update`);
            // this.updateUserFromKeycloak(results[0], parsedToken);
            this.userProfile = userProfile;
            this.avatarSubject = new ReplaySubject(1);
            this.handleAvatarUpdate(this.userProfile.avatar);
            this.userProfileService.getUpdatedAvatar().subscribe(avatar => this.handleAvatarUpdate(avatar));
            this.updateUserFromUserProfile(this.userProfile);
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(userProfile));
            console.log(`KC init complete returnint`);
            return true;
        }));
    }
    setupEventListener() {
        this.keycloakService.keycloakEvents$.subscribe(ke => {
            // console.log(
            //   `KC Event ${ke.type} token: ${
            //     this.keycloakService.getKeycloakInstance().token
            //   }`
            // );
            // we are logged in, get tokens and store them in localstorage
            if (this.keycloakService.getKeycloakInstance().token) {
                localStorage.setItem(KC_TOKEN_LS, this.keycloakService.getKeycloakInstance().token);
            }
            else {
                localStorage.removeItem(KC_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().idToken) {
                localStorage.setItem(KC_ID_TOKEN_LS, this.keycloakService.getKeycloakInstance().idToken);
            }
            else {
                localStorage.removeItem(KC_ID_TOKEN_LS);
            }
            if (this.keycloakService.getKeycloakInstance().refreshToken) {
                localStorage.setItem(KC_REFRESH_TOKEN_LS, this.keycloakService.getKeycloakInstance().refreshToken);
            }
            else {
                localStorage.removeItem(KC_REFRESH_TOKEN_LS);
            }
            if (ke.type === KeycloakEventType.OnAuthLogout) {
                console.log('SSO logout nav to root');
                this.clearKCStateFromLocalstorage();
                this.router.navigateByUrl('/');
            }
        });
    }
    clearKCStateFromLocalstorage() {
        localStorage.removeItem(KC_ID_TOKEN_LS);
        localStorage.removeItem(KC_TOKEN_LS);
        localStorage.removeItem(KC_REFRESH_TOKEN_LS);
    }
    getSilentSSOUrl() {
        let currentBase = document.getElementsByTagName('base')[0].href;
        if (currentBase === '/') {
            currentBase = '';
        }
        return `${currentBase}/assets/silent-check-sso.html`;
    }
    hasRole(role) {
        if (typeof role === 'string') {
            const roleString = role;
            return this.user.roles.map(e => e.toUpperCase()).includes(roleString.toUpperCase());
        }
        else {
            return (this.user.roles
                .map(e => e.toUpperCase())
                .filter(item => role.map(e => e.toUpperCase()).includes(item.toUpperCase())).length > 0);
        }
    }
    getRoles() {
        return this.user.roles;
    }
    refreshProfile() {
        this.userProfileService.getCurrentUserFromBE().subscribe(profileData => {
            this.userProfile = profileData;
            localStorage.setItem(TKIT_USER_PROFILE_LS, JSON.stringify(profileData));
            this.updateUserFromUserProfile(this.userProfile);
        });
    }
    loadFullProfile() {
        return this.userProfileService.getCurrentUser();
    }
    handleAvatarUpdate(avatarInfo) {
        if ((avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarImageUrl) && (avatarInfo === null || avatarInfo === void 0 ? void 0 : avatarInfo.avatarSmallImageUrl)) {
            this.avatarSubject.next({
                avatarImageUrl: 'portal-api' + avatarInfo.avatarImageUrl,
                avatarSmallImageUrl: 'portal-api' + avatarInfo.avatarSmallImageUrl
            });
        }
        else {
            this.avatarSubject.next(null);
        }
    }
    getAvatar() {
        return this.avatarSubject.asObservable();
    }
    updateUserFromUserProfile(userProfile) {
        this.user = {
            roles: userProfile.roles,
            userId: userProfile.id,
            principalId: userProfile.id,
            commonName: userProfile.person.displayName,
            userPerson: Object.assign({}, userProfile.person),
            functions: [],
        };
        if (this.userProfile.memberships) {
            this.userProfile.memberships.forEach(m => {
                m.roleMemberships.forEach(r => {
                    r.permissions.forEach(p => {
                        this.user.functions.push(p.key);
                    });
                });
            });
        }
    }
}
KeycloakAuthService.ɵfac = function KeycloakAuthService_Factory(t) { return new (t || KeycloakAuthService)(ɵngcc0.ɵɵinject(ɵngcc2.KeycloakService), ɵngcc0.ɵɵinject(ConfigurationService), ɵngcc0.ɵɵinject(UserProfileService), ɵngcc0.ɵɵinject(ɵngcc3.Router)); };
KeycloakAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: KeycloakAuthService, factory: KeycloakAuthService.ɵfac });
KeycloakAuthService.ctorParameters = () => [
    { type: KeycloakService },
    { type: ConfigurationService },
    { type: UserProfileService },
    { type: Router }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeycloakAuthService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc2.KeycloakService }, { type: ConfigurationService }, { type: UserProfileService }, { type: ɵngcc3.Router }]; }, null); })();

class AuthModule {
}
AuthModule.ɵfac = function AuthModule_Factory(t) { return new (t || AuthModule)(); };
AuthModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AuthModule });
AuthModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: AUTH_SERVICE,
            useClass: KeycloakAuthService
        }
    ], imports: [[CommonModule, KeycloakAngularModule], KeycloakAngularModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AuthModule, { imports: function () { return [CommonModule, KeycloakAngularModule]; }, exports: function () { return [KeycloakAngularModule]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [CommonModule, KeycloakAngularModule],
                exports: [KeycloakAngularModule],
                providers: [
                    {
                        provide: AUTH_SERVICE,
                        useClass: KeycloakAuthService
                    }
                ]
            }]
    }], null, null); })();

/**
 * 1000kit internal api
 * API for portal
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var PhoneType;
(function (PhoneType) {
    PhoneType["MOBILE"] = "MOBILE";
    PhoneType["LANDLINE"] = "LANDLINE";
})(PhoneType || (PhoneType = {}));

class BreadcrumbService {
    constructor() {
        this.itemsSource = new Subject();
        this.itemsHandler = this.itemsSource.asObservable();
    }
    setItems(items) {
        this.itemsSource.next(items);
    }
}
BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) { return new (t || BreadcrumbService)(); };
BreadcrumbService.ɵprov = ɵɵdefineInjectable({ factory: function BreadcrumbService_Factory() { return new BreadcrumbService(); }, token: BreadcrumbService, providedIn: "root" });
BreadcrumbService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();

class StateService {
    getUserSettingsActivatedTab() {
        return this.userSettingsActivatedTab;
    }
    setUserSettingsActivatedTab(tab) {
        this.userSettingsActivatedTab = tab;
    }
}
StateService.ɵfac = function StateService_Factory(t) { return new (t || StateService)(); };
StateService.ɵprov = ɵɵdefineInjectable({ factory: function StateService_Factory() { return new StateService(); }, token: StateService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StateService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], null, null); })();

class ActionDirective {
    constructor(renderer, el, 
    // private templateRef: TemplateRef<any>,
    viewContainer, authService) {
        this.renderer = renderer;
        this.el = el;
        this.viewContainer = viewContainer;
        this.authService = authService;
    }
    ngOnInit() {
        console.log(`Action permission ${this.permission}`);
        if (!this.authService.hasPermission(this.permission)) {
            console.log(`Disable btn because no perm ${this.permission}`);
            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
            this.viewContainer.clear();
        }
    }
}
ActionDirective.ɵfac = function ActionDirective_Factory(t) { return new (t || ActionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE)); };
ActionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ActionDirective, selectors: [["", "tkAction", ""]], inputs: { permission: "permission", loaderState: "loaderState" } });
ActionDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
ActionDirective.propDecorators = {
    permission: [{ type: Input }],
    loaderState: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ActionDirective, [{
        type: Directive,
        args: [{ selector: '[tkAction]' }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }]; }, { permission: [{
            type: Input
        }], loaderState: [{
            type: Input
        }] }); })();

class BreadcrumbComponent {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.openHelpPage = new EventEmitter();
        this.openHelpPageEditor = new EventEmitter();
    }
    ngOnInit() {
        this.subscription = this.breadcrumbService.itemsHandler.subscribe(response => {
            this.items = response;
        });
        this.home = { icon: 'pi pi-home', routerLink: '/' };
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    onOpenHelpPageEditor(evt) {
        this.openHelpPageEditor.emit(evt);
    }
    onOpenHelpPage(evt) {
        this.openHelpPage.emit(evt);
    }
}
BreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) { return new (t || BreadcrumbComponent)(ɵngcc0.ɵɵdirectiveInject(BreadcrumbService)); };
BreadcrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadcrumbComponent, selectors: [["tk-breadcrumb"]], inputs: { disableBreadcrumbs: "disableBreadcrumbs", fullPortalLayout: "fullPortalLayout" }, outputs: { openHelpPage: "openHelpPage", openHelpPageEditor: "openHelpPageEditor" }, decls: 2, vars: 2, consts: [["class", "header-breadcrumb", 4, "ngIf"], ["class", "layout-breadcrumb-container p-d-flex p-jc-between p-ai-center p-shadow-1", 4, "ngIf"], [1, "header-breadcrumb"], ["routerLink", "", 1, "home-icon"], [1, "pi", "pi-home"], ["ngFor", "", 3, "ngForOf"], [1, "p-ml-2"], [3, "routerLink", 4, "ngIf"], [4, "ngIf"], [3, "routerLink"], [1, "layout-breadcrumb-container", "p-d-flex", "p-jc-between", "p-ai-center", "p-shadow-1"], ["styleClass", "layout-breadcrumb p-pl-4 p-py-2", 3, "home", "model"], ["class", "layout-breadcrumb-buttons p-d-flex p-ai-center p-pr-3", 4, "ngIf"], [1, "layout-breadcrumb-buttons", "p-d-flex", "p-ai-center", "p-pr-3"], ["pButton", "", "pRipple", "", "type", "button", "title", "Hilfe f\u00FCr diesen Artikel anzeigen", "icon", "pi pi-question-circle", 1, "p-button-rounded", "p-button-text", "p-button-plain", "p-mr-1", 3, "click"], ["pButton", "", "pRipple", "", "type", "button", "title", "Hilfe f\u00FCr diesen Artikel vervalten", "icon", "pi pi-pencil", 1, "p-button-rounded", "p-button-text", "p-button-plain", "p-mr-1", 3, "click"]], template: function BreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadcrumbComponent_div_0_Template, 9, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(1, BreadcrumbComponent_div_1_Template, 3, 3, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.disableBreadcrumbs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.disableBreadcrumbs);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc3.RouterLinkWithHref, ɵngcc4.NgForOf, HttpProgressLoaderComponent, ɵngcc5.Breadcrumb, ɵngcc6.ButtonDirective, ɵngcc7.Ripple]; }, styles: [".home-icon[_ngcontent-%COMP%]{margin-right:.3em}.home-icon[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:28px}.header-breadcrumb[_ngcontent-%COMP%]{display:flex;flex-direction:row;font-size:large}.header-breadcrumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{vertical-align:middle;color:#fff}.header-breadcrumb[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{padding:0;list-style:none;display:inline-block}.header-breadcrumb[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline-block;color:#fff;vertical-align:middle}.header-breadcrumb[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:nth-child(2n){font-size:20px}"] });
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService }
];
BreadcrumbComponent.propDecorators = {
    disableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    openHelpPage: [{ type: Output }],
    openHelpPageEditor: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadcrumbComponent, [{
        type: Component,
        args: [{
                selector: 'tk-breadcrumb',
                template: "<div *ngIf=\"disableBreadcrumbs\" class=\"header-breadcrumb\">\n  <ul>\n    <li>\n      <a class=\"home-icon\" routerLink=\"\">\n        <i class=\"pi pi-home\"></i>\n      </a>\n    </li>\n    <li></li>\n    <ng-template ngFor let-item let-last=\"last\" [ngForOf]=\"items\">\n      <li>\n        <a [routerLink]=\"item.routerLink\" *ngIf=\"item.routerLink\">{{ item.label }}</a>\n        <ng-container *ngIf=\"!item.routerLink\">{{ item.label }}</ng-container>\n      </li>\n      <li *ngIf=\"!last\">/</li>\n    </ng-template>\n    <li>\n      <tk-http-progress-loader class=\"p-ml-2\"></tk-http-progress-loader>\n    </li>\n  </ul>\n</div>\n<div *ngIf=\"!disableBreadcrumbs\" class=\"layout-breadcrumb-container p-d-flex p-jc-between p-ai-center p-shadow-1\">\n  <p-breadcrumb [home]=\"home\" [model]=\"items\" styleClass=\"layout-breadcrumb p-pl-4 p-py-2\"></p-breadcrumb>\n  <div *ngIf=\"fullPortalLayout\" class=\"layout-breadcrumb-buttons p-d-flex p-ai-center p-pr-3\">\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n      (click)=\"onOpenHelpPage($event)\"\n      icon=\"pi pi-question-circle\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n    <button\n      pButton\n      pRipple\n      type=\"button\"\n      title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n      (click)=\"onOpenHelpPageEditor($event)\"\n      icon=\"pi pi-pencil\"\n      class=\"p-button-rounded p-button-text p-button-plain p-mr-1\"\n    ></button>\n  </div>\n</div>\n",
                styles: [".home-icon{margin-right:.3em}.home-icon i{font-size:28px}.header-breadcrumb{display:flex;flex-direction:row;font-size:large}.header-breadcrumb a i{vertical-align:middle;color:#fff}.header-breadcrumb ul{padding:0;list-style:none;display:inline-block}.header-breadcrumb ul li{display:inline-block;color:#fff;vertical-align:middle}.header-breadcrumb ul li:nth-child(2n){font-size:20px}"]
            }]
    }], function () { return [{ type: BreadcrumbService }]; }, { openHelpPage: [{
            type: Output
        }], openHelpPageEditor: [{
            type: Output
        }], disableBreadcrumbs: [{
            type: Input
        }], fullPortalLayout: [{
            type: Input
        }] }); })();

class CollapsibleDirective {
    constructor(el) {
        this.el = el;
        this.isCollapsed = true;
        this.collapsed = new EventEmitter();
        this.expanded = new EventEmitter();
        console.log(`collapsible directive constructor ${el.nativeElement.classList}`);
        el.nativeElement.classList.add("collapsible");
    }
    toggle() {
        this.isCollapsed ? this.show() : this.hide();
    }
    show() {
        this.isCollapsed = false;
    }
    hide() {
        this.isCollapsed = true;
    }
}
CollapsibleDirective.ɵfac = function CollapsibleDirective_Factory(t) { return new (t || CollapsibleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CollapsibleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CollapsibleDirective, selectors: [["", "tkCollapsible", ""]], inputs: { isCollapsed: "isCollapsed" }, outputs: { collapsed: "collapsed", expanded: "expanded" } });
CollapsibleDirective.ctorParameters = () => [
    { type: ElementRef }
];
CollapsibleDirective.propDecorators = {
    isCollapsed: [{ type: Input }],
    collapsed: [{ type: Output }],
    expanded: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CollapsibleDirective, [{
        type: Directive,
        args: [{
                selector: "[tkCollapsible]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { isCollapsed: [{
            type: Input
        }], collapsed: [{
            type: Output
        }], expanded: [{
            type: Output
        }] }); })();

class AppFooterComponent {
}
AppFooterComponent.ɵfac = function AppFooterComponent_Factory(t) { return new (t || AppFooterComponent)(); };
AppFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppFooterComponent, selectors: [["tk-footer"]], inputs: { homePortal: "homePortal" }, decls: 10, vars: 3, consts: [["id", "footer", "role", "contentinfo", 1, "footer"], [1, "footer-left-segment"], [3, "href", 4, "ngIf", "ngIfElse"], ["withoutHref", ""], [1, "footer-right-segment"], ["class", "links", 4, "ngFor", "ngForOf"], [3, "href"], [1, "links"]], template: function AppFooterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵtemplate(2, AppFooterComponent_a_2_Template, 2, 2, "a", 2);
        ɵngcc0.ɵɵtemplate(3, AppFooterComponent_ng_template_3_Template, 2, 1, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtext(5, " - ");
        ɵngcc0.ɵɵelementStart(6, "span");
        ɵngcc0.ɵɵtext(7, "\u00A9 All Rights Reserved");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 4);
        ɵngcc0.ɵɵtemplate(9, AppFooterComponent_span_9_Template, 3, 2, "span", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(4);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.homePortal.homePage)("ngIfElse", _r1);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.homePortal.subjectLinks);
    } }, directives: [ɵngcc4.NgIf, ɵngcc4.NgForOf], styles: [".footer[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n        vertical-align: middle;\n      }\n      .footer-right-segment[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n        margin-left: 5px;\n        margin-right: 5px;\n      }\n      .footer-right-segment[_ngcontent-%COMP%] {\n        margin-right: 10px;\n        float: right;\n      }\n      .footer-left-segment[_ngcontent-%COMP%] {\n        margin-left: 15px;\n        float: left;\n      }\n      .footer-left-segment[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\n        color: #000000;\n      }"] });
AppFooterComponent.propDecorators = {
    homePortal: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppFooterComponent, [{
        type: Component,
        args: [{
                selector: "tk-footer",
                template: `
    <div 
      class="footer"
      id="footer"
      role="contentinfo"
    >
      <span class="footer-left-segment">
        <a
          *ngIf="homePortal.homePage; else withoutHref"
          [href]="homePortal.homePage"
        >
          {{ homePortal.footerLabel }}
        </a>
        <ng-template #withoutHref>
          <a>
            {{ homePortal.footerLabel }}
          </a>
        </ng-template>
        -
        <span>&copy; All Rights Reserved</span>
      </span>
      <div class="footer-right-segment">
        <span class="links" *ngFor="let link of homePortal.subjectLinks">
          <a [href]="link.url">{{ link.label }}</a>
        </span>
      </div>
    </div>
  `,
                styles: [`
      .footer span {
        vertical-align: middle;
      }
      .footer-right-segment a {
        margin-left: 5px;
        margin-right: 5px;
      }
      .footer-right-segment {
        margin-right: 10px;
        float: right;
      }
      .footer-left-segment {
        margin-left: 15px;
        float: left;
      }
      .footer-left-segment a {
        color: #000000;
      }
    `]
            }]
    }], null, { homePortal: [{
            type: Input
        }] }); })();

class HelpEditDialogComponent {
    constructor() {
        this.display = false;
        this.closed = new EventEmitter();
    }
    ngOnInit() { }
    save() {
        this.closed.emit(true);
    }
    close(event) {
        this.closed.emit(false);
    }
}
HelpEditDialogComponent.ɵfac = function HelpEditDialogComponent_Factory(t) { return new (t || HelpEditDialogComponent)(); };
HelpEditDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HelpEditDialogComponent, selectors: [["tk-help-editor"]], inputs: { display: "display", helpItem: "helpItem" }, outputs: { closed: "closed" }, decls: 21, vars: 9, consts: [["header", "Edit help item for this page", 3, "contentStyle", "visible", "visibleChange", "onHide"], [1, "modal-content"], [1, "p-grid", "p-fluid"], [1, "p-col-12"], [1, "p-float-label"], ["id", "page", "type", "text", "pInputText", "", "name", "page", "disabled", "true", 3, "ngModel", "ngModelChange"], ["for", "page"], ["id", "baseUrl", "type", "text", "pInputText", "", "name", "baseUrl", 3, "ngModel", "ngModelChange"], ["for", "baseUrl"], ["id", "relUrl", "type", "text", "pInputText", "", "name", "relUrl", 3, "ngModel", "ngModelChange"], ["for", "relUrl"], ["pButton", "", "value", "Save", "label", "Save", "icon", "pi pi-check", 1, "primary", 3, "click"], ["pButton", "", "icon", "pi pi-times", "value", "Cancel", "label", "Cancel", 1, "flat", 3, "click"]], template: function HelpEditDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-dialog", 0);
        ɵngcc0.ɵɵlistener("visibleChange", function HelpEditDialogComponent_Template_p_dialog_visibleChange_0_listener($event) { return ctx.display = $event; })("onHide", function HelpEditDialogComponent_Template_p_dialog_onHide_0_listener($event) { return ctx.close($event); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "form", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵelementStart(5, "input", 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function HelpEditDialogComponent_Template_input_ngModelChange_5_listener($event) { return ctx.helpItem.helpItemId = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "label", 6);
        ɵngcc0.ɵɵtext(7, "Page Item");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "span", 4);
        ɵngcc0.ɵɵelementStart(10, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function HelpEditDialogComponent_Template_input_ngModelChange_10_listener($event) { return ctx.helpItem.baseUrl = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "label", 8);
        ɵngcc0.ɵɵtext(12, "Base Url");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 3);
        ɵngcc0.ɵɵelementStart(14, "span", 4);
        ɵngcc0.ɵɵelementStart(15, "input", 9);
        ɵngcc0.ɵɵlistener("ngModelChange", function HelpEditDialogComponent_Template_input_ngModelChange_15_listener($event) { return ctx.helpItem.resourceUrl = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "label", 10);
        ɵngcc0.ɵɵtext(17, "Relative Url");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "p-footer");
        ɵngcc0.ɵɵelementStart(19, "button", 11);
        ɵngcc0.ɵɵlistener("click", function HelpEditDialogComponent_Template_button_click_19_listener() { return ctx.save(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(20, "button", 12);
        ɵngcc0.ɵɵlistener("click", function HelpEditDialogComponent_Template_button_click_20_listener() { return ctx.display = false; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(7, _c0));
        ɵngcc0.ɵɵproperty("contentStyle", ɵngcc0.ɵɵpureFunction0(8, _c1))("visible", ctx.display);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.helpItem.helpItemId);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.helpItem.baseUrl);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("ngModel", ctx.helpItem.resourceUrl);
    } }, directives: [ɵngcc8.Dialog, ɵngcc9.ɵangular_packages_forms_forms_ba, ɵngcc9.NgControlStatusGroup, ɵngcc9.NgForm, ɵngcc9.DefaultValueAccessor, ɵngcc10.InputText, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc11.Footer, ɵngcc6.ButtonDirective], encapsulation: 2 });
HelpEditDialogComponent.ctorParameters = () => [];
HelpEditDialogComponent.propDecorators = {
    display: [{ type: Input }],
    helpItem: [{ type: Input }],
    closed: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpEditDialogComponent, [{
        type: Component,
        args: [{
                selector: 'tk-help-editor',
                template: `
    <p-dialog
      header="Edit help item for this page"
      [contentStyle]="{ overflow: 'visible' }"
      [style]="{ width: '500px', 'max-height': '400px' }"
      [(visible)]="display"
      (onHide)="close($event)"
    >
      <div class="modal-content">
        <form class="p-grid p-fluid">
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="page"
                type="text"
                pInputText
                name="page"
                disabled="true"
                [(ngModel)]="helpItem.helpItemId"
              />
              <label for="page">Page Item</label>
            </span>
          </div>
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="baseUrl"
                type="text"
                pInputText
                name="baseUrl"
                [(ngModel)]="helpItem.baseUrl"
              />
              <label for="baseUrl">Base Url</label>
            </span>
          </div>
          <div class="p-col-12">
            <span class="p-float-label">
              <input
                id="relUrl"
                type="text"
                pInputText
                name="relUrl"
                [(ngModel)]="helpItem.resourceUrl"
              />
              <label for="relUrl">Relative Url</label>
            </span>
          </div>
        </form>
      </div>
      <p-footer>
        <button
          pButton
          class="primary"
          value="Save"
          label="Save"
          icon="pi pi-check"
          (click)="save()"
        ></button>
        <button
          pButton
          icon="pi pi-times"
          class="flat"
          value="Cancel"
          label="Cancel"
          (click)="display = false"
        ></button>
      </p-footer>
    </p-dialog>
  `
            }]
    }], function () { return []; }, { display: [{
            type: Input
        }], closed: [{
            type: Output
        }], helpItem: [{
            type: Input
        }] }); })();

class HttpProgressLoaderService {
    constructor() {
        this.isLoading = new BehaviorSubject(false);
    }
}
HttpProgressLoaderService.ɵfac = function HttpProgressLoaderService_Factory(t) { return new (t || HttpProgressLoaderService)(); };
HttpProgressLoaderService.ɵprov = ɵɵdefineInjectable({ factory: function HttpProgressLoaderService_Factory() { return new HttpProgressLoaderService(); }, token: HttpProgressLoaderService, providedIn: "root" });
HttpProgressLoaderService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpProgressLoaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class HttpProgressLoaderComponent {
    constructor(loaderService) {
        this.loaderService = loaderService;
        this.loaderService.isLoading.subscribe(v => {
            this.loading = v;
        });
    }
    ngOnInit() { }
}
HttpProgressLoaderComponent.ɵfac = function HttpProgressLoaderComponent_Factory(t) { return new (t || HttpProgressLoaderComponent)(ɵngcc0.ɵɵdirectiveInject(HttpProgressLoaderService)); };
HttpProgressLoaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HttpProgressLoaderComponent, selectors: [["tk-http-progress-loader"]], decls: 3, vars: 3, consts: [[1, "wrapper", 3, "ngClass"], ["viewBox", "0 0 100 100", "xmlns", "http://www.w3.org/2000/svg"], ["cx", "50", "cy", "50", "r", "45"]], template: function HttpProgressLoaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(1, "svg", 1);
        ɵngcc0.ɵɵelement(2, "circle", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c2, !ctx.loading));
    } }, directives: [ɵngcc4.NgClass], styles: ["[_nghost-%COMP%] {\n        display: block;\n        height: 36px;\n      }\n      .wrapper[_ngcontent-%COMP%] {\n        position: absolute;\n        opacity: 1;\n      }\n      .wrapper.noshow[_ngcontent-%COMP%] {\n        -webkit-transition: opacity 1s linear;\n        -moz-transition: opacity 1s linear;\n        -o-transition: opacity 1s linear;\n        transition: opacity 1s linear;\n        opacity: 0;\n      }\n      svg[_ngcontent-%COMP%] {\n        animation: 2s linear infinite svg-animation;\n        width: 36px;\n      }\n\n      .noshow[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%] {\n        animation: none;\n      }\n\n      @keyframes svg-animation {\n        0% {\n          transform: rotateZ(0deg);\n        }\n        100% {\n          transform: rotateZ(360deg);\n        }\n      }\n\n      circle[_ngcontent-%COMP%] {\n        animation: 1.4s ease-in-out infinite both circle-animation;\n        display: block;\n        fill: transparent;\n        stroke: #ffffff;\n        stroke-linecap: round;\n        stroke-dasharray: 283;\n        stroke-dashoffset: 280;\n        stroke-width: 10px;\n        transform-origin: 50% 50%;\n      }\n\n      @keyframes circle-animation {\n        0%,\n        25% {\n          stroke-dashoffset: 280;\n          transform: rotate(0);\n        }\n\n        50%,\n        75% {\n          stroke-dashoffset: 75;\n          transform: rotate(45deg);\n        }\n\n        100% {\n          stroke-dashoffset: 280;\n          transform: rotate(360deg);\n        }\n      }"] });
HttpProgressLoaderComponent.ctorParameters = () => [
    { type: HttpProgressLoaderService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpProgressLoaderComponent, [{
        type: Component,
        args: [{
                selector: 'tk-http-progress-loader',
                template: `
    <div class="wrapper" [ngClass]="{ noshow: !loading }">
      <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <circle cx="50" cy="50" r="45" />
      </svg>
    </div>
  `,
                styles: [`
      :host {
        display: block;
        height: 36px;
      }
      .wrapper {
        position: absolute;
        opacity: 1;
      }
      .wrapper.noshow {
        -webkit-transition: opacity 1s linear;
        -moz-transition: opacity 1s linear;
        -o-transition: opacity 1s linear;
        transition: opacity 1s linear;
        opacity: 0;
      }
      svg {
        animation: 2s linear infinite svg-animation;
        width: 36px;
      }

      .noshow svg {
        animation: none;
      }

      @keyframes svg-animation {
        0% {
          transform: rotateZ(0deg);
        }
        100% {
          transform: rotateZ(360deg);
        }
      }

      circle {
        animation: 1.4s ease-in-out infinite both circle-animation;
        display: block;
        fill: transparent;
        stroke: #ffffff;
        stroke-linecap: round;
        stroke-dasharray: 283;
        stroke-dashoffset: 280;
        stroke-width: 10px;
        transform-origin: 50% 50%;
      }

      @keyframes circle-animation {
        0%,
        25% {
          stroke-dashoffset: 280;
          transform: rotate(0);
        }

        50%,
        75% {
          stroke-dashoffset: 75;
          transform: rotate(45deg);
        }

        100% {
          stroke-dashoffset: 280;
          transform: rotate(360deg);
        }
      }
    `]
            }]
    }], function () { return [{ type: HttpProgressLoaderService }]; }, null); })();

class AppInlineProfileComponent {
    constructor(authService, router, configService) {
        this.authService = authService;
        this.router = router;
        this.configService = configService;
        this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
        this.inlineMenuClick = new EventEmitter();
    }
    get displayName() {
        var _a;
        const person = (_a = this.userProfile) === null || _a === void 0 ? void 0 : _a.person;
        if (person === null || person === void 0 ? void 0 : person.displayName) {
            return person.displayName;
        }
        else if ((person === null || person === void 0 ? void 0 : person.firstName) && person.lastName) {
            return person.firstName + ' ' + person.lastName;
        }
        else {
            return this.authService.currentUser().userId;
        }
    }
    get baseUrl() {
        return this.configService.getPortalData().baseUrl;
    }
    get tabIndex() {
        return !this.inlineMenuActive ? '-1' : null;
    }
    ngOnInit() {
        this.userProfile = this.authService.currentUser();
        this.authService
            .getAvatar()
            .subscribe(avatar => (this.userAvatar = avatar));
    }
    onClick(event) {
        this.inlineMenuClick.emit(null);
        event.preventDefault();
    }
    logout(event) {
        event.preventDefault();
        this.authService.logout();
    }
}
AppInlineProfileComponent.ɵfac = function AppInlineProfileComponent_Factory(t) { return new (t || AppInlineProfileComponent)(ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Router), ɵngcc0.ɵɵdirectiveInject(ConfigurationService)); };
AppInlineProfileComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppInlineProfileComponent, selectors: [["tk-inline-profile"]], inputs: { inlineMenuActive: "inlineMenuActive" }, outputs: { inlineMenuClick: "inlineMenuClick" }, decls: 31, vars: 14, consts: [[3, "ngClass"], [1, "layout-inline-menu-action", "p-d-flex", "p-dir-row", "p-ai-center", "p-p-3", 3, "click"], ["alt", "avatar", 1, "profile-image", 3, "src"], [1, "p-d-flex", "p-flex-column", "p-ml-2"], [1, "p-text-bold"], [1, "layout-inline-menu-icon", "pi", "pi-angle-down", "p-ml-auto"], [1, "layout-inline-menu-action-panel"], ["class", "layout-inline-menu-action-item", 4, "tkIfPerm"], [1, "layout-inline-menu-action-item"], ["title", "Manage your preferences and settings", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "href"], [1, "pi", "pi-cog", "pi-fw"], ["title", "Change your current password", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "href"], [1, "pi", "pi-key", "pi-fw"], ["title", "Overview of your application roles and permissions", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "href"], [1, "pi", "pi-unlock", "pi-fw"], ["href", "#", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "pi", "pi-power-off", "pi-fw"], ["title", "Manage your personal information and avatar", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "href"], [1, "pi", "pi-user", "pi-fw"]], template: function AppInlineProfileComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "a", 1);
        ɵngcc0.ɵɵlistener("click", function AppInlineProfileComponent_Template_a_click_1_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵelement(2, "img", 2);
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "small");
        ɵngcc0.ɵɵtext(7, "Portal User");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "i", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "ul", 6);
        ɵngcc0.ɵɵtemplate(10, AppInlineProfileComponent_li_10_Template, 5, 2, "li", 7);
        ɵngcc0.ɵɵelementStart(11, "li", 8);
        ɵngcc0.ɵɵelementStart(12, "a", 9);
        ɵngcc0.ɵɵelement(13, "i", 10);
        ɵngcc0.ɵɵelementStart(14, "span");
        ɵngcc0.ɵɵtext(15, "My Settings");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "li", 8);
        ɵngcc0.ɵɵelementStart(17, "a", 11);
        ɵngcc0.ɵɵelement(18, "i", 12);
        ɵngcc0.ɵɵelementStart(19, "span");
        ɵngcc0.ɵɵtext(20, "Change Password");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "li", 8);
        ɵngcc0.ɵɵelementStart(22, "a", 13);
        ɵngcc0.ɵɵelement(23, "i", 14);
        ɵngcc0.ɵɵelementStart(24, "span");
        ɵngcc0.ɵɵtext(25, "My Roles & Permissions");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "li", 8);
        ɵngcc0.ɵɵelementStart(27, "a", 15);
        ɵngcc0.ɵɵlistener("click", function AppInlineProfileComponent_Template_a_click_27_listener($event) { return ctx.logout($event); });
        ɵngcc0.ɵɵelement(28, "i", 16);
        ɵngcc0.ɵɵelementStart(29, "span");
        ɵngcc0.ɵɵtext(30, "Logout");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(12, _c3, ctx.inlineMenuActive));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("src", (ctx.userAvatar == null ? null : ctx.userAvatar.avatarSmallImageUrl) || ctx.defaultAvatarUrl, ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.displayName);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("@menu", ctx.inlineMenuActive ? "visibleAnimated" : "hiddenAnimated");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("tkIfPerm", "PROFILE#VIEW");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("href", ctx.baseUrl + "/account/settings", ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("href", ctx.baseUrl + "/account/change-password", ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("href", ctx.baseUrl + "/account/roles-and-perms", ɵngcc0.ɵɵsanitizeUrl);
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵattribute("tabindex", ctx.tabIndex);
    } }, directives: function () { return [ɵngcc4.NgClass, TkIfPermDirective]; }, styles: ["@-webkit-keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}@keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}.profile-content[_ngcontent-%COMP%]{-webkit-animation:opacityFadeIn .2s linear 0s 1;animation:opacityFadeIn .2s linear 0s 1}.profile-image[_ngcontent-%COMP%]{border-radius:50%;width:32px;height:32px}"], data: { animation: [
            trigger('menu', [
                state('hiddenAnimated', style({
                    height: '0px',
                    paddingBottom: '0px',
                    overflow: 'hidden'
                })),
                state('visibleAnimated', style({
                    height: '*',
                    overflow: 'visible'
                })),
                state('visible', style({
                    opacity: 1,
                    'z-index': 100
                })),
                state('hidden', style({
                    opacity: 0,
                    'z-index': '*'
                })),
                transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                transition('visible => hidden', animate('.1s linear')),
                transition('hidden => visible', [style({ transform: 'scaleY(0.8)' }), animate('.12s cubic-bezier(0, 0, 0.2, 1)')])
            ])
        ] } });
AppInlineProfileComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: Router },
    { type: ConfigurationService }
];
AppInlineProfileComponent.propDecorators = {
    inlineMenuActive: [{ type: Input }],
    inlineMenuClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppInlineProfileComponent, [{
        type: Component,
        args: [{
                selector: 'tk-inline-profile',
                template: "<div [ngClass]=\"{'layout-inline-menu': true, 'layout-inline-menu-active': inlineMenuActive}\">\n  <a class=\"layout-inline-menu-action p-d-flex p-dir-row p-ai-center p-p-3\" (click)=\"onClick($event)\">\n    <img [src]=\"userAvatar?.avatarSmallImageUrl || defaultAvatarUrl\" alt=\"avatar\" class=\"profile-image\" />\n    <span class=\"p-d-flex p-flex-column p-ml-2\">\n      <span class=\"p-text-bold\">{{ displayName }}</span>\n      <small>Portal User</small>\n    </span>\n    <i class=\"layout-inline-menu-icon pi pi-angle-down p-ml-auto\"></i>\n  </a>\n\n  <ul class=\"layout-inline-menu-action-panel\" [@menu]=\"inlineMenuActive ? 'visibleAnimated' : 'hiddenAnimated'\">\n    <li *tkIfPerm=\"'PROFILE#VIEW'\" class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/profile'\"\n        title=\"Manage your personal information and avatar\"\n      >\n        <i class=\"pi pi-user pi-fw\"></i>\n        <span>My Personal Info</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/settings'\"\n        title=\"Manage your preferences and settings\"\n      >\n        <i class=\"pi pi-cog pi-fw\"></i>\n        <span>My Settings</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/change-password'\"\n        title=\"Change your current password\"\n      >\n        <i class=\"pi pi-key pi-fw\"></i>\n        <span>Change Password</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a\n        class=\"p-d-flex p-flex-row p-ai-center\"\n        [attr.tabindex]=\"tabIndex\"\n        [href]=\"baseUrl + '/account/roles-and-perms'\"\n        title=\"Overview of your application roles and permissions\"\n      >\n        <i class=\"pi pi-unlock pi-fw\"></i>\n        <span>My Roles & Permissions</span>\n      </a>\n    </li>\n    <li class=\"layout-inline-menu-action-item\">\n      <a class=\"p-d-flex p-flex-row p-ai-center\" [attr.tabindex]=\"tabIndex\" href=\"#\" (click)=\"logout($event)\">\n        <i class=\"pi pi-power-off pi-fw\"></i>\n        <span>Logout</span>\n      </a>\n    </li>\n  </ul>\n</div>\n",
                animations: [
                    trigger('menu', [
                        state('hiddenAnimated', style({
                            height: '0px',
                            paddingBottom: '0px',
                            overflow: 'hidden'
                        })),
                        state('visibleAnimated', style({
                            height: '*',
                            overflow: 'visible'
                        })),
                        state('visible', style({
                            opacity: 1,
                            'z-index': 100
                        })),
                        state('hidden', style({
                            opacity: 0,
                            'z-index': '*'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('visible => hidden', animate('.1s linear')),
                        transition('hidden => visible', [style({ transform: 'scaleY(0.8)' }), animate('.12s cubic-bezier(0, 0, 0.2, 1)')])
                    ])
                ],
                styles: ["@-webkit-keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}@keyframes opacityFadeIn{0%{opacity:0}to{opacity:1}}.profile-content{-webkit-animation:opacityFadeIn .2s linear 0s 1;animation:opacityFadeIn .2s linear 0s 1}.profile-image{border-radius:50%;width:32px;height:32px}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: ɵngcc3.Router }, { type: ConfigurationService }]; }, { inlineMenuClick: [{
            type: Output
        }], inlineMenuActive: [{
            type: Input
        }] }); })();

class LoadingComponent {
    constructor() { }
    ngOnInit() { }
}
LoadingComponent.ɵfac = function LoadingComponent_Factory(t) { return new (t || LoadingComponent)(); };
LoadingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LoadingComponent, selectors: [["tk-loading"]], decls: 17, vars: 0, consts: [[1, "loading-panel"], ["title", "7", 1, "loader", "loader--style8"], ["version", "1.1", "id", "Layer_1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "x", "0px", "y", "0px", "width", "24px", "height", "30px", "viewBox", "0 0 24 30", 0, "xml", "space", "preserve", 2, "enable-background", "new 0 0 50 50"], ["x", "0", "y", "5.25098", "width", "4", "height", "19.498", "fill", "#333", "opacity", "0.2"], ["attributeName", "opacity", "attributeType", "XML", "values", "0.2; 1; .2", "begin", "0s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "height", "attributeType", "XML", "values", "10; 20; 10", "begin", "0s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "y", "attributeType", "XML", "values", "10; 5; 10", "begin", "0s", "dur", "0.6s", "repeatCount", "indefinite"], ["x", "8", "y", "7.75098", "width", "4", "height", "14.498", "fill", "#333", "opacity", "0.2"], ["attributeName", "opacity", "attributeType", "XML", "values", "0.2; 1; .2", "begin", "0.15s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "height", "attributeType", "XML", "values", "10; 20; 10", "begin", "0.15s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "y", "attributeType", "XML", "values", "10; 5; 10", "begin", "0.15s", "dur", "0.6s", "repeatCount", "indefinite"], ["x", "16", "y", "9.74902", "width", "4", "height", "10.502", "fill", "#333", "opacity", "0.2"], ["attributeName", "opacity", "attributeType", "XML", "values", "0.2; 1; .2", "begin", "0.3s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "height", "attributeType", "XML", "values", "10; 20; 10", "begin", "0.3s", "dur", "0.6s", "repeatCount", "indefinite"], ["attributeName", "y", "attributeType", "XML", "values", "10; 5; 10", "begin", "0.3s", "dur", "0.6s", "repeatCount", "indefinite"]], template: function LoadingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(2, "svg", 2);
        ɵngcc0.ɵɵelementStart(3, "rect", 3);
        ɵngcc0.ɵɵelement(4, "animate", 4);
        ɵngcc0.ɵɵelement(5, "animate", 5);
        ɵngcc0.ɵɵelement(6, "animate", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "rect", 7);
        ɵngcc0.ɵɵelement(8, "animate", 8);
        ɵngcc0.ɵɵelement(9, "animate", 9);
        ɵngcc0.ɵɵelement(10, "animate", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "rect", 11);
        ɵngcc0.ɵɵelement(12, "animate", 12);
        ɵngcc0.ɵɵelement(13, "animate", 13);
        ɵngcc0.ɵɵelement(14, "animate", 14);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(15, "p");
        ɵngcc0.ɵɵtext(16, "Loading...");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } }, styles: [".loading-panel[_ngcontent-%COMP%]{padding:1em}"], changeDetection: 0 });
LoadingComponent.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingComponent, [{
        type: Component,
        args: [{
                selector: 'tk-loading',
                template: "<div class=\"loading-panel\">\r\n  <span class=\"loader loader--style8\" title=\"7\">\r\n    <svg\r\n      version=\"1.1\"\r\n      id=\"Layer_1\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      width=\"24px\"\r\n      height=\"30px\"\r\n      viewBox=\"0 0 24 30\"\r\n      style=\"enable-background:new 0 0 50 50;\"\r\n      xml:space=\"preserve\"\r\n    >\r\n      <rect\r\n        x=\"0\"\r\n        y=\"5.25098\"\r\n        width=\"4\"\r\n        height=\"19.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"8\"\r\n        y=\"7.75098\"\r\n        width=\"4\"\r\n        height=\"14.498\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.15s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n      <rect\r\n        x=\"16\"\r\n        y=\"9.74902\"\r\n        width=\"4\"\r\n        height=\"10.502\"\r\n        fill=\"#333\"\r\n        opacity=\"0.2\"\r\n      >\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          attributeType=\"XML\"\r\n          values=\"0.2; 1; .2\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"height\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 20; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n        <animate\r\n          attributeName=\"y\"\r\n          attributeType=\"XML\"\r\n          values=\"10; 5; 10\"\r\n          begin=\"0.3s\"\r\n          dur=\"0.6s\"\r\n          repeatCount=\"indefinite\"\r\n        ></animate>\r\n      </rect>\r\n    </svg>\r\n  </span>\r\n  <p>Loading...</p>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".loading-panel{padding:1em}"]
            }]
    }], function () { return []; }, null); })();

class NoHelpInfoComponent {
    constructor(config, ref) {
        this.config = config;
        this.ref = ref;
        this.pageId = config.data.pageItem;
    }
    ngOnInit() { }
    close() {
        this.ref.close();
    }
}
NoHelpInfoComponent.ɵfac = function NoHelpInfoComponent_Factory(t) { return new (t || NoHelpInfoComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc12.DynamicDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc12.DynamicDialogRef)); };
NoHelpInfoComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NoHelpInfoComponent, selectors: [["ng-component"]], decls: 9, vars: 1, consts: [[1, "dialog-content"], [1, "code", "p-my-2"], [1, "dialog-footer"], [1, "p-col", "p-fluid"], ["type", "button", "pButton", "", "label", "Close", 3, "click"]], template: function NoHelpInfoComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3, "No help was found for this item. Please ask your system administrator to add it. The context ID for this page is below:");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "span", 1);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 2);
        ɵngcc0.ɵɵelementStart(7, "div", 3);
        ɵngcc0.ɵɵelementStart(8, "button", 4);
        ɵngcc0.ɵɵlistener("click", function NoHelpInfoComponent_Template_button_click_8_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate(ctx.pageId);
    } }, directives: [ɵngcc6.ButtonDirective], styles: [".code[_ngcontent-%COMP%] {\n        display: block;\n        clear: both;\n        padding: 0.5em;\n        font-family: monospace;\n        background-color: #ececec;\n        border-radius: 4px;\n      }"] });
NoHelpInfoComponent.ctorParameters = () => [
    { type: DynamicDialogConfig },
    { type: DynamicDialogRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoHelpInfoComponent, [{
        type: Component,
        args: [{
                template: `
    <div>
      <div class="dialog-content">
        <span
          >No help was found for this item. Please ask your system administrator
          to add it. The context ID for this page is below:</span
        >
        <span class="code p-my-2">{{ pageId }}</span>
      </div>
      <div class="dialog-footer">
        <div class="p-col p-fluid">
          <button
            type="button"
            pButton
            label="Close"
            (click)="close()"
          ></button>
        </div>
      </div>
    </div>
  `,
                styles: [`
      .code {
        display: block;
        clear: both;
        padding: 0.5em;
        font-family: monospace;
        background-color: #ececec;
        border-radius: 4px;
      }
    `]
            }]
    }], function () { return [{ type: ɵngcc12.DynamicDialogConfig }, { type: ɵngcc12.DynamicDialogRef }]; }, null); })();

class PanelHeaderComponent {
    constructor() { }
    ngOnInit() { }
}
PanelHeaderComponent.ɵfac = function PanelHeaderComponent_Factory(t) { return new (t || PanelHeaderComponent)(); };
PanelHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PanelHeaderComponent, selectors: [["tk-panel-header"]], inputs: { header: "header", leftToolbar: "leftToolbar", rightToolbar: "rightToolbar" }, decls: 11, vars: 3, consts: [[1, "panel-header"], [1, "panel-toolbar-left"], [4, "ngTemplateOutlet"], [1, "panel-heading"], [1, "panel-toolbar-right"], ["defaultLeftToolbar", ""], ["defaultRightToolbar", ""]], template: function PanelHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, PanelHeaderComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "h1", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵtemplate(6, PanelHeaderComponent_ng_container_6_Template, 1, 0, "ng-container", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, PanelHeaderComponent_ng_template_7_Template, 0, 0, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, PanelHeaderComponent_ng_template_9_Template, 0, 0, "ng-template", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(8);
        const _r4 = ɵngcc0.ɵɵreference(10);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.leftToolbar ? ctx.leftToolbar : _r2);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.header);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.rightToolbar ? ctx.rightToolbar : _r4);
    } }, directives: [ɵngcc4.NgTemplateOutlet], styles: [".panel-header[_ngcontent-%COMP%] {\n        display: flex;\n      }\n      .panel-heading[_ngcontent-%COMP%] {\n        margin: 0px;\n        line-height: 30px;\n        font-weight: 100;\n      }\n      .panel-toolbar-right[_ngcontent-%COMP%] {\n        margin-left: auto;\n      }\n      .panel-toolbar-left[_ngcontent-%COMP%], .panel-toolbar-right[_ngcontent-%COMP%] {\n        display: flex;\n      }"] });
PanelHeaderComponent.ctorParameters = () => [];
PanelHeaderComponent.propDecorators = {
    header: [{ type: Input }],
    leftToolbar: [{ type: Input }],
    rightToolbar: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PanelHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'tk-panel-header',
                template: `
    <div class="panel-header">
      <div class="panel-toolbar-left">
        <ng-container
          *ngTemplateOutlet="leftToolbar ? leftToolbar : defaultLeftToolbar"
        ></ng-container>
      </div>
      <h1 class="panel-heading">{{ header }}</h1>
      <div class="panel-toolbar-right">
        <ng-container
          *ngTemplateOutlet="rightToolbar ? rightToolbar : defaultRightToolbar"
        ></ng-container>
      </div>
    </div>

    <ng-template #defaultLeftToolbar> </ng-template>
    <ng-template #defaultRightToolbar> </ng-template>
  `,
                styles: [`
      .panel-header {
        display: flex;
      }
      .panel-heading {
        margin: 0px;
        line-height: 30px;
        font-weight: 100;
      }
      .panel-toolbar-right {
        margin-left: auto;
      }
      .panel-toolbar-left,
      .panel-toolbar-right {
        display: flex;
      }
    `]
            }]
    }], function () { return []; }, { header: [{
            type: Input
        }], leftToolbar: [{
            type: Input
        }], rightToolbar: [{
            type: Input
        }] }); })();

class HeaderComponent {
    constructor(authService, config, stateService, router) {
        this.authService = authService;
        this.config = config;
        this.stateService = stateService;
        this.router = router;
        this.defaultAvatarUrl = DEFAULT_AVATAR_URL;
        this.menuButtonClick = new EventEmitter();
        this.topbarItemClick = new EventEmitter();
        this.openHelpPage = new EventEmitter();
        this.openHelpPageEditor = new EventEmitter();
        this.openFeedback = new EventEmitter();
        this.openAddToLaunchpad = new EventEmitter();
        this.openSupportTicket = new EventEmitter();
        this.searchClick = new EventEmitter();
        this.homeNavUrl = '/';
        this.homeNavTitle = 'Home';
    }
    ngOnInit() {
        this.userProfile = this.authService.currentUser();
        this.userAvatar = this.authService.getAvatar();
        this.userDisplayName = this.authService.currentUser().person.displayName;
        this.searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
    }
    clickMenu() {
        console.log('Menu click');
        this.menuExpanded = !this.menuExpanded;
    }
    navigateTo(path, event) {
        event.preventDefault();
        path = this.config.getPortalData().baseUrl + path;
        location.assign(path);
    }
    logout(event) {
        event.preventDefault();
        this.authService.logout();
    }
    onMenuButtonClick(e) {
        this.menuButtonClick.emit(e);
    }
    onTopbarItemClick(e, arg) {
        this.topbarItemClick.emit({ event: e, arg });
    }
    onOpenHelpPageEditor(e) {
        this.openHelpPageEditor.emit(e);
    }
    onOpenHelpPage(e) {
        this.openHelpPage.emit(e);
    }
    onOpenFeedback(e) {
        this.openFeedback.emit(e);
    }
    onAddToFavourites(e) {
        this.openAddToLaunchpad.emit(e);
    }
    onOpenSupportTicket(e) {
        this.openSupportTicket.emit(e);
    }
    onTopbarMobileButtonClick($event) {
        this.mobileTopbarActive = !this.mobileTopbarActive;
        $event.preventDefault();
    }
    onSearchClick(e, val) {
        this.searchClick.emit({ event: e, val });
    }
}
HeaderComponent.ɵfac = function HeaderComponent_Factory(t) { return new (t || HeaderComponent)(ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE), ɵngcc0.ɵɵdirectiveInject(ConfigurationService), ɵngcc0.ɵɵdirectiveInject(StateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Router)); };
HeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HeaderComponent, selectors: [["tk-header"]], viewQuery: function HeaderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchInputViewChild = _t.first);
    } }, inputs: { homeNavUrl: "homeNavUrl", homeNavTitle: "homeNavTitle", menuButtonTitle: "menuButtonTitle", profileMode: "profileMode", isHorizontal: "isHorizontal", activeTopbarItem: "activeTopbarItem", disableBreadcrumbs: "disableBreadcrumbs", fullPortalLayout: "fullPortalLayout", search: "search" }, outputs: { menuButtonClick: "menuButtonClick", topbarItemClick: "topbarItemClick", openHelpPage: "openHelpPage", openHelpPageEditor: "openHelpPageEditor", openFeedback: "openFeedback", openAddToLaunchpad: "openAddToLaunchpad", openSupportTicket: "openSupportTicket", searchClick: "searchClick" }, decls: 11, vars: 8, consts: [["id", "header", "role", "banner", 1, "layout-topbar", "p-shadow-4"], [1, "layout-topbar-left"], [1, "layout-topbar-logo", 3, "href", "title"], [1, "logo"], ["class", "layout-menu-button p-shadow-6", "pRipple", "", 3, "title", "click", 4, "ngIf"], ["pRipple", "", 1, "layout-topbar-mobile-button", 3, "click"], [1, "pi", "pi-ellipsis-v", "fs-large"], [1, "layout-topbar-right", 3, "ngClass"], [1, "layout-topbar-actions-left"], [3, "disableBreadcrumbs", "fullPortalLayout", "openHelpPage", "openHelpPageEditor", 4, "ngIf"], ["class", "layout-topbar-actions-right", 4, "ngIf"], ["pRipple", "", 1, "layout-menu-button", "p-shadow-6", 3, "title", "click"], [1, "pi", "pi-chevron-right"], [3, "disableBreadcrumbs", "fullPortalLayout", "openHelpPage", "openHelpPageEditor"], [1, "layout-topbar-actions-right"], [1, "layout-topbar-items"], [1, "layout-topbar-item"], ["href", "#", "title", "Feedback", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-star-o", "fs-large"], ["href", "#", "title", "Add to Favourites", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-heart", "fs-large"], ["href", "#", "title", "Support Ticket", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-ticket", "fs-large"], [1, "layout-topbar-item", "layout-search-item"], ["pRipple", "", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-search", "fs-large"], ["class", "layout-search-panel p-inputgroup", 4, "ngIf"], ["class", "layout-topbar-item", 4, "ngIf"], [1, "layout-topbar-item", "notifications"], [1, "pi", "pi-bell", "fs-large"], ["class", "layout-topbar-action-panel p-shadow-6", 4, "ngIf"], ["pRipple", "", 1, "layout-topbar-action", "p-d-flex", "p-dir-row", "p-jc-center", "p-ai-center", "p-px-2", "rounded-circle", 3, "click"], ["alt", "avatar", 1, "profile-image", 3, "src"], [1, "layout-search-panel", "p-inputgroup"], [1, "p-inputgroup-addon"], [1, "pi", "pi-search"], [3, "searchClick"], ["pButton", "", "pRipple", "", "type", "button", "icon", "pi pi-times", 1, "p-button-rounded", "p-button-text", "p-button-plain", 3, "click"], ["href", "#", "title", "Hilfe f\u00FCr diesen Artikel anzeigen", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-question-circle", "fs-large"], ["href", "#", "title", "Hilfe f\u00FCr diesen Artikel vervalten", 1, "layout-topbar-action", "rounded-circle", 3, "click"], [1, "pi", "pi-pencil", "fs-large"], [1, "layout-topbar-action-panel", "p-shadow-6"], [1, "p-mb-3"], [1, "p-px-3", "fs-small"], [1, "layout-topbar-action-item"], [1, "p-d-flex", "p-flex-row", "p-ai-center"], [1, "avatar-monogram"], [1, "p-d-flex", "p-flex-column", "p-ml-3", 2, "flex-grow", "1"], [1, "p-d-flex", "p-ai-center", "p-jc-between", "p-mb-1"], [1, "fs-small", "p-text-bold"], [1, "fs-small"], ["class", "layout-topbar-action-item", 4, "tkIfPerm"], ["pRipple", "", "href", "#", "title", "Manage your preferences and settings", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "p-mr-2", "pi", "pi-cog"], ["pRipple", "", "href", "#", "title", "Change your current password", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "p-mr-2", "pi", "pi-key"], ["pRipple", "", "href", "#", "title", "Overview of your application roles and permissions", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "p-mr-2", "pi", "pi-unlock"], ["pRipple", "", "href", "#", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "p-mr-2", "pi", "pi-power-off"], ["pRipple", "", "href", "#", "title", "Manage your personal information and avatar", 1, "p-d-flex", "p-flex-row", "p-ai-center", 3, "click"], [1, "p-mr-2", "pi", "pi-user"]], template: function HeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "a", 2);
        ɵngcc0.ɵɵelement(3, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, HeaderComponent_a_4_Template, 2, 1, "a", 4);
        ɵngcc0.ɵɵelementStart(5, "a", 5);
        ɵngcc0.ɵɵlistener("click", function HeaderComponent_Template_a_click_5_listener($event) { return ctx.onTopbarMobileButtonClick($event); });
        ɵngcc0.ɵɵelement(6, "i", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 7);
        ɵngcc0.ɵɵelementStart(8, "div", 8);
        ɵngcc0.ɵɵtemplate(9, HeaderComponent_tk_breadcrumb_9_Template, 1, 2, "tk-breadcrumb", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, HeaderComponent_div_10_Template, 26, 8, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("href", ctx.homeNavUrl, ɵngcc0.ɵɵsanitizeUrl)("title", ctx.homeNavTitle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fullPortalLayout);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(6, _c5, ctx.mobileTopbarActive));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.disableBreadcrumbs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fullPortalLayout);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc7.Ripple, ɵngcc4.NgClass, BreadcrumbComponent, SearchBarComponent, ɵngcc6.ButtonDirective, TkIfPermDirective]; }, pipes: function () { return [ɵngcc4.AsyncPipe]; }, styles: [".avatar-monogram[_ngcontent-%COMP%]{margin:0;line-height:32px;background-color:#1e90ff;text-align:center;padding-top:1px;color:#fff}.avatar-monogram[_ngcontent-%COMP%], .profile-image[_ngcontent-%COMP%]{width:32px;height:32px;border-radius:50%}.http-progress-loader[_ngcontent-%COMP%]{margin-left:8px;padding-top:5px}@media screen and (max-width:1024px){.http-progress-loader[_ngcontent-%COMP%]{margin-left:0;margin-right:8px}}"], data: { animation: [
            trigger('topbarActionPanelAnimation', [
                transition(':enter', [
                    style({ opacity: 0, transform: 'scaleY(0.8)' }),
                    animate('.12s cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 1, transform: '*' })),
                ]),
                transition(':leave', [animate('.1s linear', style({ opacity: 0 }))]),
            ]),
        ] } });
HeaderComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: ConfigurationService },
    { type: StateService },
    { type: Router }
];
HeaderComponent.propDecorators = {
    searchInputViewChild: [{ type: ViewChild, args: ['searchInput',] }],
    menuButtonTitle: [{ type: Input }],
    menuButtonClick: [{ type: Output }],
    topbarItemClick: [{ type: Output }],
    openHelpPage: [{ type: Output }],
    openHelpPageEditor: [{ type: Output }],
    openFeedback: [{ type: Output }],
    openAddToLaunchpad: [{ type: Output }],
    openSupportTicket: [{ type: Output }],
    searchClick: [{ type: Output }],
    profileMode: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    activeTopbarItem: [{ type: Input }],
    disableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    search: [{ type: Input }],
    homeNavUrl: [{ type: Input }],
    homeNavTitle: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderComponent, [{
        type: Component,
        args: [{
                selector: 'tk-header',
                template: "<div class=\"layout-topbar p-shadow-4\" id=\"header\" role=\"banner\">\n  <div class=\"layout-topbar-left\">\n    <a class=\"layout-topbar-logo\" [href]=\"homeNavUrl\" [title]=\"homeNavTitle\">\n      <div class=\"logo\"></div>\n    </a>\n\n    <a *ngIf=\"fullPortalLayout\" class=\"layout-menu-button p-shadow-6\" (click)=\"onMenuButtonClick($event)\" pRipple [title]=\"menuButtonTitle\">\n      <i class=\"pi pi-chevron-right\"></i>\n    </a>\n\n    <a class=\"layout-topbar-mobile-button\" (click)=\"onTopbarMobileButtonClick($event)\" pRipple>\n      <i class=\"pi pi-ellipsis-v fs-large\"></i>\n    </a>\n  </div>\n\n  <div class=\"layout-topbar-right\" [ngClass]=\"{'layout-topbar-mobile-active': mobileTopbarActive}\">\n    <div class=\"layout-topbar-actions-left\">\n      <tk-breadcrumb\n        *ngIf=\"disableBreadcrumbs\"\n        [disableBreadcrumbs]=\"disableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        (openHelpPage)=\"onOpenHelpPage($event)\"\n        (openHelpPageEditor)=\"onOpenHelpPageEditor($event)\"\n      ></tk-breadcrumb>\n    </div>\n    <div class=\"layout-topbar-actions-right\" *ngIf=\"fullPortalLayout\">\n      <ul class=\"layout-topbar-items\">\n        <li class=\"layout-topbar-item\">\n          <a class=\"layout-topbar-action rounded-circle\" href=\"#\" title=\"Feedback\" (click)=\"onOpenFeedback($event)\">\n            <i class=\"pi pi-star-o fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Add to Favourites\"\n            (click)=\"onAddToFavourites($event)\"\n          >\n            <i class=\"pi pi-heart fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Support Ticket\"\n            (click)=\"onOpenSupportTicket($event)\"\n          >\n            <i class=\"pi pi-ticket fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item layout-search-item\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'search')\" pRipple>\n            <i class=\"pi pi-search fs-large\"></i>\n          </a>\n\n          <div class=\"layout-search-panel p-inputgroup\" [@topbarActionPanelAnimation]=\"'visible'\" *ngIf=\"search\">\n            <span class=\"p-inputgroup-addon\"><i class=\"pi pi-search\"></i></span>\n            <tk-search-bar (searchClick)=\"onSearchClick($event.event, $event.val)\"></tk-search-bar>\n            <span class=\"p-inputgroup-addon\">\n              <button\n                pButton\n                pRipple\n                type=\"button\"\n                icon=\"pi pi-times\"\n                class=\"p-button-rounded p-button-text p-button-plain\"\n                (click)=\"onSearchClick($event, false)\"\n              ></button>\n            </span>\n          </div>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel anzeigen\"\n            (click)=\"onOpenHelpPage($event)\"\n          >\n            <i class=\"pi pi-question-circle fs-large\"></i>\n          </a>\n        </li>\n        <li *ngIf=\"disableBreadcrumbs\" class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action rounded-circle\"\n            href=\"#\"\n            title=\"Hilfe f\u00FCr diesen Artikel vervalten\"\n            (click)=\"onOpenHelpPageEditor($event)\"\n          >\n            <i class=\"pi pi-pencil fs-large\"></i>\n          </a>\n        </li>\n        <li class=\"layout-topbar-item notifications\">\n          <a class=\"layout-topbar-action rounded-circle\" (click)=\"onTopbarItemClick($event, 'notifications')\" pRipple>\n            <i class=\"pi pi-bell fs-large\"></i>\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'notifications'\"\n          >\n            <li class=\"p-mb-3\">\n              <span class=\"p-px-3 fs-small\">Not implemented.</span>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <div class=\"p-d-flex p-flex-row p-ai-center\">\n                <p class=\"avatar-monogram\">MM</p>\n                <div class=\"p-d-flex p-flex-column p-ml-3\" style=\"flex-grow: 1;\">\n                  <div class=\"p-d-flex p-ai-center p-jc-between p-mb-1\">\n                    <span class=\"fs-small p-text-bold\">John Doe</span>\n                    <small>42 mins ago</small>\n                  </div>\n                  <span class=\"fs-small\">Notification example.</span>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </li>\n        <li class=\"layout-topbar-item\">\n          <a\n            class=\"layout-topbar-action p-d-flex p-dir-row p-jc-center p-ai-center p-px-2 rounded-circle\"\n            pRipple\n            (click)=\"onTopbarItemClick($event, 'profile')\"\n          >\n            <img\n              [src]=\"(userAvatar | async)?.avatarSmallImageUrl || defaultAvatarUrl\"\n              alt=\"avatar\"\n              class=\"profile-image\"\n            />\n          </a>\n\n          <ul\n            class=\"layout-topbar-action-panel p-shadow-6\"\n            [@topbarActionPanelAnimation]=\"'visible'\"\n            *ngIf=\"activeTopbarItem === 'profile'\"\n          >\n            <li class=\"layout-topbar-action-item\" *tkIfPerm=\"'PROFILE#VIEW'\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/profile', $event)\"\n                title=\"Manage your personal information and avatar\"\n              >\n                <i class=\"p-mr-2 pi pi-user\"></i>\n                <span>My Personal Info</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/settings', $event)\"\n                title=\"Manage your preferences and settings\"\n              >\n                <i class=\"p-mr-2 pi pi-cog\"></i>\n                <span>My Settings</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/change-password', $event)\"\n                title=\"Change your current password\"\n              >\n                <i class=\"p-mr-2 pi pi-key\"></i>\n                <span>Change Password</span>\n              </a>\n            </li>\n\n            <li class=\"layout-topbar-action-item\">\n              <a\n                class=\"p-d-flex p-flex-row p-ai-center\"\n                pRipple\n                href=\"#\"\n                (click)=\"navigateTo('/account/roles-and-perms', $event)\"\n                title=\"Overview of your application roles and permissions\"\n              >\n                <i class=\"p-mr-2 pi pi-unlock\"></i>\n                <span>My Roles & Permissions</span>\n              </a>\n            </li>\n            <li class=\"layout-topbar-action-item\">\n              <a class=\"p-d-flex p-flex-row p-ai-center\" pRipple href=\"#\" (click)=\"logout($event)\">\n                <i class=\"p-mr-2 pi pi-power-off\"></i>\n                <span>Logout</span>\n              </a>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n",
                animations: [
                    trigger('topbarActionPanelAnimation', [
                        transition(':enter', [
                            style({ opacity: 0, transform: 'scaleY(0.8)' }),
                            animate('.12s cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 1, transform: '*' })),
                        ]),
                        transition(':leave', [animate('.1s linear', style({ opacity: 0 }))]),
                    ]),
                ],
                styles: [".avatar-monogram{margin:0;line-height:32px;background-color:#1e90ff;text-align:center;padding-top:1px;color:#fff}.avatar-monogram,.profile-image{width:32px;height:32px;border-radius:50%}.http-progress-loader{margin-left:8px;padding-top:5px}@media screen and (max-width:1024px){.http-progress-loader{margin-left:0;margin-right:8px}}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: ConfigurationService }, { type: StateService }, { type: ɵngcc3.Router }]; }, { menuButtonClick: [{
            type: Output
        }], topbarItemClick: [{
            type: Output
        }], openHelpPage: [{
            type: Output
        }], openHelpPageEditor: [{
            type: Output
        }], openFeedback: [{
            type: Output
        }], openAddToLaunchpad: [{
            type: Output
        }], openSupportTicket: [{
            type: Output
        }], searchClick: [{
            type: Output
        }], homeNavUrl: [{
            type: Input
        }], homeNavTitle: [{
            type: Input
        }], searchInputViewChild: [{
            type: ViewChild,
            args: ['searchInput']
        }], menuButtonTitle: [{
            type: Input
        }], profileMode: [{
            type: Input
        }], isHorizontal: [{
            type: Input
        }], activeTopbarItem: [{
            type: Input
        }], disableBreadcrumbs: [{
            type: Input
        }], fullPortalLayout: [{
            type: Input
        }], search: [{
            type: Input
        }] }); })();

class MenuService {
    constructor() {
        this.menuSource = new Subject();
        this.resetSource = new Subject();
        this.menuSource$ = this.menuSource.asObservable();
        this.resetSource$ = this.resetSource.asObservable();
    }
    onMenuStateChange(key) {
        this.menuSource.next(key);
    }
    reset() {
        this.resetSource.next();
    }
}
MenuService.ɵfac = function MenuService_Factory(t) { return new (t || MenuService)(); };
MenuService.ɵprov = ɵɵdefineInjectable({ factory: function MenuService_Factory() { return new MenuService(); }, token: MenuService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MenuService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class AppMenuComponent {
    constructor() {
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
    }
    set portalMenu(items) {
        this.menuWithRoot = {
            label: 'Menu',
            icon: 'list',
            items: items
        };
    }
}
AppMenuComponent.ɵfac = function AppMenuComponent_Factory(t) { return new (t || AppMenuComponent)(); };
AppMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppMenuComponent, selectors: [["tk-menu"]], inputs: { portalMenu: "portalMenu", menuActive: "menuActive", isStatic: "isStatic", isHorizontal: "isHorizontal", isMobile: "isMobile", isDesktop: "isDesktop", isSlim: "isSlim", menuHoverActive: "menuHoverActive", mobileMenuActive: "mobileMenuActive" }, outputs: { menuActiveChange: "menuActiveChange", mobileMenuActiveChange: "mobileMenuActiveChange" }, decls: 2, vars: 10, consts: [["id", "nav", "role", "navigation", 1, "layout-menu"], ["tk-submenu", "", "root", "true", "visible", "true", 3, "item", "index", "menuActive", "mobileMenuActive", "isStatic", "isSlim", "isHorizontal", "isMobile", "isDesktop", "menuHoverActive", "menuActiveChange", "mobileMenuActiveChange"]], template: function AppMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵelementStart(1, "li", 1);
        ɵngcc0.ɵɵlistener("menuActiveChange", function AppMenuComponent_Template_li_menuActiveChange_1_listener($event) { return ctx.menuActive = $event; })("mobileMenuActiveChange", function AppMenuComponent_Template_li_mobileMenuActiveChange_1_listener($event) { return ctx.mobileMenuActive = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("item", ctx.menuWithRoot)("index", 0)("menuActive", ctx.menuActive)("mobileMenuActive", ctx.mobileMenuActive)("isStatic", ctx.isStatic)("isSlim", ctx.isSlim)("isHorizontal", ctx.isHorizontal)("isMobile", ctx.isMobile)("isDesktop", ctx.isDesktop)("menuHoverActive", ctx.menuHoverActive);
    } }, directives: function () { return [AppSubMenuComponent]; }, encapsulation: 2 });
AppMenuComponent.ctorParameters = () => [];
AppMenuComponent.propDecorators = {
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    portalMenu: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppMenuComponent, [{
        type: Component,
        args: [{
                selector: 'tk-menu',
                template: "<ul class=\"layout-menu\" id=\"nav\" role=\"navigation\">\n  <li\n    tk-submenu\n    [item]=\"menuWithRoot\"\n    [index]=\"0\"\n    root=\"true\"\n    visible=\"true\"\n    [(menuActive)]=\"menuActive\"\n    [(mobileMenuActive)]=\"mobileMenuActive\"\n    [isStatic]=\"isStatic\"\n    [isSlim]=\"isSlim\"\n    [isHorizontal]=\"isHorizontal\"\n    [isMobile]=\"isMobile\"\n    [isDesktop]=\"isDesktop\"\n    [menuHoverActive]=\"menuHoverActive\"\n  ></li>\n</ul>\n"
            }]
    }], function () { return []; }, { menuActiveChange: [{
            type: Output
        }], mobileMenuActiveChange: [{
            type: Output
        }], portalMenu: [{
            type: Input
        }], menuActive: [{
            type: Input
        }], isStatic: [{
            type: Input
        }], isHorizontal: [{
            type: Input
        }], isMobile: [{
            type: Input
        }], isDesktop: [{
            type: Input
        }], isSlim: [{
            type: Input
        }], menuHoverActive: [{
            type: Input
        }], mobileMenuActive: [{
            type: Input
        }] }); })();
class AppSubMenuComponent {
    constructor(menuService, router) {
        this.menuService = menuService;
        this.router = router;
        this.menuActiveChange = new EventEmitter();
        this.mobileMenuActiveChange = new EventEmitter();
        this.active = false;
    }
    ngOnInit() {
        this.menuSourceSubscription = this.menuService.menuSource$.subscribe(key => {
            // deactivate current active menu
            if (this.active && this.key !== key && key.indexOf(this.key) !== 0) {
                this.active = false;
            }
        });
        this.menuResetSubscription = this.menuService.resetSource$.subscribe(() => {
            this.active = false;
        });
        // TODO Ultima11: Verify if this logic works with our setup
        this.router.events.pipe(filter(event => event instanceof NavigationEnd))
            .subscribe(params => {
            if (this.isSlim) {
                this.active = false;
            }
            else {
                if (this.item.routerLink) {
                    this.updateActiveStateFromRoute();
                }
                else {
                    this.active = false;
                }
            }
        });
        if ((this.isHorizontal || this.isSlim) && this.item.routerLink) {
            this.updateActiveStateFromRoute();
        }
        this.key = this.parentKey ? this.parentKey + '-' + this.index : String(this.index);
    }
    ngOnDestroy() {
        if (this.menuSourceSubscription) {
            this.menuSourceSubscription.unsubscribe();
        }
        if (this.menuResetSubscription) {
            this.menuResetSubscription.unsubscribe();
        }
    }
    updateActiveStateFromRoute() {
        this.active = this.router.isActive(this.item.routerLink[0], !this.item.items);
    }
    itemClick(event) {
        // avoid processing disabled items
        if (this.item.disabled) {
            event.preventDefault();
            return true;
        }
        this.menuService.onMenuStateChange(this.key);
        // execute command
        if (this.item.command) {
            this.item.command({ originalEvent: event, item: this.item });
        }
        if (this.item.items) {
            this.active = !this.active;
        }
        else {
            this.active = true;
            if (this.isHorizontal || this.isSlim) {
                this.menuService.reset();
                this.menuHoverActive = false;
            }
            if (!this.isStatic) {
                this.menuActiveChange.emit(false);
            }
            this.mobileMenuActiveChange.emit(false);
        }
        // prevent hash change
        if (this.item.items || (!this.item.url && !this.item.routerLink)) {
            // TODO https://github.com/primefaces/primeng/issues/8751
            // setTimeout(() => {
            //   this.app.layoutMenuScrollerViewChild.moveBar();
            // }, 450);
            event.preventDefault();
        }
    }
    onMouseEnter() {
        if (this.root &&
            this.menuHoverActive &&
            (this.isHorizontal || this.isSlim) &&
            this.isDesktop) {
            this.menuService.onMenuStateChange(this.key);
            this.active = true;
        }
    }
}
AppSubMenuComponent.ɵfac = function AppSubMenuComponent_Factory(t) { return new (t || AppSubMenuComponent)(ɵngcc0.ɵɵdirectiveInject(MenuService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Router)); };
AppSubMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AppSubMenuComponent, selectors: [["", "tk-submenu", ""]], hostVars: 4, hostBindings: function AppSubMenuComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("layout-root-menuitem", ctx.root || ctx.active)("active-menuitem", ctx.active);
    } }, inputs: { menuHoverActive: "menuHoverActive", item: "item", root: "root", visible: "visible", index: "index", parentKey: "parentKey", menuActive: "menuActive", isStatic: "isStatic", isHorizontal: "isHorizontal", isMobile: "isMobile", isDesktop: "isDesktop", isSlim: "isSlim", mobileMenuActive: "mobileMenuActive" }, outputs: { menuActiveChange: "menuActiveChange", mobileMenuActiveChange: "mobileMenuActiveChange" }, attrs: _c6, decls: 5, vars: 4, consts: [[4, "ngIf"], ["pRipple", "", 3, "click", "keydown.enter", "mouseenter", 4, "ngIf"], ["routerLinkActive", "active-menuitem-routerlink", "pRipple", "", 3, "routerLink", "routerLinkActiveOptions", "click", "mouseenter", 4, "ngIf"], [1, "layout-menuitem-text"], ["pRipple", "", 3, "click", "keydown.enter", "mouseenter"], [1, "layout-menuitem-icon", "pi", "pi-fw", 3, "ngClass"], ["class", "p-badge p-component p-badge-no-gutter", 4, "ngIf"], ["class", "pi pi-fw pi-angle-down layout-submenu-toggler", 4, "ngIf"], [1, "p-badge", "p-component", "p-badge-no-gutter"], [1, "pi", "pi-fw", "pi-angle-down", "layout-submenu-toggler"], ["routerLinkActive", "active-menuitem-routerlink", "pRipple", "", 3, "routerLink", "routerLinkActiveOptions", "click", "mouseenter"], ["ngFor", "", 3, "ngForOf"], ["tk-submenu", "", 3, "item", "index", "parentKey"]], template: function AppSubMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵtemplate(1, AppSubMenuComponent_div_1_Template, 3, 1, "div", 0);
        ɵngcc0.ɵɵtemplate(2, AppSubMenuComponent_a_2_Template, 6, 7, "a", 1);
        ɵngcc0.ɵɵtemplate(3, AppSubMenuComponent_a_3_Template, 6, 9, "a", 2);
        ɵngcc0.ɵɵtemplate(4, AppSubMenuComponent_ul_4_Template, 2, 2, "ul", 0);
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.root);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.item.routerLink || ctx.item.items);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.item.routerLink && !ctx.item.items);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.item.items && ctx.root || ctx.item.items && ctx.active);
    } }, directives: [ɵngcc4.NgIf, ɵngcc7.Ripple, ɵngcc4.NgClass, ɵngcc3.RouterLinkWithHref, ɵngcc3.RouterLinkActive, ɵngcc4.NgForOf, AppSubMenuComponent], encapsulation: 2, data: { animation: [
            trigger('children', [
                state('void', style({
                    height: '0px',
                    padding: '0px'
                })),
                state('hiddenAnimated', style({
                    height: '0px',
                    padding: '0px'
                })),
                state('visibleAnimated', style({
                    height: '*'
                })),
                state('visible', style({
                    height: '*'
                })),
                state('hidden', style({
                    height: '0px',
                    padding: '0px'
                })),
                transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
            ])
        ] } });
AppSubMenuComponent.ctorParameters = () => [
    { type: MenuService },
    { type: Router }
];
AppSubMenuComponent.propDecorators = {
    item: [{ type: Input }],
    root: [{ type: Input }],
    visible: [{ type: Input }],
    index: [{ type: Input }],
    parentKey: [{ type: Input }],
    menuActive: [{ type: Input }],
    isStatic: [{ type: Input }],
    isHorizontal: [{ type: Input }],
    isMobile: [{ type: Input }],
    isDesktop: [{ type: Input }],
    isSlim: [{ type: Input }],
    menuHoverActive: [{ type: Input }],
    mobileMenuActive: [{ type: Input }],
    menuActiveChange: [{ type: Output }],
    mobileMenuActiveChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AppSubMenuComponent, [{
        type: Component,
        args: [{
                /* eslint-disable @angular-eslint/component-selector */
                selector: '[tk-submenu]',
                /* eslint-enable @angular-eslint/component-selector */
                template: `
    <ng-container>
        <div *ngIf="root">
          <span class="layout-menuitem-text">{{item.label}}</span>
        </div>
        <a [attr.href]="item.url" (click)="itemClick($event)" *ngIf="!item.routerLink || item.items" (keydown.enter)="itemClick($event)"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <a (click)="itemClick($event)" *ngIf="item.routerLink && !item.items"
           [routerLink]="item.routerLink" routerLinkActive="active-menuitem-routerlink" [routerLinkActiveOptions]="{exact: true}"
           [attr.target]="item.target" [attr.tabindex]="0" (mouseenter)="onMouseEnter()" pRipple>
          <i [ngClass]="'pi-' + item.icon" class="layout-menuitem-icon pi pi-fw"></i>
          <span class="layout-menuitem-text">{{item.label}}</span>
          <span class="p-badge p-component p-badge-no-gutter" *ngIf="item.badge && !root">{{item.badge}}</span>
          <i class="pi pi-fw pi-angle-down layout-submenu-toggler" *ngIf="item.items"></i>
        </a>
        <ul *ngIf="(item.items && root) || (item.items && active)" [@children]="root ? 'visible' : active ? 'visibleAnimated' : 'hiddenAnimated'">
          <ng-template ngFor let-child let-i="index" [ngForOf]="item.items">
            <li tk-submenu [item]="child" [index]="i" [parentKey]="key"></li>
          </ng-template>
        </ul>
    </ng-container>
  `,
                host: {
                    '[class.layout-root-menuitem]': 'root || active',
                    '[class.active-menuitem]': '(active)'
                },
                animations: [
                    trigger('children', [
                        state('void', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('hiddenAnimated', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            height: '*'
                        })),
                        state('hidden', style({
                            height: '0px',
                            padding: '0px'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('void => visibleAnimated, visibleAnimated => void', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ]
            }]
    }], function () { return [{ type: MenuService }, { type: ɵngcc3.Router }]; }, { menuActiveChange: [{
            type: Output
        }], mobileMenuActiveChange: [{
            type: Output
        }], menuHoverActive: [{
            type: Input
        }], item: [{
            type: Input
        }], root: [{
            type: Input
        }], visible: [{
            type: Input
        }], index: [{
            type: Input
        }], parentKey: [{
            type: Input
        }], menuActive: [{
            type: Input
        }], isStatic: [{
            type: Input
        }], isHorizontal: [{
            type: Input
        }], isMobile: [{
            type: Input
        }], isDesktop: [{
            type: Input
        }], isSlim: [{
            type: Input
        }], mobileMenuActive: [{
            type: Input
        }] }); })();

class PortalPageComponent {
    constructor(injectorObj) {
        this.injectorObj = injectorObj;
        this.collapsed = false;
        this.authService = this.injectorObj.get(AUTH_SERVICE);
    }
    ngOnInit() { }
    doSomething() {
        alert('Hey it worked!');
    }
    hasAccess() {
        return this.permission
            ? this.authService.hasPermission(this.permission)
            : true;
    }
    collapse() {
        this.collapsible2.nativeElement.classList.add('hidden');
        this.collapsed = true;
    }
    expand() {
        this.collapsible2.nativeElement.classList.remove('hidden');
        this.collapsed = false;
    }
}
PortalPageComponent.ɵfac = function PortalPageComponent_Factory(t) { return new (t || PortalPageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
PortalPageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PortalPageComponent, selectors: [["tk-portal-page"]], contentQueries: function PortalPageComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CollapsibleDirective, 1, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.collapsible2 = _t.first);
    } }, inputs: { header: "header", permission: "permission", helpArticleId: "helpArticleId", leftToolbar: "leftToolbar", rightToolbar: "rightToolbar" }, ngContentSelectors: _c9, decls: 8, vars: 5, consts: [["role", "main"], [1, "p-col-12", "content-wrapper"], [1, "card", "card-w-title", "no-margin", "pt-0", 3, "ngClass"], [4, "ngIf", "ngIfElse"], ["pageToolbarRight", ""], ["noAccess", ""], [3, "leftToolbar", "rightToolbar"], [1, "page-content"], [4, "ngTemplateOutlet"], ["title", "Ausblenden", "class", "collapse-toggle", "icon", "angle-up", 3, "click", 4, "ngIf"], ["title", "Ausblenden", "icon", "angle-up", 1, "collapse-toggle", 3, "click"], ["tooltipEvent", "hover", "hideDelay", "500", 3, "pTooltip"]], template: function PortalPageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, PortalPageComponent_ng_container_3_Template, 4, 2, "ng-container", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, PortalPageComponent_ng_template_4_Template, 2, 2, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(6, PortalPageComponent_ng_template_6_Template, 6, 1, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r3 = ɵngcc0.ɵɵreference(7);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c8, ctx.collapsed));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasAccess())("ngIfElse", _r3);
    } }, directives: function () { return [ɵngcc4.NgClass, ɵngcc4.NgIf, PanelHeaderComponent, ɵngcc4.NgTemplateOutlet, ToolbarItemComponent, ɵngcc13.Tooltip]; }, styles: [".collapsed .collapse-toggle i{transform:rotate(180deg)}[_nghost-%COMP%]     child.collapsible{transition:all .4s ease;background-color:initial;transform:scale(1);max-height:1000px;height:auto}[_nghost-%COMP%]     child.collapsible.hidden{max-height:0;opacity:0;background-color:#cecece;transform:scale3d(.5,.5,.5);margin:0}@media only screen and (max-width:430px){.card.card-w-title.no-margin.pt-0[_ngcontent-%COMP%]{padding-left:.25em;padding-right:.25em}}"] });
PortalPageComponent.ctorParameters = () => [
    { type: Injector }
];
PortalPageComponent.propDecorators = {
    header: [{ type: Input }],
    permission: [{ type: Input }],
    helpArticleId: [{ type: Input }],
    leftToolbar: [{ type: Input }],
    rightToolbar: [{ type: Input }],
    collapsible2: [{ type: ContentChild, args: [CollapsibleDirective, { read: ElementRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalPageComponent, [{
        type: Component,
        args: [{
                selector: 'tk-portal-page',
                template: "<div role=\"main\">\n  <div class=\"p-col-12 content-wrapper\">\n    <!--criteria-->\n    <div\n      class=\"card card-w-title no-margin pt-0\"\n      [ngClass]=\"{ collapsed: collapsed }\"\n    >\n      <ng-container *ngIf=\"hasAccess(); else noAccess\">\n        <tk-panel-header\n          [leftToolbar]=\"leftToolbar\"\n          [rightToolbar]=\"pageToolbarRight\"\n        ></tk-panel-header>\n        <div class=\"page-content\">\n          <ng-content></ng-content>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n\n<ng-template #noAccess>\n  <h3>Unauthorized</h3>\n  <p>\n    Sorry, you do not have the permission required to view this page.\n    <span\n      pTooltip=\"Missing permission key: '{{ permission }}''\"\n      tooltipEvent=\"hover\"\n      hideDelay=\"500\"\n      >More info</span\n    >\n  </p>\n</ng-template>\n",
                styles: ["::ng-deep .collapsed .collapse-toggle i{transform:rotate(180deg)}:host ::ng-deep child.collapsible{transition:all .4s ease;background-color:initial;transform:scale(1);max-height:1000px;height:auto}:host ::ng-deep child.collapsible.hidden{max-height:0;opacity:0;background-color:#cecece;transform:scale3d(.5,.5,.5);margin:0}@media only screen and (max-width:430px){.card.card-w-title.no-margin.pt-0{padding-left:.25em;padding-right:.25em}}"]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }]; }, { header: [{
            type: Input
        }], permission: [{
            type: Input
        }], helpArticleId: [{
            type: Input
        }], leftToolbar: [{
            type: Input
        }], rightToolbar: [{
            type: Input
        }], collapsible2: [{
            type: ContentChild,
            args: [CollapsibleDirective, { read: ElementRef }]
        }] }); })();

class SearchTemplateAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.baseUrl = './portal-api/v1/searchTemplates';
        this.httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
                Accept: 'application/json'
            })
        };
    }
    getSearchTemplatesLegacy(user, application, page, includeGlobal = true) {
        return this.httpClient.post(`${this.baseUrl}/search/criteria`, {
            application,
            page,
            user,
            includeGlobal
        }, this.httpOptions);
    }
    getTemplateById(id) {
        return this.httpClient.get(`${this.baseUrl}/${id}`, this.httpOptions);
    }
    createNewTemplate(template) {
        return this.httpClient.post(`${this.baseUrl}`, template, this.httpOptions);
    }
    updateTemplate(id, template) {
        return this.httpClient.put(`${this.baseUrl}/${id}`, template, this.httpOptions);
    }
    deleteTemplate(id) {
        return this.httpClient.delete(`${this.baseUrl}/${id}`);
    }
}
SearchTemplateAPIService.ɵfac = function SearchTemplateAPIService_Factory(t) { return new (t || SearchTemplateAPIService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
SearchTemplateAPIService.ɵprov = ɵɵdefineInjectable({ factory: function SearchTemplateAPIService_Factory() { return new SearchTemplateAPIService(ɵɵinject(HttpClient)); }, token: SearchTemplateAPIService, providedIn: "root" });
SearchTemplateAPIService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchTemplateAPIService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

const baseUrl = './ahm-api/internal/applications';
class HelpPageAPIService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        };
    }
    getHelpDataItem(appId, helpItemId, type = 'PAGE') {
        return this.httpClient
            .get(`${baseUrl}/${appId}/helpItems`, {
            params: {
                helpItemId
            }
        })
            .pipe(map(helpItems => helpItems[0]));
    }
    getHelpDataItemLegacy(appId, context, type = 'PAGE') {
        console.log(`About to go to ${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`);
        return this.httpClient.post(`${baseUrl}/helpdata/${appId}/${encodeURIComponent(context)}`, `"${type}"`, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            }
        });
    }
    saveHelpPage(appId, helpItem) {
        if (helpItem.id) {
            return this.httpClient.patch(`${baseUrl}/${appId}/helpItems/${helpItem.id}`, helpItem, {
                observe: 'response'
            });
        }
        else {
            return this.httpClient.post(`${baseUrl}/${appId}/helpItems`, helpItem, {
                observe: 'response'
            });
        }
    }
    saveHelpPageLegacy(helpItem) {
        return this.httpClient.post(`${baseUrl}/helpdata`, helpItem, {
            headers: {
                'Content-Type': 'application/v1+json',
                Accept: 'application/v1+json'
            },
            observe: 'response'
        });
    }
}
HelpPageAPIService.ɵfac = function HelpPageAPIService_Factory(t) { return new (t || HelpPageAPIService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
HelpPageAPIService.ɵprov = ɵɵdefineInjectable({ factory: function HelpPageAPIService_Factory() { return new HelpPageAPIService(ɵɵinject(HttpClient)); }, token: HelpPageAPIService, providedIn: "root" });
HelpPageAPIService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HelpPageAPIService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

function isTkitPage(object) {
    return 'helpArticleId' in object;
}

const defaultThemeServerUrl = 'http://portal-theme-management:8080';
class ThemeService {
    constructor(configservice) {
        this.configservice = configservice;
        this.themeServerUrl =
            this.configservice.getProperty('TKIT_PORTAL_THEME_SERVER_URL') ||
                defaultThemeServerUrl;
    }
    getThemeHref(theme) {
        return `${this.themeServerUrl}/themes/${theme}/${theme}.min.css`;
    }
}
ThemeService.ɵfac = function ThemeService_Factory(t) { return new (t || ThemeService)(ɵngcc0.ɵɵinject(ConfigurationService)); };
ThemeService.ɵprov = ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(ɵɵinject(ConfigurationService)); }, token: ThemeService, providedIn: "root" });
ThemeService.ctorParameters = () => [
    { type: ConfigurationService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ThemeService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ConfigurationService }]; }, null); })();

class MenuApiService {
    constructor(http, messageService) {
        this.http = http;
        this.messageService = messageService;
        this.menuUrl = './portal-api/legacy/menustructure'; // URL to web api
        this.httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
        };
    }
    getMenuItems(portalId) {
        return this.http
            .get(`${this.menuUrl}/${portalId}`, withCache())
            .pipe(catchError(this.handleError('getMenuItems', [])));
    }
    /**
     * Handle Http operation that failed.
     * Let the app continue.
     * @param operation - name of the operation that failed
     * @param result - optional value to return as the observable result
     */
    handleError(operation = 'operation', result) {
        return (error) => {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            this.log(`${operation} failed: ${error.message}, will return ${JSON.stringify(result)}`);
            // Let the app keep running by returning an empty result.
            return of(result);
        };
    }
    /** Log a HeroService message with the MessageService */
    log(message) {
        console.log(message);
    }
}
MenuApiService.ɵfac = function MenuApiService_Factory(t) { return new (t || MenuApiService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(ɵngcc11.MessageService)); };
MenuApiService.ɵprov = ɵɵdefineInjectable({ factory: function MenuApiService_Factory() { return new MenuApiService(ɵɵinject(HttpClient), ɵɵinject(MessageService)); }, token: MenuApiService, providedIn: "root" });
MenuApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: MessageService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MenuApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: ɵngcc11.MessageService }]; }, null); })();

class FeedbackApiService {
    constructor(http) {
        this.http = http;
        this.url = './portal-api/v1/feedback/send';
    }
    sendFeedback(feedback) {
        return this.http.post(this.url, feedback);
    }
}
FeedbackApiService.ɵfac = function FeedbackApiService_Factory(t) { return new (t || FeedbackApiService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
FeedbackApiService.ɵprov = ɵɵdefineInjectable({ factory: function FeedbackApiService_Factory() { return new FeedbackApiService(ɵɵinject(HttpClient)); }, token: FeedbackApiService, providedIn: "root" });
FeedbackApiService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeedbackApiService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

class SupportTicketApiService {
    constructor(http) {
        this.http = http;
        this.baseUrl = './portal-api/v1/supportTicket/send';
    }
    createSupportTicket(ticket, appId) {
        const request = {
            processId: ticket.title,
            processStep: ticket.description,
            source: appId,
            sourceDeepLink: window.location.href
        };
        return this.http.post(this.baseUrl, request);
    }
}
SupportTicketApiService.ɵfac = function SupportTicketApiService_Factory(t) { return new (t || SupportTicketApiService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
SupportTicketApiService.ɵprov = ɵɵdefineInjectable({ factory: function SupportTicketApiService_Factory() { return new SupportTicketApiService(ɵɵinject(HttpClient)); }, token: SupportTicketApiService, providedIn: "root" });
SupportTicketApiService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SupportTicketApiService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

var MenuOrientation;
(function (MenuOrientation) {
    MenuOrientation[MenuOrientation["STATIC"] = 0] = "STATIC";
    MenuOrientation[MenuOrientation["OVERLAY"] = 1] = "OVERLAY";
    MenuOrientation[MenuOrientation["SLIM"] = 2] = "SLIM";
    MenuOrientation[MenuOrientation["HORIZONTAL"] = 3] = "HORIZONTAL";
})(MenuOrientation || (MenuOrientation = {}));
const FALLBACK_THEME_URL = './portal-lib/assets/css/fallback-theme/fallback.css';
const DEFAULT_BASE_URL = 'https://1000kit.atlassian.net/wiki/spaces/1000KIT/overview';
class PortalViewportComponent {
    constructor(renderer2, zone, router, route, helpDataService, messageService, dialogService, breakpointObserver, translate, themeService, menuService, menuApiService, configService, feedbackApiService, supportTicketApiService, primeNgConfig, auth) {
        this.renderer2 = renderer2;
        this.zone = zone;
        this.router = router;
        this.route = route;
        this.helpDataService = helpDataService;
        this.messageService = messageService;
        this.dialogService = dialogService;
        this.breakpointObserver = breakpointObserver;
        this.translate = translate;
        this.themeService = themeService;
        this.menuService = menuService;
        this.menuApiService = menuApiService;
        this.configService = configService;
        this.feedbackApiService = feedbackApiService;
        this.supportTicketApiService = supportTicketApiService;
        this.primeNgConfig = primeNgConfig;
        this.auth = auth;
        this.showProfileInSidebar = true;
        this.enableBreadcrumbs = false;
        this.fullPortalLayout = true;
        // TKIT
        this.helpPageEditorDisplayed = false;
        this.addToFavouritesDisplayed = false;
        this.supportTicketDisplayed = false;
        this.feedbackData = { comment: '', rating: 0, anonymous: false };
        this.feedbackVisible = false;
        this.feedbackSubmitDisabled = false;
        this.portalName = 'PORTAL';
        // PRIMENG STUFF
        this.layoutMode = MenuOrientation.STATIC;
        // TODO Ultima11: dark menu
        this.darkMenu = false;
        this.profileMode = 'top';
        this.searchClick = false;
        this.search = false;
        this.preloader = true;
        this.portalHomeMenuItem = { url: '/', label: 'Home' };
    }
    get menuButtonTitle() {
        return (this.isDesktop() && this.menuActive || this.isMobile() && this.mobileMenuActive) ? this.hideMenuButtonTitle : this.showMenuButtonTitle;
    }
    applyPadding() {
        if (this.isBodyCompact) {
            this.addClass(document.body, 'compact');
        }
        else {
            this.removeClass(document.body, 'compact');
        }
    }
    setSidebarColorTheme() {
        if (this.sideBarColorTheme === 'DARK') {
            this.darkMenu = true;
        }
        else if (this.sideBarColorTheme === 'LIGHT') {
            this.darkMenu = false;
        }
    }
    ngOnInit() {
        var _a;
        this.primeNgConfig.ripple = true;
        this.initError = this.configService.error;
        if (this.initError) {
            this.preloader = false;
            return;
        }
        this.mainPortal = this.configService.getPortalData();
        if (this.auth.currentUser().accountSettings.layoutAndThemeSettings) {
            this.isBodyCompact = (_a = this.auth.currentUser().accountSettings.layoutAndThemeSettings.compactView) !== null && _a !== void 0 ? _a : false;
            this.applyPadding();
            // this.sideBarColorTheme = this.auth.currentUser().accountSettings.layoutAndThemeSettings.menuTheme ?? 'LIGHT'
            if (this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode) {
                this.layoutMode =
                    MenuOrientation[this.auth.currentUser().accountSettings.layoutAndThemeSettings.sidebarViewMode];
            }
            else {
                this.layoutMode = MenuOrientation['STATIC'];
            }
        }
        this.menuActive = this.isStatic() && !this.isMobile() && this.fullPortalLayout;
        this.validateRequiredInputs();
        this.setSidebarColorTheme();
        this.setCustomTheme();
        if (this.fullPortalLayout) {
            this.loadMenuItems();
        }
        this.router.events.subscribe((event) => {
            // console.log(`nav event ${event.constructor.name}`);
            if (event instanceof NavigationStart) {
                // Show loading indicator
            }
            if (event instanceof ActivationEnd) {
                // this.helpArticleId = event.snapshot.pathFromRoot
                //   .map(i => (i.routeConfig ? i.routeConfig.path : ''))
                //   .join('/');
                // console.log(`aftger event ${this.helpArticleId}`);
            }
            if (event instanceof NavigationEnd && this.fullPortalLayout) {
                // Hide loading indicator
                if (this.currentComponent) {
                    let helpPageIdentifier;
                    if (isTkitPage(this.currentComponent)) {
                        helpPageIdentifier = this.currentComponent.helpArticleId;
                    }
                    else {
                        helpPageIdentifier = event.url || this.currentComponent.constructor.name;
                        console.log(`Page does not have helpItemId, using router path ${helpPageIdentifier}`);
                    }
                    this.helpArticleId = helpPageIdentifier;
                    this.helpDataItem = {
                        helpItemId: helpPageIdentifier,
                        appId: this.appName,
                        baseUrl: DEFAULT_BASE_URL,
                        resourceUrl: '',
                    };
                    this.loadHelpArticle();
                }
            }
            if (event instanceof NavigationError) {
                // Hide loading indicator
                // Present error to user
                this.messageService.add({
                    severity: 'error',
                    summary: 'Navigation error',
                    detail: `Route ${event.url} not recognized`,
                });
            }
            // console.log(`navigate event ${event}`);
            this.setSidebarColorTheme();
        });
        this.translate.get(['GENERAL.SHOW_MENU', 'GENERAL.HIDE_MENU']).subscribe(text => {
            this.hideMenuButtonTitle = text['GENERAL.HIDE_MENU'];
            this.showMenuButtonTitle = text['GENERAL.SHOW_MENU'];
        });
    }
    ngAfterViewInit() {
        this.documentClickListener = this.renderer2.listen('body', 'click', () => {
            if (!this.topbarItemClick) {
                this.activeTopbarItem = null;
            }
            if (!this.menuClick && (this.isHorizontal() || this.isSlim())) {
                this.menuService.reset();
            }
            if (!this.menuClick) {
                if (this.mobileMenuActive) {
                    this.mobileMenuActive = false;
                }
                if (this.isOverlay()) {
                    this.menuActive = false;
                }
                this.menuHoverActive = false;
                this.unblockBodyScroll();
            }
            if (!this.searchClick) {
                this.search = false;
            }
            if (this.inlineMenuActive && !this.inlineMenuClick) {
                this.inlineMenuActive = false;
            }
            this.inlineMenuClick = false;
            this.searchClick = false;
            this.topbarItemClick = false;
            this.menuClick = false;
        });
    }
    loadMenuItems() {
        const portalId = this.configService.getProperty('TKIT_PORTAL_ID');
        const stripForbiddenStr = this.configService.getProperty('TKIT_PORTAL_DISABLE_MENU_PERMISSIONS');
        const stripForbidden = stripForbiddenStr === 'true';
        this.configService.lang$.subscribe(data => (this.lang = data)).unsubscribe();
        if (!portalId) {
            this.portalMenuItems = [{ label: 'Failed to load menu', icon: 'dashboard', routerLink: ['/'] }];
        }
        else if (this.fullPortalLayout) {
            this.menuApiService.getMenuItems(portalId).subscribe(data => {
                let serverMenuItems = [];
                const mainMenuItem = data.find(item => item.key === 'PORTAL_MAIN_MENU');
                this.portalHomeMenuItem = this.toPrimeNGMenuItem(data.find(item => item.key === 'PORTAL_MENU_HOME'));
                if (!this.portalHomeMenuItem) {
                    this.portalHomeMenuItem = { url: '/', label: 'Home' };
                }
                if (mainMenuItem) {
                    serverMenuItems = mainMenuItem.children
                        .filter(item => (!stripForbidden || this.auth.hasPermission(`${item.permissionObject}#VIEW`)) && !item.disabled)
                        .sort((a, b) => a.position - b.position)
                        .map(item => this.toPrimeNGMenuItem(item));
                }
                this.portalMenuItems = [
                    // { label: 'Portal Home', icon: 'dashboard', routerLink: ['/'] },
                    ...serverMenuItems,
                ];
            });
        }
    }
    toPrimeNGMenuItem(item, level = 1) {
        if (!item) {
            return undefined;
        }
        let isAbsoluteLink = item.url && item.url.match(/^(http|https)/g) !== null;
        const currentHost = document.getElementsByTagName('base')[0].href;
        let routerLink = undefined;
        const label = item.i18n[this.lang] || item.name;
        if (this.appName === item.applicationId) {
            // it is a local link, set routerlink
            if (isAbsoluteLink && item.url.includes(currentHost)) {
                routerLink = [item.url.substr(currentHost.length - 1)];
                isAbsoluteLink = false;
            }
            else {
                const path = currentHost.substring(window.location.origin.length);
                if (path.length >= 1 && item.url.startsWith(path)) {
                    // its a link within same  path
                    routerLink = [item.url.substr(path.length - 1)];
                    isAbsoluteLink = false;
                }
            }
        }
        let badgeIcon = level === 1 ? 'menu' : 'subject';
        if (item.badge !== '' && item.badge) {
            badgeIcon = item.badge;
        }
        return {
            label,
            // badge: '🔗',
            icon: badgeIcon,
            command: e => {
                e.originalEvent.preventDefault();
                if (item.children.length === 0) {
                    item.portalExit
                        ? window.open(item.url, '_blank')
                        : routerLink
                            ? this.router.navigate(routerLink)
                            : window.location.assign(item.url);
                }
            },
            url: item.url,
            routerLinkActiveOptions: [{ exact: false }],
            items: item.children.length > 0
                ? item.children
                    .filter(child => !child.disabled)
                    .sort((a, b) => a.position - b.position)
                    .map(child => this.toPrimeNGMenuItem(child, level + 1))
                : undefined,
        };
    }
    validateRequiredInputs() {
        if (!this.appName) {
            throw new Error(`You must specify [appName] attribute on <tk-portal-viewport> component.`);
        }
    }
    loadHelpArticle() {
        this.helpDataService.getHelpDataItem(this.appName, this.helpArticleId).subscribe(data => {
            if (data) {
                this.helpDataItem = data;
            }
        }, error => console.log('Failed to load help article'));
    }
    onHelpArticleEditorClosed(changed) {
        if (changed) {
            this.helpDataService.saveHelpPage(this.appName, this.helpDataItem).subscribe(res => {
                console.log(`Help item saved: ${res.status}`);
                this.helpPageEditorDisplayed = false;
                this.messageService.add({
                    severity: 'info',
                    summary: 'Help Item definition updated',
                });
                this.loadHelpArticle();
            }, error => {
                console.log(`Could not save help item`);
                this.messageService.add({
                    severity: 'error',
                    summary: 'Help Item definition update failed',
                    detail: `Server error: ${error.status}`,
                });
            });
        }
        else {
            this.helpPageEditorDisplayed = false;
        }
    }
    onAddToLaunchpadClosed(event) {
        this.addToFavouritesDisplayed = false;
    }
    openHelpPage(event) {
        if (this.helpDataItem.id) {
            const url = this.helpDataItem.baseUrl
                ? `${this.helpDataItem.baseUrl}/${this.helpDataItem.resourceUrl}`
                : this.helpDataItem.resourceUrl;
            console.log(`navigate to help page: ${url}`);
            const win = window.open(url, '_blank');
            win.focus();
        }
        else {
            this.dialogService.open(NoHelpInfoComponent, {
                header: 'No help item defined for this page',
                width: '400px',
                data: {
                    pageItem: this.helpArticleId,
                },
            });
        }
        event.preventDefault();
    }
    openHelpPageEditor(event) {
        this.helpPageEditorDisplayed = true;
        event.preventDefault();
    }
    openFeedback(event) {
        if (this.breakpointObserver.isMatched('(max-width: 1024px)')) {
            this.feedbackVisible = true;
        }
        else {
            this.feedbackPanel.toggle(event);
        }
        event.preventDefault();
    }
    openAddToLaunchpad(event) {
        this.addToFavouritesDisplayed = true;
        event.preventDefault();
    }
    openSupportTicket(event) {
        this.supportTicketDisplayed = true;
        event.preventDefault();
    }
    onSubmitFeedback(feedback) {
        this.feedbackSubmitDisabled = true;
        const feedbackDTO = {
            rating: feedback.rating,
            comment: feedback.comment,
            appId: this.appName,
            userId: feedback.anonymous ? 'anonymous' : this.auth.currentUser().userId,
        };
        this.feedbackApiService.sendFeedback(feedbackDTO).subscribe(() => {
            this.closeFeedback();
            this.messageService.add({
                severity: 'success',
                summary: 'Feedback successfully sent',
            });
        }, () => {
            this.closeFeedback();
            this.messageService.add({
                severity: 'error',
                summary: 'Sending feedback failed',
                detail: 'Please try again later',
            });
        });
    }
    closeFeedback() {
        this.feedbackSubmitDisabled = false;
        this.feedbackVisible = false;
        this.feedbackPanel.hide();
    }
    onSubmitTicket(ticket) {
        this.supportTicketApiService.createSupportTicket(ticket, this.appName).subscribe(() => {
            this.messageService.add({
                severity: 'success',
                summary: 'Success!',
                detail: 'Ticket successfully submitted',
            });
        }, () => this.messageService.add({
            severity: 'error',
            summary: 'Error!',
            detail: 'Error occured while submitting a ticket',
        }));
    }
    clearFeedback() {
        this.feedbackData = { comment: '', rating: 0, anonymous: false };
    }
    addClass(element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }
    removeClass(element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    onMenuButtonClick(event) {
        this.menuActive = !this.menuActive;
        this.menuClick = true;
        if (!this.isDesktop()) {
            this.mobileMenuActive = !this.mobileMenuActive;
            if (this.mobileMenuActive) {
                this.blockBodyScroll();
            }
            else {
                this.unblockBodyScroll();
            }
        }
        event.preventDefault();
    }
    onMenuClick($event) {
        this.menuClick = true;
        if (this.inlineMenuActive && !this.inlineMenuClick) {
            this.inlineMenuActive = false;
        }
    }
    onInlineMenuClick(event) {
        this.inlineMenuActive = !this.inlineMenuActive;
        this.inlineMenuClick = true;
    }
    onTopbarMobileButtonClick(event) {
        this.mobileTopbarActive = !this.mobileTopbarActive;
        event.preventDefault();
    }
    onTopbarItemClick(event, item) {
        this.topbarItemClick = true;
        if (this.activeTopbarItem === item) {
            this.activeTopbarItem = null;
        }
        else {
            this.activeTopbarItem = item;
        }
        if (item === 'search') {
            this.search = !this.search;
            this.searchClick = !this.searchClick;
        }
        event.preventDefault();
    }
    onSearchClick(event, val) {
        this.searchClick = val;
        this.search = val;
        event.preventDefault();
    }
    isDesktop() {
        return window.innerWidth > 991;
    }
    isMobile() {
        return window.innerWidth <= 991;
    }
    isStatic() {
        return this.layoutMode === MenuOrientation.STATIC;
    }
    isOverlay() {
        return this.layoutMode === MenuOrientation.OVERLAY;
    }
    isHorizontal() {
        return this.layoutMode === MenuOrientation.HORIZONTAL;
    }
    isSlim() {
        return this.layoutMode === MenuOrientation.SLIM;
    }
    changeToStaticMenu() {
        this.layoutMode = MenuOrientation.STATIC;
    }
    changeToOverlayMenu() {
        this.layoutMode = MenuOrientation.OVERLAY;
    }
    changeToHorizontalMenu() {
        this.layoutMode = MenuOrientation.HORIZONTAL;
    }
    changeToSlimMenu() {
        this.layoutMode = MenuOrientation.SLIM;
    }
    blockBodyScroll() {
        if (document.body.classList) {
            document.body.classList.add('blocked-scroll');
        }
        else {
            document.body.className += ' blocked-scroll';
        }
    }
    unblockBodyScroll() {
        if (document.body.classList) {
            document.body.classList.remove('blocked-scroll');
        }
        else {
            document.body.className = document.body.className.replace(new RegExp('(^|\\b)' +
                'blocked-scroll'.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    setCustomTheme() {
        const disablePortalThemeMgmt = this.configService.getProperty(CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT) === 'true';
        if (disablePortalThemeMgmt) {
            console.log(`Portal theme mgmt is disabled. To enable it, remove env var: ${CONFIG_KEY_TKIT_PORTAL_DISABLE_THEME_MANAGEMENT}`);
            this.preloader = false;
            return;
        }
        console.log(`Setting theme dynamically`);
        let customTheme = this.configService.getPortalData() && this.configService.getPortalData().themeName;
        if (!customTheme) {
            const themeFromEnv = this.configService.getProperty('TKIT_PORTAL_DEFAULT_THEME');
            if (!themeFromEnv) {
                console.log(`Custom theme not defined, or portal data not available, setting default theme CG`);
                customTheme = 'cg';
            }
            else {
                console.log(`Custom theme not defined, or portal data not available, setting theme from 'TKIT_PORTAL_DEFAULT_THEME' var: ${themeFromEnv} `);
                customTheme = themeFromEnv;
            }
        }
        if (document.getElementById('theme-css')) {
            const themeLinkToRemove = document.getElementById('theme-css');
            themeLinkToRemove.remove();
        }
        const themeLink = document.createElement('link');
        themeLink.setAttribute('id', 'theme-css');
        themeLink.setAttribute('rel', 'stylesheet');
        themeLink.setAttribute('type', 'text/css');
        themeLink.onload = () => {
            console.log('theme load done');
            this.preloader = false;
        };
        themeLink.onerror = () => {
            console.log(`Failed to load theme assets for '${customTheme}'`);
            themeLink.setAttribute('href', FALLBACK_THEME_URL);
            this.preloader = false;
        };
        themeLink.setAttribute('href', this.themeService.getThemeHref(customTheme));
        document.getElementsByTagName('head')[0].appendChild(themeLink);
    }
}
PortalViewportComponent.ɵfac = function PortalViewportComponent_Factory(t) { return new (t || PortalViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(HelpPageAPIService), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.MessageService), ɵngcc0.ɵɵdirectiveInject(ɵngcc14.DialogService), ɵngcc0.ɵɵdirectiveInject(ɵngcc15.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc16.TranslateService), ɵngcc0.ɵɵdirectiveInject(ThemeService), ɵngcc0.ɵɵdirectiveInject(MenuService), ɵngcc0.ɵɵdirectiveInject(MenuApiService), ɵngcc0.ɵɵdirectiveInject(ConfigurationService), ɵngcc0.ɵɵdirectiveInject(FeedbackApiService), ɵngcc0.ɵɵdirectiveInject(SupportTicketApiService), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.PrimeNGConfig), ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE)); };
PortalViewportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PortalViewportComponent, selectors: [["tk-portal-viewport"]], viewQuery: function PortalViewportComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, 1);
        ɵngcc0.ɵɵviewQuery(_c11, 1);
        ɵngcc0.ɵɵviewQuery(_c12, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.layoutContainerViewChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.layoutMenuScrollerViewChild = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.feedbackPanel = _t.first);
    } }, inputs: { showProfileInSidebar: "showProfileInSidebar", enableBreadcrumbs: "enableBreadcrumbs", fullPortalLayout: "fullPortalLayout", portalName: "portalName", appName: "appName" }, decls: 21, vars: 30, consts: [["class", "loading-block", 4, "ngIf"], ["class", "exception-body error-page", 4, "ngIf"], [1, "layout-wrapper", 3, "hidden", "ngClass"], [3, "menuButtonTitle", "activeTopbarItem", "isHorizontal", "profileMode", "disableBreadcrumbs", "homeNavTitle", "homeNavUrl", "fullPortalLayout", "search", "searchClick", "menuButtonClick", "topbarItemClick", "openHelpPageEditor", "openHelpPage", "openFeedback", "openSupportTicket", "openAddToLaunchpad"], [3, "onHide"], ["feedbackPanel", ""], ["pTemplate", ""], ["header", "Leave Feedback", 3, "visible", "visibleChange", "onHide"], [3, "feedbackData", "submitDisabled", "feedbackDataChange", "feedbackSubmit"], [1, "menu-wrapper", 3, "click"], ["class", "layout-menu-container", 4, "ngIf"], [1, "layout-main"], [3, "fullPortalLayout", "disableBreadcrumbs", "openHelpPageEditor", "openHelpPage", 4, "ngIf"], [1, "layout-content"], [3, "activate"], [3, "homePortal"], [1, "layout-mask", "modal-in"], [3, "display", "helpItem", "closed", 4, "ngIf"], [3, "display", "appId", "closed", 4, "ngIf"], [3, "display", "displayChange", "submitTicket"], [1, "loading-block"], [1, "p-d-flex", "p-mb-3", "p-p-1", 2, "position", "fixed", "z-index", "100", "width", "100%", "background-color", "#fff", "height", "75px", "box-shadow", "0 2px 5px 0 rgb(0 0 0 / 26%)", "-webkit-box-shadow", "0 2px 5px 0 rgb(0 0 0 / 26%)"], ["width", "8rem", "height", "60px", "styleClass", "p-mr-2"], [2, "flex", "1", "height", "100%"], ["width", "100%", "height", "60px"], [2, "overflow", "auto", "position", "fixed", "margin-left", "0px", "width", "250px", "z-index", "99", "top", "75px", "height", "100%", "background-color", "#fff", "box-shadow", "3px 0 6px rgb(0 0 0 / 30%)", "-webkit-box-shadow", "3px 0 6px rgb(0 0 0 / 30%)", "-moz-box-shadow", "3px 0 6px rgba(0,0,0,.3)", "padding", "1rem"], [1, "custom-skeleton", "p-p-3", "p-mt-4"], [1, "p-mb-3", "p-ml-5"], ["shape", "circle", "size", "3rem", "styleClass", "p-mr-2"], ["width", "80%", "height", "1rem", "styleClass", "p-mb-1 p-ml-2"], [1, "p-mt-4"], ["width", "100%", "height", "1.5rem", "styleClass", "p-mb-2", 4, "ngFor", "ngForOf"], ["width", "100%", "height", "1.5rem", "styleClass", "p-mb-2"], [1, "exception-body", "error-page"], [1, "exception-type"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "none", "viewBox", "0 0 48 48", "stroke", "currentColor"], ["stroke-linecap", "round", "stroke-linejoin", "round", "stroke-width", "2", "d", "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"], [1, "card", "exception-panel"], [1, "pi", "pi-exclamation-circle"], [1, "exception-detail"], ["label", "Homepage", 1, "p-button-help", 3, "routerLink"], [1, "layout-menu-container"], [3, "inlineMenuActive", "inlineMenuClick", 4, "ngIf"], [3, "menuActive", "mobileMenuActive", "isStatic", "isSlim", "isHorizontal", "isMobile", "isDesktop", "menuHoverActive", "portalMenu", "menuActiveChange", "mobileMenuActiveChange"], [3, "inlineMenuActive", "inlineMenuClick"], [3, "fullPortalLayout", "disableBreadcrumbs", "openHelpPageEditor", "openHelpPage"], [3, "display", "helpItem", "closed"], [3, "display", "appId", "closed"]], template: function PortalViewportComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PortalViewportComponent_div_0_Template, 12, 2, "div", 0);
        ɵngcc0.ɵɵtemplate(1, PortalViewportComponent_div_1_Template, 11, 2, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "tk-header", 3);
        ɵngcc0.ɵɵlistener("searchClick", function PortalViewportComponent_Template_tk_header_searchClick_3_listener($event) { return ctx.onSearchClick($event.event, $event.val); })("menuButtonClick", function PortalViewportComponent_Template_tk_header_menuButtonClick_3_listener($event) { return ctx.onMenuButtonClick($event); })("topbarItemClick", function PortalViewportComponent_Template_tk_header_topbarItemClick_3_listener($event) { return ctx.onTopbarItemClick($event.event, $event.arg); })("openHelpPageEditor", function PortalViewportComponent_Template_tk_header_openHelpPageEditor_3_listener($event) { return ctx.openHelpPageEditor($event); })("openHelpPage", function PortalViewportComponent_Template_tk_header_openHelpPage_3_listener($event) { return ctx.openHelpPage($event); })("openFeedback", function PortalViewportComponent_Template_tk_header_openFeedback_3_listener($event) { return ctx.openFeedback($event); })("openSupportTicket", function PortalViewportComponent_Template_tk_header_openSupportTicket_3_listener($event) { return ctx.openSupportTicket($event); })("openAddToLaunchpad", function PortalViewportComponent_Template_tk_header_openAddToLaunchpad_3_listener($event) { return ctx.openAddToLaunchpad($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "p-overlayPanel", 4, 5);
        ɵngcc0.ɵɵlistener("onHide", function PortalViewportComponent_Template_p_overlayPanel_onHide_4_listener() { return ctx.clearFeedback(); });
        ɵngcc0.ɵɵtemplate(6, PortalViewportComponent_ng_template_6_Template, 1, 2, "ng-template", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "p-dialog", 7);
        ɵngcc0.ɵɵlistener("visibleChange", function PortalViewportComponent_Template_p_dialog_visibleChange_7_listener($event) { return ctx.feedbackVisible = $event; })("onHide", function PortalViewportComponent_Template_p_dialog_onHide_7_listener() { return ctx.clearFeedback(); });
        ɵngcc0.ɵɵelementStart(8, "tk-feedback", 8);
        ɵngcc0.ɵɵlistener("feedbackDataChange", function PortalViewportComponent_Template_tk_feedback_feedbackDataChange_8_listener($event) { return ctx.feedbackData = $event; })("feedbackSubmit", function PortalViewportComponent_Template_tk_feedback_feedbackSubmit_8_listener($event) { return ctx.onSubmitFeedback($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(9, "p-toast");
        ɵngcc0.ɵɵelementStart(10, "div", 9);
        ɵngcc0.ɵɵlistener("click", function PortalViewportComponent_Template_div_click_10_listener($event) { return ctx.onMenuClick($event); });
        ɵngcc0.ɵɵtemplate(11, PortalViewportComponent_div_11_Template, 3, 10, "div", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 11);
        ɵngcc0.ɵɵtemplate(13, PortalViewportComponent_tk_breadcrumb_13_Template, 1, 2, "tk-breadcrumb", 12);
        ɵngcc0.ɵɵelementStart(14, "div", 13);
        ɵngcc0.ɵɵelementStart(15, "router-outlet", 14);
        ɵngcc0.ɵɵlistener("activate", function PortalViewportComponent_Template_router_outlet_activate_15_listener($event) { return ctx.currentComponent = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(16, "tk-footer", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(17, "div", 16);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(18, PortalViewportComponent_tk_help_editor_18_Template, 1, 2, "tk-help-editor", 17);
        ɵngcc0.ɵɵtemplate(19, PortalViewportComponent_tk_add_to_launchpad_19_Template, 1, 2, "tk-add-to-launchpad", 18);
        ɵngcc0.ɵɵelementStart(20, "tk-support-ticket", 19);
        ɵngcc0.ɵɵlistener("displayChange", function PortalViewportComponent_Template_tk_support_ticket_displayChange_20_listener($event) { return ctx.supportTicketDisplayed = $event; })("submitTicket", function PortalViewportComponent_Template_tk_support_ticket_submitTicket_20_listener($event) { return ctx.onSubmitTicket($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.preloader);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.initError);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hidden", ctx.preloader || ctx.initError)("ngClass", ɵngcc0.ɵɵpureFunction7(22, _c15, ctx.isStatic(), ctx.isOverlay(), ctx.isHorizontal(), ctx.isSlim(), ctx.menuActive, ctx.mobileMenuActive, ctx.mobileTopbarActive));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("menuButtonTitle", ctx.menuButtonTitle)("activeTopbarItem", ctx.activeTopbarItem)("isHorizontal", ctx.isHorizontal())("profileMode", ctx.profileMode)("disableBreadcrumbs", !ctx.enableBreadcrumbs)("homeNavTitle", ctx.portalHomeMenuItem.label)("homeNavUrl", ctx.portalHomeMenuItem.url)("fullPortalLayout", ctx.fullPortalLayout)("search", ctx.search);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("visible", ctx.feedbackVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("feedbackData", ctx.feedbackData)("submitDisabled", ctx.feedbackSubmitDisabled);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fullPortalLayout);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.enableBreadcrumbs);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("homePortal", ctx.mainPortal);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.helpDataItem);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.addToFavouritesDisplayed);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("display", ctx.supportTicketDisplayed);
    } }, directives: function () { return [ɵngcc4.NgIf, ɵngcc4.NgClass, HeaderComponent, ɵngcc17.OverlayPanel, ɵngcc11.PrimeTemplate, ɵngcc8.Dialog, FeedbackComponent, ɵngcc18.Toast, ɵngcc3.RouterOutlet, AppFooterComponent, SupportTicketComponent, ɵngcc19.Skeleton, ɵngcc4.NgForOf, ɵngcc6.Button, ɵngcc3.RouterLink, AppMenuComponent, AppInlineProfileComponent, BreadcrumbComponent, HelpEditDialogComponent, AddToLaunchpadComponent]; }, styles: [".loading-block[_ngcontent-%COMP%] {\n      }"] });
PortalViewportComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: NgZone },
    { type: Router },
    { type: ActivatedRoute },
    { type: HelpPageAPIService },
    { type: MessageService },
    { type: DialogService },
    { type: BreakpointObserver },
    { type: TranslateService },
    { type: ThemeService },
    { type: MenuService },
    { type: MenuApiService },
    { type: ConfigurationService },
    { type: FeedbackApiService },
    { type: SupportTicketApiService },
    { type: PrimeNGConfig },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
PortalViewportComponent.propDecorators = {
    showProfileInSidebar: [{ type: Input }],
    enableBreadcrumbs: [{ type: Input }],
    fullPortalLayout: [{ type: Input }],
    appName: [{ type: Input }],
    portalName: [{ type: Input }],
    layoutContainerViewChild: [{ type: ViewChild, args: ['layoutContainer',] }],
    layoutMenuScrollerViewChild: [{ type: ViewChild, args: ['scrollPanel',] }],
    feedbackPanel: [{ type: ViewChild, args: ['feedbackPanel',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalViewportComponent, [{
        type: Component,
        args: [{
                selector: 'tk-portal-viewport',
                template: "<div class=\"loading-block\" *ngIf=\"preloader\">\n  <div\n    class=\"p-d-flex p-mb-3 p-p-1\"\n    style=\"position: fixed;\n    z-index: 100;\n    width: 100%;\n    background-color: #fff;\n    height: 75px;\n    box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\n    -webkit-box-shadow: 0 2px 5px 0 rgb(0 0 0 / 26%);\"\n  >\n    <p-skeleton width=\"8rem\" height=\"60px\" styleClass=\"p-mr-2\"></p-skeleton>\n    <div style=\"flex: 1; height: 100%;\">\n      <p-skeleton width=\"100%\" height=\"60px\"></p-skeleton>\n    </div>\n  </div>\n  <div\n    style=\"overflow: auto;\n    position: fixed;\n    margin-left: 0px;\n    width: 250px;\n    z-index: 99;\n    top: 75px;\n    height: 100%;\n    background-color: #fff;\n    box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -webkit-box-shadow: 3px 0 6px rgb(0 0 0 / 30%);\n    -moz-box-shadow: 3px 0 6px rgba(0,0,0,.3);\n    padding: 1rem\"\n  >\n    <div class=\"custom-skeleton p-p-3 p-mt-4\">\n      <div class=\"p-mb-3 p-ml-5\">\n        <p-skeleton shape=\"circle\" size=\"3rem\" styleClass=\"p-mr-2\"></p-skeleton>\n      </div>\n      <p-skeleton width=\"80%\" height=\"1rem\" styleClass=\"p-mb-1 p-ml-2\"></p-skeleton>\n    </div>\n    <div class=\"p-mt-4\">\n      <p-skeleton *ngFor=\"let number of [0,1,2,3,4,5]\" width=\"100%\" height=\"1.5rem\" styleClass=\"p-mb-2\"></p-skeleton>\n    </div>\n  </div>\n</div>\n<div class=\"exception-body error-page\" *ngIf=\"initError\">\n  <div class=\"exception-type\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 48 48\" stroke=\"currentColor\">\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n      />\n    </svg>\n  </div>\n\n  <div class=\"card exception-panel\">\n    <i class=\"pi pi-exclamation-circle\"></i>\n    <h1>Exception Occured</h1>\n    <div class=\"exception-detail\">Please contact system administrator</div>\n\n    <p-button label=\"Homepage\" [routerLink]=\"['/']\" class=\"p-button-help\"></p-button>\n  </div>\n</div>\n\n<div\n  [hidden]=\"preloader || initError\"\n  class=\"layout-wrapper\"\n  [ngClass]=\"{ 'layout-menu-static': isStatic(),\n        'layout-menu-overlay': isOverlay(),\n        'layout-menu-horizontal': isHorizontal(),\n        'layout-menu-slim': isSlim(),\n        'layout-menu-active': menuActive,\n        'layout-menu-mobile-active': mobileMenuActive,\n        'layout-topbar-mobile-active': mobileTopbarActive\n   }\"\n>\n    <tk-header\n      [menuButtonTitle]=\"menuButtonTitle\"\n      [activeTopbarItem]=\"activeTopbarItem\"\n      [isHorizontal]=\"isHorizontal()\"\n      [profileMode]=\"profileMode\"\n      [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n      [homeNavTitle]=\"portalHomeMenuItem.label\"\n      [homeNavUrl]=\"portalHomeMenuItem.url\"\n      [fullPortalLayout]=\"fullPortalLayout\"\n      [search]=\"search\"\n      (searchClick)=\"onSearchClick($event.event, $event.val)\"\n      (menuButtonClick)=\"onMenuButtonClick($event)\"\n      (topbarItemClick)=\"onTopbarItemClick($event.event, $event.arg)\"\n      (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n      (openHelpPage)=\"openHelpPage($event)\"\n      (openFeedback)=\"openFeedback($event)\"\n      (openSupportTicket)=\"openSupportTicket($event)\"\n      (openAddToLaunchpad)=\"openAddToLaunchpad($event)\"\n    ></tk-header>\n\n    <p-overlayPanel #feedbackPanel (onHide)=\"clearFeedback()\">\n      <ng-template pTemplate>\n        <tk-feedback\n          [(feedbackData)]=\"feedbackData\"\n          [submitDisabled]=\"feedbackSubmitDisabled\"\n          (feedbackSubmit)=\"onSubmitFeedback($event)\"\n        >\n        </tk-feedback>\n      </ng-template>\n    </p-overlayPanel>\n\n    <p-dialog header=\"Leave Feedback\" [(visible)]=\"feedbackVisible\" (onHide)=\"clearFeedback()\">\n      <tk-feedback\n        [(feedbackData)]=\"feedbackData\"\n        [submitDisabled]=\"feedbackSubmitDisabled\"\n        (feedbackSubmit)=\"onSubmitFeedback($event)\"\n      >\n      </tk-feedback>\n    </p-dialog>\n\n    <p-toast></p-toast>\n\n    <div class=\"menu-wrapper\" (click)=\"onMenuClick($event)\">\n      <div\n        *ngIf=\"fullPortalLayout\"\n        class=\"layout-menu-container\"\n      >\n        <tk-inline-profile\n          *ngIf=\"showProfileInSidebar && !isHorizontal()\"\n          [inlineMenuActive]=\"inlineMenuActive\"\n          (inlineMenuClick)=\"onInlineMenuClick($event)\"\n        ></tk-inline-profile>\n\n        <tk-menu\n          [(menuActive)]=\"menuActive\"\n          [(mobileMenuActive)]=\"mobileMenuActive\"\n          [isStatic]=\"isStatic()\"\n          [isSlim]=\"isSlim()\"\n          [isHorizontal]=\"isHorizontal()\"\n          [isMobile]=\"isMobile()\"\n          [isDesktop]=\"isDesktop()\"\n          [menuHoverActive]=\"menuHoverActive\"\n          [portalMenu]=\"portalMenuItems\"\n        ></tk-menu>\n      </div>\n    </div>\n\n    <div class=\"layout-main\">\n      <tk-breadcrumb\n        *ngIf=\"enableBreadcrumbs\"\n        [fullPortalLayout]=\"fullPortalLayout\"\n        [disableBreadcrumbs]=\"!enableBreadcrumbs\"\n        (openHelpPageEditor)=\"openHelpPageEditor($event)\"\n        (openHelpPage)=\"openHelpPage($event)\"\n      ></tk-breadcrumb>\n\n      <div class=\"layout-content\">\n        <router-outlet (activate)=\"currentComponent = $event\"></router-outlet>\n        <tk-footer [homePortal]=\"mainPortal\"></tk-footer>\n      </div>\n    </div>\n\n    <div class=\"layout-mask modal-in\"></div>\n</div>\n\n<tk-help-editor\n  *ngIf=\"helpDataItem\"\n  [display]=\"helpPageEditorDisplayed\"\n  [helpItem]=\"helpDataItem\"\n  (closed)=\"onHelpArticleEditorClosed($event)\"\n></tk-help-editor>\n\n<tk-add-to-launchpad\n  *ngIf=\"addToFavouritesDisplayed\"\n  [display]=\"addToFavouritesDisplayed\"\n  (closed)=\"onAddToLaunchpadClosed($event)\"\n  [appId]=\"appName\"\n></tk-add-to-launchpad>\n\n<tk-support-ticket [(display)]=\"supportTicketDisplayed\" (submitTicket)=\"onSubmitTicket($event)\"></tk-support-ticket>\n",
                styles: [`
      .loading-block {
      }
    `]
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Router }, { type: ɵngcc3.ActivatedRoute }, { type: HelpPageAPIService }, { type: ɵngcc11.MessageService }, { type: ɵngcc14.DialogService }, { type: ɵngcc15.BreakpointObserver }, { type: ɵngcc16.TranslateService }, { type: ThemeService }, { type: MenuService }, { type: MenuApiService }, { type: ConfigurationService }, { type: FeedbackApiService }, { type: SupportTicketApiService }, { type: ɵngcc11.PrimeNGConfig }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }]; }, { showProfileInSidebar: [{
            type: Input
        }], enableBreadcrumbs: [{
            type: Input
        }], fullPortalLayout: [{
            type: Input
        }], portalName: [{
            type: Input
        }], appName: [{
            type: Input
        }], layoutContainerViewChild: [{
            type: ViewChild,
            args: ['layoutContainer']
        }], layoutMenuScrollerViewChild: [{
            type: ViewChild,
            args: ['scrollPanel']
        }], feedbackPanel: [{
            type: ViewChild,
            args: ['feedbackPanel']
        }] }); })();

class PortalSearchPage {
    search() {
        this.searchInProgress = true;
        const resultIntermediate = this.doSearch();
        if (isObservable(resultIntermediate)) {
            resultIntermediate.subscribe(data => {
                this.results = data;
                this.searchInProgress = false;
            });
        }
        else {
            this.results = resultIntermediate;
            this.searchInProgress = false;
        }
    }
    reset() {
        this.results = [];
        this.criteria = this.getDefaultCriteria();
    }
    ngOnInit() {
        this.reset();
    }
}
PortalSearchPage.ɵfac = function PortalSearchPage_Factory(t) { return new (t || PortalSearchPage)(); };
PortalSearchPage.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PortalSearchPage, factory: PortalSearchPage.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalSearchPage, [{
        type: Injectable
    }], null, null); })();

const reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
const dateReviver = function (key, value) {
    if (typeof value === 'string') {
        const a = reISO.exec(value);
        if (a) {
            return new Date(value);
        }
    }
    return value;
};
const ɵ0 = dateReviver;
class PortalSearchPageComponent extends PortalPageComponent {
    constructor(injectorChild, messageService, searchTemplateApi, auth, viewPort, searchPage) {
        super(injectorChild);
        this.messageService = messageService;
        this.searchTemplateApi = searchTemplateApi;
        this.auth = auth;
        this.viewPort = viewPort;
        this.searchPage = searchPage;
        this.searchCriteriaTemplatesEnabled = true;
        this.enableSearchToolbar = false;
        this.onSearch = new EventEmitter();
        this.newTemplateDefaultFlag = false;
    }
    ngOnInit() {
        super.ngOnInit();
        this.validatedInputs();
        if (this.pageName) {
            this.fetchSearchTemplates();
        }
    }
    onSearchTemplateSelection(event) {
        if (event.value) {
            this.activeSearchTemplateId = event.value;
            this.searchTemplateApi
                .getTemplateById(this.activeSearchTemplateId)
                .subscribe(template => {
                this.activeSearchTemplate = template;
                // TODO allow override
                this.searchPage.criteria = JSON.parse(template.criteriaAsJson, dateReviver);
            });
        }
        else {
            this.activeSearchTemplateId = null;
            this.activeSearchTemplate = null;
        }
    }
    fetchSearchTemplates() {
        this.searchTemplateApi
            .getSearchTemplatesLegacy(this.auth.currentUser().userId, this.viewPort.appName, this.pageName)
            .subscribe(templates => {
            this.searchTemplateOptions = [
                { value: null, label: 'Pick saved template' },
                ...templates.map(t => ({ label: t.name, value: t.id }))
            ];
            // if a default template exists preselect it
            const defaultTemplate = templates.find(t => t.defaultTemplate);
            if (defaultTemplate) {
                this.onSearchTemplateSelection({ value: defaultTemplate.id });
            }
        });
    }
    validatedInputs() {
        if (!this.searchPage) {
            console.error(`<tk-search-page> can only be used in a component that extends "PortalSearchPage". See README.MD chapter #Generic Search Page`);
        }
        if (!this.pageName) {
            console.warn(`You did not specify [pageName] attribute for search page component. Without it, some features will not work.`);
        }
    }
    triggerSearch() {
        console.log(`Click search`);
        this.onSearch.emit(1);
    }
    triggerCriteriaTemplateUpdate() {
        console.log('update tempalte');
        this.activeSearchTemplate.criteriaAsJson = JSON.stringify(this.searchPage.criteria);
        this.searchTemplateApi
            .updateTemplate(this.activeSearchTemplateId, this.activeSearchTemplate)
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template updated'
            });
        });
    }
    triggerCriteriaTemplateSave(event, op) {
        this.searchTemplateApi
            .createNewTemplate({
            application: this.viewPort.appName,
            page: this.pageName,
            user: this.auth.currentUser().userId,
            name: this.newTemplateName,
            defaultTemplate: this.newTemplateDefaultFlag,
            criteriaAsJson: JSON.stringify(this.searchPage.criteria)
        })
            .subscribe(savedTemplate => {
            this.activeSearchTemplate = savedTemplate;
            this.searchTemplateOptions.push({
                label: savedTemplate.name,
                value: savedTemplate.id
            });
            this.activeSearchTemplateId = savedTemplate.id;
            op.hide();
            this.newTemplateDefaultFlag = false;
            this.newTemplateName = undefined;
            this.messageService.add({
                severity: 'success',
                summary: 'Search template saved'
            });
        });
    }
    triggerCriteriaTemplateDelete() {
        this.searchTemplateApi
            .deleteTemplate(this.activeSearchTemplateId)
            .subscribe(ok => {
            this.messageService.add({
                severity: 'info',
                summary: 'Search template deleted'
            });
            this.searchTemplateOptions.splice(this.searchTemplateOptions.findIndex(i => i.value == this.activeSearchTemplateId), 1);
            this.activeSearchTemplateId = undefined;
            this.activeSearchTemplate = undefined;
        });
    }
}
PortalSearchPageComponent.ɵfac = function PortalSearchPageComponent_Factory(t) { return new (t || PortalSearchPageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.MessageService), ɵngcc0.ɵɵdirectiveInject(SearchTemplateAPIService), ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE), ɵngcc0.ɵɵdirectiveInject(PortalViewportComponent), ɵngcc0.ɵɵdirectiveInject(PortalSearchPage, 12)); };
PortalSearchPageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PortalSearchPageComponent, selectors: [["tk-portal-search-page"]], inputs: { searchCriteriaTemplatesEnabled: "searchCriteriaTemplatesEnabled", enableSearchToolbar: "enableSearchToolbar", pageName: "pageName" }, outputs: { onSearch: "onSearch" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c19, decls: 9, vars: 3, consts: [[3, "header", "leftToolbar", "rightToolbar"], ["id", "criteria-panel", "tkCollapsible", ""], ["id", "search-results"], ["pageToolbarLeft", ""], ["pageToolbarRight", ""], ["title", "Suchen", "icon", "search", 3, "click", 4, "ngIf"], [4, "ngTemplateOutlet"], ["title", "Suchen", "icon", "search", 3, "click"], ["appendTo", "body", 3, "dismissable", "showCloseIcon"], ["op", ""], [1, "p-fluid", 3, "ngStyle"], [1, "p-field", "p-grid"], ["for", "templateName", 1, "p-col-12", "p-md-4"], [1, "p-col-12", "p-md-8"], ["id", "templateName", "pInputText", "", "type", "text", 3, "ngModel", "ngModelChange"], ["for", "defaultFlag", 1, "p-col-12", "p-md-4"], ["id", "defaultFlag", 3, "ngModel", "ngModelChange"], [1, "p-grid"], [1, "p-col-6"], ["type", "button", "pButton", "", "label", "Cancel", 1, "p-button-secondary", "p-col-12", 3, "click"], ["type", "button", "pButton", "", "label", "Save", 1, "p-col-12", 3, "click"], ["title", "Neue Suchvorlage Erstellen", "icon", "plus", 3, "click", 4, "ngIf"], ["title", "Suchvorlage Speichern", "icon", "save", 3, "click", 4, "ngIf"], ["title", "Suchvorlage Loeschen", "icon", "trash", 3, "click", 4, "ngIf"], ["class", "search-template-box", 4, "ngIf"], ["title", "Ausblenden", "class", "collapse-toggle", "icon", "angle-up", 3, "click", 4, "ngIf"], ["title", "Neue Suchvorlage Erstellen", "icon", "plus", 3, "click"], ["title", "Suchvorlage Speichern", "icon", "save", 3, "click"], ["title", "Suchvorlage Loeschen", "icon", "trash", 3, "click"], [1, "search-template-box"], ["appendTo", "body", 3, "ngModel", "options", "filter", "onChange"], ["title", "Ausblenden", "icon", "angle-up", 1, "collapse-toggle", 3, "click"]], template: function PortalSearchPageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c18);
        ɵngcc0.ɵɵelementStart(0, "tk-portal-page", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵprojection(4, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, PortalSearchPageComponent_ng_template_5_Template, 2, 2, "ng-template", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(7, PortalSearchPageComponent_ng_template_7_Template, 26, 12, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r0 = ɵngcc0.ɵɵreference(6);
        const _r2 = ɵngcc0.ɵɵreference(8);
        ɵngcc0.ɵɵpropertyInterpolate("header", ctx.header);
        ɵngcc0.ɵɵproperty("leftToolbar", _r0)("rightToolbar", _r2);
    } }, directives: function () { return [PortalPageComponent, CollapsibleDirective, ɵngcc4.NgIf, ɵngcc4.NgTemplateOutlet, ToolbarItemComponent, ɵngcc17.OverlayPanel, ɵngcc4.NgStyle, ɵngcc9.DefaultValueAccessor, ɵngcc10.InputText, ɵngcc9.NgControlStatus, ɵngcc9.NgModel, ɵngcc20.InputSwitch, ɵngcc6.ButtonDirective, ɵngcc21.Dropdown]; }, styles: [".search-template-box[_ngcontent-%COMP%]{display:inline-block;padding-top:.2em}.search-template-box[_ngcontent-%COMP%]     .p-dropdown-label{padding:.5em}"] });
PortalSearchPageComponent.ctorParameters = () => [
    { type: Injector },
    { type: MessageService },
    { type: SearchTemplateAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: PortalViewportComponent },
    { type: PortalSearchPage, decorators: [{ type: SkipSelf }, { type: Optional }] }
];
PortalSearchPageComponent.propDecorators = {
    searchCriteriaTemplatesEnabled: [{ type: Input }],
    enableSearchToolbar: [{ type: Input }],
    onSearch: [{ type: Output }],
    pageName: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalSearchPageComponent, [{
        type: Component,
        args: [{
                selector: 'tk-portal-search-page',
                template: "<tk-portal-page\n  header=\"{{ header }}\"\n  [leftToolbar]=\"pageToolbarLeft\"\n  [rightToolbar]=\"pageToolbarRight\"\n>\n  <div id=\"criteria-panel\" tkCollapsible>\n    <ng-content select=\"[criteria]\"></ng-content>\n  </div>\n\n  <div id=\"search-results\">\n    <ng-content select=\"[results]\"></ng-content>\n  </div>\n</tk-portal-page>\n\n<ng-template #pageToolbarLeft>\n  <tk-toolbar-item\n    *ngIf=\"enableSearchToolbar\"\n    title=\"Suchen\"\n    icon=\"search\"\n    (click)=\"triggerSearch()\"\n  ></tk-toolbar-item>\n  <ng-container *ngTemplateOutlet=\"leftToolbar\"></ng-container>\n</ng-template>\n\n<ng-template #pageToolbarRight>\n  <ng-container *ngTemplateOutlet=\"rightToolbar\"></ng-container>\n  <p-overlayPanel\n    #op\n    [dismissable]=\"true\"\n    [showCloseIcon]=\"true\"\n    appendTo=\"body\"\n  >\n    <div class=\"p-fluid\" [ngStyle]=\"{ width: '400px' }\">\n      <h5>Save a new search template</h5>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"templateName\">Template Name</label>\n        <div class=\"p-col-12 p-md-8\">\n          <input\n            id=\"templateName\"\n            pInputText\n            type=\"text\"\n            [(ngModel)]=\"newTemplateName\"\n          />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label class=\"p-col-12 p-md-4\" for=\"defaultFlag\">Set as default?</label>\n        <!--      </div>-->\n        <div class=\"p-col-12 p-md-8\">\n          <p-inputSwitch\n            id=\"defaultFlag\"\n            [(ngModel)]=\"newTemplateDefaultFlag\"\n          ></p-inputSwitch>\n        </div>\n      </div>\n\n      <div class=\"p-grid\">\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Cancel\"\n            (click)=\"op.hide()\"\n            class=\"p-button-secondary p-col-12\"\n          ></button>\n        </div>\n        <div class=\"p-col-6\">\n          <button\n            type=\"button\"\n            pButton\n            label=\"Save\"\n            class=\"p-col-12\"\n            (click)=\"triggerCriteriaTemplateSave($event, op)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n  </p-overlayPanel>\n  <tk-toolbar-item\n    *ngIf=\"searchCriteriaTemplatesEnabled\"\n    title=\"Neue Suchvorlage Erstellen\"\n    icon=\"plus\"\n    (click)=\"op.show($event)\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Speichern\"\n    icon=\"save\"\n    (click)=\"triggerCriteriaTemplateUpdate()\"\n  ></tk-toolbar-item>\n  <tk-toolbar-item\n    *ngIf=\"activeSearchTemplate\"\n    title=\"Suchvorlage Loeschen\"\n    icon=\"trash\"\n    (click)=\"triggerCriteriaTemplateDelete()\"\n  ></tk-toolbar-item>\n  <div class=\"search-template-box\" *ngIf=\"searchTemplateOptions\">\n    <p-dropdown\n      [style]=\"{ width: '150px' }\"\n      appendTo=\"body\"\n      [ngModel]=\"activeSearchTemplateId\"\n      [options]=\"searchTemplateOptions\"\n      [filter]=\"true\"\n      (onChange)=\"onSearchTemplateSelection($event)\"\n    ></p-dropdown>\n  </div>\n\n  <tk-toolbar-item\n    *ngIf=\"collapsible2\"\n    title=\"Ausblenden\"\n    class=\"collapse-toggle\"\n    icon=\"angle-up\"\n    (click)=\"collapsed ? expand() : collapse()\"\n  ></tk-toolbar-item>\n</ng-template>\n",
                styles: [".search-template-box{display:inline-block;padding-top:.2em}.search-template-box ::ng-deep .p-dropdown-label{padding:.5em}"]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc11.MessageService }, { type: SearchTemplateAPIService }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: PortalViewportComponent }, { type: PortalSearchPage, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }]; }, { searchCriteriaTemplatesEnabled: [{
            type: Input
        }], enableSearchToolbar: [{
            type: Input
        }], onSearch: [{
            type: Output
        }], pageName: [{
            type: Input
        }] }); })();

class TkIfPermDirective {
    constructor(templateRef, viewContainer, authService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.authService = authService;
    }
    set tkIfPerm(permission) {
        this.permission = permission;
    }
    ngOnInit() {
        if (!this.authService.hasPermission(this.permission)) {
            console.log(`Hide element because no perm ${this.permission}`);
            this.viewContainer.clear();
        }
        else {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
    }
}
TkIfPermDirective.ɵfac = function TkIfPermDirective_Factory(t) { return new (t || TkIfPermDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE)); };
TkIfPermDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TkIfPermDirective, selectors: [["", "tkIfPerm", ""]], inputs: { tkIfPerm: "tkIfPerm", loaderState: "loaderState" } });
TkIfPermDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] }
];
TkIfPermDirective.propDecorators = {
    loaderState: [{ type: Input }],
    tkIfPerm: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TkIfPermDirective, [{
        type: Directive,
        args: [{ selector: '[tkIfPerm]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }]; }, { tkIfPerm: [{
            type: Input
        }], loaderState: [{
            type: Input
        }] }); })();

// TODO is <a> without click actually OK? How about a11y?
class ToolbarItemComponent {
    constructor() { }
    ngOnInit() { }
}
ToolbarItemComponent.ɵfac = function ToolbarItemComponent_Factory(t) { return new (t || ToolbarItemComponent)(); };
ToolbarItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ToolbarItemComponent, selectors: [["tk-toolbar-item"]], inputs: { title: "title", permission: "permission", link: "link", linkTarget: "linkTarget", linkRel: "linkRel", action: "action", icon: "icon" }, decls: 2, vars: 2, consts: [["pRipple", "", "class", "toolbar-item", "role", "button", 3, "href", "target", "rel", "title", 4, "ngIf"], ["pRipple", "", "href", "javascript:void(0)", "class", "toolbar-item", "role", "button", 3, "title", 4, "ngIf"], ["pRipple", "", "role", "button", 1, "toolbar-item", 3, "href", "target", "rel", "title"], ["pRipple", "", "href", "javascript:void(0)", "role", "button", 1, "toolbar-item", 3, "title"]], template: function ToolbarItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ToolbarItemComponent_a_0_Template, 2, 7, "a", 0);
        ɵngcc0.ɵɵtemplate(1, ToolbarItemComponent_a_1_Template, 2, 4, "a", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.link);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.link);
    } }, directives: [ɵngcc4.NgIf, ɵngcc7.Ripple], styles: [".toolbar-item[_ngcontent-%COMP%] {\n        color: #757575;\n        display: inline-block;\n        padding: 3px;\n        text-align: center;\n        font-size: 1.3em;\n        transition: all 0.4s;\n      }\n      .toolbar-item[_ngcontent-%COMP%]   i[_ngcontent-%COMP%] {\n        transition: all 0.4s;\n        font-size: 1.5rem;\n        padding: 0.2em;\n      }\n      .toolbar-item[_ngcontent-%COMP%]:hover {\n        background-color: #e8e8e8;\n      }\n      .toolbar-item[_ngcontent-%COMP%]:focus {\n        background-color: #e8e8e8;\n      }"] });
ToolbarItemComponent.ctorParameters = () => [];
ToolbarItemComponent.propDecorators = {
    title: [{ type: Input }],
    permission: [{ type: Input }],
    link: [{ type: Input }],
    linkTarget: [{ type: Input }],
    linkRel: [{ type: Input }],
    action: [{ type: Input }],
    icon: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ToolbarItemComponent, [{
        type: Component,
        args: [{
                selector: 'tk-toolbar-item',
                template: `
    <a
      pRipple
      *ngIf="link"
      class="toolbar-item"
      [href]="link"
      [target]="linkTarget"
      [rel]="linkRel"
      title="{{ title }}"
      role="button"
      ><i class="pi pi-{{icon}}"></i>
    </a>
    <a
      pRipple
      *ngIf="!link"
      href="javascript:void(0)"
      class="toolbar-item"
      title="{{ title }}"
      role="button"
      ><i class="pi pi-{{icon}}"></i>
    </a>
  `,
                styles: [`
      .toolbar-item {
        color: #757575;
        display: inline-block;
        padding: 3px;
        text-align: center;
        font-size: 1.3em;
        transition: all 0.4s;
      }
      .toolbar-item i {
        transition: all 0.4s;
        font-size: 1.5rem;
        padding: 0.2em;
      }
      .toolbar-item:hover {
        background-color: #e8e8e8;
      }
      .toolbar-item:focus {
        background-color: #e8e8e8;
      }

    `]
            }]
    }], function () { return []; }, { title: [{
            type: Input
        }], permission: [{
            type: Input
        }], link: [{
            type: Input
        }], linkTarget: [{
            type: Input
        }], linkRel: [{
            type: Input
        }], action: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

class HttpProgressInterceptor {
    constructor(loaderService) {
        this.loaderService = loaderService;
        this.requests = [];
    }
    removeRequest(req) {
        const i = this.requests.indexOf(req);
        if (i >= 0) {
            this.requests.splice(i, 1);
        }
        this.loaderService.isLoading.next(this.requests.length > 0);
    }
    intercept(req, next) {
        const started = Date.now();
        this.requests.push(req);
        this.loaderService.isLoading.next(true);
        return next.handle(req).pipe(tap(event => {
            if (event instanceof HttpResponse) {
                const elapsed = Date.now() - started;
                console.log(`Request for ${req.urlWithParams} took ${elapsed} ms with result ${event.status}. ${this.requests.length}`);
                this.removeRequest(req);
            }
        }, error => {
            console.log(`Http err: status ${error.status} ${JSON.stringify(error)}`);
            this.removeRequest(req);
        }));
    }
}
HttpProgressInterceptor.ɵfac = function HttpProgressInterceptor_Factory(t) { return new (t || HttpProgressInterceptor)(ɵngcc0.ɵɵinject(HttpProgressLoaderService)); };
HttpProgressInterceptor.ɵprov = ɵɵdefineInjectable({ factory: function HttpProgressInterceptor_Factory() { return new HttpProgressInterceptor(ɵɵinject(HttpProgressLoaderService)); }, token: HttpProgressInterceptor, providedIn: "root" });
HttpProgressInterceptor.ctorParameters = () => [
    { type: HttpProgressLoaderService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpProgressInterceptor, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: HttpProgressLoaderService }]; }, null); })();

function tkitPortalInitializer(configService, translateService, authService) {
    const startTime = new Date().getTime();
    console.log(`Start tkit portal module initializer`);
    return () => configService
        .init()
        .then(() => console.log('Config initialized, next: init auth'))
        .then(() => authService.init())
        .then(res => {
        var _a, _b;
        console.log(`Auth service init resolved ${res}, next: set default lang`);
        const availLangsCSV = configService.getProperty('SUPPORTED_LANGUAGES') || 'en,de';
        const availableLangs = availLangsCSV.split(',').map(l => l.trim());
        let lang = ((_b = (_a = authService.currentUser().accountSettings) === null || _a === void 0 ? void 0 : _a.localeAndTimeSettings) === null || _b === void 0 ? void 0 : _b.locale) || translateService.getBrowserLang();
        lang = availableLangs.includes(lang) ? lang : 'de';
        translateService.use(lang);
        configService.setLang(lang);
        const duration = new Date().getTime() - startTime;
        console.log(`Tkit portal module initializer finished in ${(duration / 1000).toFixed(2)}s`);
        return true;
    })
        .catch(err => {
        console.log(`
      #####################################
      Tkit portal lib initialization failed
      #####################################
      `);
        configService.error = err;
        //throw err;
    });
}

class PortalItemService {
    constructor(http) {
        this.http = http;
        this.url = 'portal-api/v1/portalItems/search';
    }
    searchForServices(query, portalId, count) {
        let params = new HttpParams();
        if (query) {
            params = params.set('query', query);
        }
        if (portalId) {
            params = params.set('portal-id', portalId);
        }
        if (count) {
            params = params.set('count', count.toString());
        }
        return this.http.get(this.url, {
            params
        });
    }
}
PortalItemService.ɵfac = function PortalItemService_Factory(t) { return new (t || PortalItemService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
PortalItemService.ɵprov = ɵɵdefineInjectable({ factory: function PortalItemService_Factory() { return new PortalItemService(ɵɵinject(HttpClient)); }, token: PortalItemService, providedIn: "root" });
PortalItemService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PortalItemService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

var SearchItemType;
(function (SearchItemType) {
    SearchItemType["APPLICATION"] = "APPLICATION";
    SearchItemType["OPEN_SEARCH"] = "OPEN_SEARCH";
})(SearchItemType || (SearchItemType = {}));

class SearchBarComponent {
    constructor(searchService, config, translateService, messageService) {
        this.searchService = searchService;
        this.config = config;
        this.translateService = translateService;
        this.messageService = messageService;
        this.SearchItemType = SearchItemType;
        this.searchClick = new EventEmitter();
    }
    get openInSearchItem() {
        return {
            type: SearchItemType.OPEN_SEARCH,
            name: 'Open in search view',
            url: `${this.searchUrl}${this.query.value}`,
            queryString: this.query.value,
        };
    }
    ngOnInit() {
        this.query = new FormControl('');
        const searchUrl = this.config.getProperty(CONFIG_KEY_TKIT_SEARCH_BASE_URL) || '/ops/enterprise-search';
        this.searchUrl = `${searchUrl}/search?query=`;
    }
    ngAfterViewInit() {
        setTimeout(() => this.searchInputViewChild.focusInput(), 0);
    }
    search(event) {
        this.searchService.searchForServices(event.query, null).subscribe(data => {
            data = data.slice(0, this.maxResults);
            data.push(this.openInSearchItem);
            this.results = data;
        });
    }
    select(event) {
        if (event.type === SearchItemType.OPEN_SEARCH) {
            this.query.setValue(event.queryString);
        }
        else {
            this.query.setValue(event.name);
        }
        window.open(event.url);
    }
    goToSearch(clickEnter) {
        if (this.query.value) {
            window.open(`${this.searchUrl}${this.query.value}`);
        }
        else {
            if (clickEnter === false) {
                this.messageService.add({
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                    summary: this.translateService.instant('QUICK_SEARCH_FORM.WRONG_DATA'),
                    severity: 'error',
                });
            }
        }
    }
    onSearchClick(event, val) {
        this.searchClick.emit({ event, val });
    }
}
SearchBarComponent.ɵfac = function SearchBarComponent_Factory(t) { return new (t || SearchBarComponent)(ɵngcc0.ɵɵdirectiveInject(PortalItemService), ɵngcc0.ɵɵdirectiveInject(ConfigurationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc16.TranslateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.MessageService)); };
SearchBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchBarComponent, selectors: [["tk-search-bar"]], viewQuery: function SearchBarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c4, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchInputViewChild = _t.first);
    } }, outputs: { searchClick: "searchClick" }, decls: 5, vars: 6, consts: [[1, "search-bar"], [3, "spellcheck", "ngSubmit"], ["placeholder", "Search for apps", 3, "formControl", "suggestions", "completeMethod", "onSelect", "click", "keydown.escape", "keydown.enter"], ["searchInput", ""], ["pTemplate", "item"], [3, "ngSwitch"], ["class", "item-badge item-app", 4, "ngSwitchCase"], [1, "item-badge", "item-app"]], template: function SearchBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function SearchBarComponent_Template_form_ngSubmit_1_listener() { return ctx.goToSearch(false); });
        ɵngcc0.ɵɵelementStart(2, "p-autoComplete", 2, 3);
        ɵngcc0.ɵɵlistener("completeMethod", function SearchBarComponent_Template_p_autoComplete_completeMethod_2_listener($event) { return ctx.search($event); })("onSelect", function SearchBarComponent_Template_p_autoComplete_onSelect_2_listener($event) { return ctx.select($event); })("click", function SearchBarComponent_Template_p_autoComplete_click_2_listener($event) { return ctx.onSearchClick($event, true); })("keydown.escape", function SearchBarComponent_Template_p_autoComplete_keydown_escape_2_listener($event) { return ctx.onSearchClick($event, false); })("keydown.enter", function SearchBarComponent_Template_p_autoComplete_keydown_enter_2_listener() { return ctx.goToSearch(true); });
        ɵngcc0.ɵɵtemplate(4, SearchBarComponent_ng_template_4_Template, 4, 3, "ng-template", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("spellcheck", false);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(5, _c20));
        ɵngcc0.ɵɵproperty("formControl", ctx.query)("suggestions", ctx.results);
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_ba, ɵngcc9.NgControlStatusGroup, ɵngcc9.NgForm, ɵngcc22.AutoComplete, ɵngcc9.NgControlStatus, ɵngcc9.FormControlDirective, ɵngcc11.PrimeTemplate, ɵngcc4.NgSwitch, ɵngcc4.NgSwitchCase], styles: ["[_nghost-%COMP%]{flex:1 1 auto}.search-bar[_ngcontent-%COMP%]     .item-badge{font-size:10px;border-radius:.1rem;margin-right:1em;padding:.25em .5em;text-transform:uppercase;font-weight:700;letter-spacing:.3px}.search-bar[_ngcontent-%COMP%]     .item-badge.item-app{background-color:green;color:#fff}"] });
SearchBarComponent.ctorParameters = () => [
    { type: PortalItemService },
    { type: ConfigurationService },
    { type: TranslateService },
    { type: MessageService }
];
SearchBarComponent.propDecorators = {
    searchInputViewChild: [{ type: ViewChild, args: ['searchInput',] }],
    searchClick: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SearchBarComponent, [{
        type: Component,
        args: [{
                selector: 'tk-search-bar',
                template: "<div class=\"search-bar\">\n  <form [spellcheck]=\"false\" (ngSubmit)=\"goToSearch(false)\">\n    <p-autoComplete\n      #searchInput\n      [formControl]=\"query\"\n      [suggestions]=\"results\"\n      (completeMethod)=\"search($event)\"\n      (onSelect)=\"select($event)\"\n      (click)=\"onSearchClick($event, true)\"\n      (keydown.escape)=\"onSearchClick($event, false)\"\n      (keydown.enter)=\"goToSearch(true)\"\n      [style]=\"{ width: '100%', height: '4rem' }\"\n      placeholder=\"Search for apps\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <ng-container [ngSwitch]=\"item.type\">\n          <span\n            *ngSwitchCase=\"SearchItemType.APPLICATION\"\n            class=\"item-badge item-app\"\n            >APP</span\n          >\n        <span>{{ item.name }}</span>\n        </ng-container>\n      </ng-template>\n    </p-autoComplete>\n  </form>\n</div>\n",
                styles: [":host{flex:1 1 auto}.search-bar ::ng-deep .item-badge{font-size:10px;border-radius:.1rem;margin-right:1em;padding:.25em .5em;text-transform:uppercase;font-weight:700;letter-spacing:.3px}.search-bar ::ng-deep .item-badge.item-app{background-color:green;color:#fff}"]
            }]
    }], function () { return [{ type: PortalItemService }, { type: ConfigurationService }, { type: ɵngcc16.TranslateService }, { type: ɵngcc11.MessageService }]; }, { searchClick: [{
            type: Output
        }], searchInputViewChild: [{
            type: ViewChild,
            args: ['searchInput']
        }] }); })();

class ResultTextComponent {
    constructor() { }
    ;
}
ResultTextComponent.ɵfac = function ResultTextComponent_Factory(t) { return new (t || ResultTextComponent)(); };
ResultTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ResultTextComponent, selectors: [["tk-result-text"]], inputs: { resultsCount: "resultsCount", state: "state" }, decls: 3, vars: 2, consts: [[4, "ngIf", "ngIfElse"], ["noResults", ""]], template: function ResultTextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ResultTextComponent_span_0_Template, 4, 9, "span", 0);
        ɵngcc0.ɵɵtemplate(1, ResultTextComponent_ng_template_1_Template, 2, 3, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵngcc0.ɵɵreference(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.resultsCount > 0 && ctx.state.totalRecords > 0)("ngIfElse", _r1);
    } }, directives: [ɵngcc4.NgIf], pipes: [ɵngcc16.TranslatePipe], encapsulation: 2 });
ResultTextComponent.ctorParameters = () => [];
ResultTextComponent.propDecorators = {
    resultsCount: [{ type: Input }],
    state: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResultTextComponent, [{
        type: Component,
        args: [{
                selector: "tk-result-text",
                template: `
    <span *ngIf="resultsCount > 0 && state.totalRecords > 0; else noResults">
      {{ 'SEARCH.SHOWING' | translate }} {{ state.first + 1 }} -
      {{
        state.rows * (state.page + 1) < state.totalRecords
          ? state.rows * (state.page + 1)
          : state.totalRecords
      }}
      {{ 'SEARCH.OUT_OF_TOTAL' | translate }} {{ state.totalRecords }}
    </span>
    <ng-template #noResults>
      {{ 'SEARCH.NO_RESULTS' | translate }}
    </ng-template>
  `
            }]
    }], function () { return []; }, { resultsCount: [{
            type: Input
        }], state: [{
            type: Input
        }] }); })();
class CustomTableState {
}

class FeedbackComponent {
    constructor(fb) {
        this.fb = fb;
        this.minLength = 5;
        this.submitDisabled = false;
        this.feedbackDataChange = new EventEmitter();
        this.feedbackSubmit = new EventEmitter();
        this.commentRequired = false;
        this.requiredCommentValidator = (fg) => {
            const rating = fg.controls.rating.value;
            const comment = fg.controls.comment.value;
            if (rating > 0 && rating < 5) {
                this.commentRequired = true;
                return comment.length >= this.minLength ? null : { missingComment: true };
            }
            else {
                this.commentRequired = false;
                return null;
            }
        };
    }
    set feedbackData(feedback) {
        if (this.form) {
            this.form.patchValue(feedback);
        }
    }
    ngOnInit() {
        this.form = this.fb.group({
            rating: [0, [Validators.required, Validators.min(1), Validators.max(5)]],
            comment: ['', Validators.minLength(this.minLength)],
            anonymous: false
        }, { validators: this.requiredCommentValidator });
        this.form.valueChanges.subscribe(values => {
            this.feedbackDataChange.emit(values);
        });
    }
    submitFeedback() {
        if (this.form.valid && !this.submitDisabled) {
            this.submitDisabled = true;
            this.feedbackSubmit.emit(this.form.value);
        }
    }
}
FeedbackComponent.ɵfac = function FeedbackComponent_Factory(t) { return new (t || FeedbackComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder)); };
FeedbackComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FeedbackComponent, selectors: [["tk-feedback"]], inputs: { submitDisabled: "submitDisabled", feedbackData: "feedbackData" }, outputs: { feedbackDataChange: "feedbackDataChange", feedbackSubmit: "feedbackSubmit" }, decls: 14, vars: 5, consts: [[3, "formGroup"], [1, "feedback"], [1, "rating"], ["formControlName", "rating", 3, "cancel"], ["pInputTextarea", "", "rows", "5", "formControlName", "comment", 1, "fill", 3, "placeholder"], [1, "anon"], ["name", "anon", "value", "Anonymous", "label", "Anonymous", "formControlName", "anonymous"], [1, "submit"], ["pButton", "", "label", "Submit", 3, "disabled", "click"]], template: function FeedbackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div");
        ɵngcc0.ɵɵtext(3, "Rate app");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelement(5, "p-rating", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div");
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div");
        ɵngcc0.ɵɵelement(9, "textarea", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 5);
        ɵngcc0.ɵɵelement(11, "p-checkbox", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "div", 7);
        ɵngcc0.ɵɵelementStart(13, "button", 8);
        ɵngcc0.ɵɵlistener("click", function FeedbackComponent_Template_button_click_13_listener() { return ctx.submitFeedback(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.form);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("cancel", false);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1("Comments ", ctx.commentRequired ? "(required)" : "(optional)", "");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate1("placeholder", "Min. ", ctx.minLength, " characters");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("disabled", ctx.form.invalid || ctx.submitDisabled);
    } }, directives: [ɵngcc9.ɵangular_packages_forms_forms_ba, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc23.Rating, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc9.DefaultValueAccessor, ɵngcc24.InputTextarea, ɵngcc25.Checkbox, ɵngcc6.ButtonDirective], styles: [".feedback[_ngcontent-%COMP%]   .fill[_ngcontent-%COMP%]{width:15rem;background-color:#efefef}.feedback[_ngcontent-%COMP%]   .rating[_ngcontent-%COMP%]{text-align:center}.feedback[_ngcontent-%COMP%]   .anon[_ngcontent-%COMP%]{padding:.5rem 0}.feedback[_ngcontent-%COMP%]   .submit[_ngcontent-%COMP%]{padding:.5em 0}.feedback[_ngcontent-%COMP%]   .submit[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%}"] });
FeedbackComponent.ctorParameters = () => [
    { type: FormBuilder }
];
FeedbackComponent.propDecorators = {
    submitDisabled: [{ type: Input }],
    feedbackData: [{ type: Input }],
    feedbackDataChange: [{ type: Output }],
    feedbackSubmit: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeedbackComponent, [{
        type: Component,
        args: [{
                selector: 'tk-feedback',
                template: "<form [formGroup]=\"form\">\n  <div class=\"feedback\">\n    <div>Rate app</div>\n    <div class=\"rating\">\n      <p-rating [cancel]=\"false\" formControlName=\"rating\"></p-rating>\n    </div>\n    <div>Comments {{ commentRequired ? \"(required)\" : \"(optional)\" }}</div>\n    <div>\n      <textarea\n        class=\"fill\"\n        pInputTextarea\n        rows=\"5\"\n        placeholder=\"Min. {{ minLength }} characters\"\n        formControlName=\"comment\"\n      ></textarea>\n    </div>\n    <div class=\"anon\">\n      <p-checkbox\n        name=\"anon\"\n        value=\"Anonymous\"\n        label=\"Anonymous\"\n        formControlName=\"anonymous\"\n      ></p-checkbox>\n    </div>\n    <div class=\"submit\">\n      <button\n        pButton\n        [disabled]=\"form.invalid || submitDisabled\"\n        label=\"Submit\"\n        (click)=\"submitFeedback()\"\n      ></button>\n    </div>\n  </div>\n</form>\n",
                styles: [".feedback .fill{width:15rem;background-color:#efefef}.feedback .rating{text-align:center}.feedback .anon{padding:.5rem 0}.feedback .submit{padding:.5em 0}.feedback .submit button{width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc9.FormBuilder }]; }, { submitDisabled: [{
            type: Input
        }], feedbackDataChange: [{
            type: Output
        }], feedbackSubmit: [{
            type: Output
        }], feedbackData: [{
            type: Input
        }] }); })();

class SupportTicketComponent {
    constructor(fb) {
        this.fb = fb;
        this.display = false;
        this.displayChange = new EventEmitter();
        this.submitTicket = new EventEmitter();
    }
    ngOnInit() {
        this.formGroup = this.fb.group({
            title: ['', Validators.required],
            description: ['', Validators.required]
        });
    }
    close() {
        this.displayChange.emit(false);
    }
    submit() {
        this.submitTicket.emit(this.formGroup.value);
    }
}
SupportTicketComponent.ɵfac = function SupportTicketComponent_Factory(t) { return new (t || SupportTicketComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder)); };
SupportTicketComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SupportTicketComponent, selectors: [["tk-support-ticket"]], inputs: { display: "display" }, outputs: { displayChange: "displayChange", submitTicket: "submitTicket" }, decls: 16, vars: 8, consts: [["header", "Create Support Ticket", 3, "contentStyle", "visible", "visibleChange", "onHide"], [3, "formGroup"], [1, "p-grid"], [1, "p-col-12"], [1, "p-float-label"], ["id", "ticket-title", "formControlName", "title", "pInputText", ""], ["for", "ticket-title"], ["id", "ticket-description", "formControlName", "description", "pInputTextarea", "", "rows", "10"], ["for", "ticket-description"], ["pButton", "", "label", "Submit", 3, "disabled", "click"]], template: function SupportTicketComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-dialog", 0);
        ɵngcc0.ɵɵlistener("visibleChange", function SupportTicketComponent_Template_p_dialog_visibleChange_0_listener($event) { return ctx.display = $event; })("onHide", function SupportTicketComponent_Template_p_dialog_onHide_0_listener() { return ctx.close(); });
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵelement(5, "input", 5);
        ɵngcc0.ɵɵelementStart(6, "label", 6);
        ɵngcc0.ɵɵtext(7, "Title");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "span", 4);
        ɵngcc0.ɵɵelementStart(10, "textarea", 7);
        ɵngcc0.ɵɵtext(11, "          ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(12, "label", 8);
        ɵngcc0.ɵɵtext(13, "Description");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(14, "div", 3);
        ɵngcc0.ɵɵelementStart(15, "button", 9);
        ɵngcc0.ɵɵlistener("click", function SupportTicketComponent_Template_button_click_15_listener() { return ctx.submit(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(6, _c21));
        ɵngcc0.ɵɵproperty("contentStyle", ɵngcc0.ɵɵpureFunction0(7, _c1))("visible", ctx.display);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.formGroup);
        ɵngcc0.ɵɵadvance(14);
        ɵngcc0.ɵɵproperty("disabled", ctx.formGroup.invalid);
    } }, directives: [ɵngcc8.Dialog, ɵngcc9.ɵangular_packages_forms_forms_ba, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc10.InputText, ɵngcc24.InputTextarea, ɵngcc6.ButtonDirective], styles: ["input[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{width:100%;resize:none}"] });
SupportTicketComponent.ctorParameters = () => [
    { type: FormBuilder }
];
SupportTicketComponent.propDecorators = {
    display: [{ type: Input }],
    displayChange: [{ type: Output }],
    submitTicket: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SupportTicketComponent, [{
        type: Component,
        args: [{
                selector: 'tk-support-ticket',
                template: "<p-dialog\n  header=\"Create Support Ticket\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '500px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close()\"\n>\n  <form [formGroup]=\"formGroup\">\n    <div class=\"p-grid\">\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <input id=\"ticket-title\" formControlName=\"title\" pInputText />\n          <label for=\"ticket-title\">Title</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <span class=\"p-float-label\">\n          <textarea\n            id=\"ticket-description\"\n            formControlName=\"description\"\n            pInputTextarea\n            rows=\"10\"\n          >\n          </textarea>\n          <label for=\"ticket-description\">Description</label>\n        </span>\n      </div>\n      <div class=\"p-col-12\">\n        <button\n          pButton\n          label=\"Submit\"\n          (click)=\"submit()\"\n          [disabled]=\"formGroup.invalid\"\n        ></button>\n      </div>\n    </div>\n  </form>\n</p-dialog>\n",
                styles: ["input,textarea{width:100%;resize:none}"]
            }]
    }], function () { return [{ type: ɵngcc9.FormBuilder }]; }, { display: [{
            type: Input
        }], displayChange: [{
            type: Output
        }], submitTicket: [{
            type: Output
        }] }); })();

class IconsService {
    constructor(http) {
        this.http = http;
    }
    getPrimeicons() {
        return this.http
            .get('./portal-lib/assets/primeicons.csv', { responseType: 'text' })
            .pipe(map(data => data.split('\n')));
    }
}
IconsService.ɵfac = function IconsService_Factory(t) { return new (t || IconsService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
IconsService.ɵprov = ɵɵdefineInjectable({ factory: function IconsService_Factory() { return new IconsService(ɵɵinject(HttpClient)); }, token: IconsService, providedIn: "root" });
IconsService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IconsService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

class LaunchpadService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.url = "./launchpad-api/launchpad";
    }
    getLaunchpads(criteria) {
        const parameters = new HttpParams();
        Object.keys(criteria).forEach(key => parameters.set(key, criteria[key]));
        const options = { params: parameters };
        return this.httpClient.get(this.url, options);
    }
    addToLaunchpad(id, createTileDTO) {
        const httpOptions = {
            headers: new HttpHeaders({
                "Content-Type": "application/json"
            })
        };
        return this.httpClient.post(`${this.url}/${id}/tiles`, createTileDTO, httpOptions);
    }
}
LaunchpadService.ɵfac = function LaunchpadService_Factory(t) { return new (t || LaunchpadService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
LaunchpadService.ɵprov = ɵɵdefineInjectable({ factory: function LaunchpadService_Factory() { return new LaunchpadService(ɵɵinject(HttpClient)); }, token: LaunchpadService, providedIn: "root" });
LaunchpadService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LaunchpadService, [{
        type: Injectable,
        args: [{ providedIn: "root" }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

class AddToLaunchpadComponent {
    constructor(iconsService, fb, launchpadService, auth, messageService, confService) {
        this.iconsService = iconsService;
        this.fb = fb;
        this.launchpadService = launchpadService;
        this.auth = auth;
        this.messageService = messageService;
        this.confService = confService;
        this.closed = new EventEmitter();
        this.launchpads = [];
    }
    ngOnInit() {
        this.iconsService.getPrimeicons().subscribe(icons => (this.icons = icons.filter(i => !!i)), error => console.log(error));
        this.launchpadForm = this.fb.group({
            icon: ['', Validators.required],
            type: [{ value: 'FAVOURITE', disabled: true }],
            name: ['', Validators.required],
            appId: [{ value: this.appId, disabled: true }],
            appUrl: [
                {
                    value: window.location.href.replace(window.location.origin, ''),
                    disabled: true,
                },
            ],
            launchpad: ['', Validators.required],
        });
        const launchpadCriteria = {
            portalId: this.confService.getProperty('TKIT_PORTAL_ID'),
        };
        this.launchpadService.getLaunchpads(launchpadCriteria).subscribe(data => (this.launchpads = data), error => console.log(error));
    }
    addToLaunchpad() {
        const createTileDTO = {
            appId: this.launchpadForm.get('appId').value,
            appUrl: this.launchpadForm.get('appUrl').value,
            name: this.launchpadForm.get('name').value,
            type: this.launchpadForm.get('type').value,
            icon: this.launchpadForm.get('icon').value,
        };
        this.launchpadService.addToLaunchpad(this.launchpadForm.get('launchpad').value.id, createTileDTO).subscribe(() => {
            this.messageService.add({
                summary: 'App added to favourites successfully',
                severity: 'success',
            });
            this.close();
        }, () => {
            this.messageService.add({
                summary: 'Failed to add app to favourites',
                severity: 'error',
            });
        });
    }
    filterIcons(event) {
        const query = event.query.toLowerCase();
        this.filteredIcons = this.icons.filter(icon => icon.toLowerCase().includes(query));
    }
    close(event) {
        this.closed.emit(false);
    }
}
AddToLaunchpadComponent.ɵfac = function AddToLaunchpadComponent_Factory(t) { return new (t || AddToLaunchpadComponent)(ɵngcc0.ɵɵdirectiveInject(IconsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.FormBuilder), ɵngcc0.ɵɵdirectiveInject(LaunchpadService), ɵngcc0.ɵɵdirectiveInject(AUTH_SERVICE), ɵngcc0.ɵɵdirectiveInject(ɵngcc11.MessageService), ɵngcc0.ɵɵdirectiveInject(ConfigurationService)); };
AddToLaunchpadComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AddToLaunchpadComponent, selectors: [["tk-add-to-launchpad"]], inputs: { display: "display", appId: "appId" }, outputs: { closed: "closed" }, decls: 41, vars: 23, consts: [["header", "Add to Favourites", 3, "contentStyle", "visible", "modal", "visibleChange", "onHide"], [3, "formGroup", "ngSubmit"], [1, "p-fluid", "modal-content"], [1, "p-field", "p-grid"], ["for", "name", 1, "p-col-12", "p-md-3"], [1, "p-col-12", "p-md-9"], ["formControlName", "name", "id", "name", "type", "text", "pInputText", ""], ["for", "appId", 1, "p-col-12", "p-md-3"], ["formControlName", "appId", "id", "appId", "type", "text", "pInputText", ""], ["for", "appUrl", 1, "p-col-12", "p-md-3"], ["formControlName", "appUrl", "id", "appUrl", "type", "text", "pInputText", ""], ["for", "launchpad", 1, "p-col-12", "p-md-3"], ["inputId", "launchpad", "formControlName", "launchpad", 3, "options", "placeholder"], ["pTemplate", "item"], ["for", "type", 1, "p-col-12", "p-md-3"], ["id", "text", "type", "text", "pInputText", "", "formControlName", "type", "value", "FAVOURITE", "readonly", ""], ["for", "icon", 1, "p-col-12", "p-md-3"], ["inputId", "icon", "formControlName", "icon", "forceSelection", "true", "completeOnFocus", "true", 3, "suggestions", "placeholder", "completeMethod"], [1, "submit"], ["pButton", "", "type", "submit", 3, "label", "disabled"], [1, "custom-launchpad-container"], [1, "custom-item-container"]], template: function AddToLaunchpadComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p-dialog", 0);
        ɵngcc0.ɵɵlistener("visibleChange", function AddToLaunchpadComponent_Template_p_dialog_visibleChange_0_listener($event) { return ctx.display = $event; })("onHide", function AddToLaunchpadComponent_Template_p_dialog_onHide_0_listener($event) { return ctx.close($event); });
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵlistener("ngSubmit", function AddToLaunchpadComponent_Template_form_ngSubmit_1_listener() { return ctx.addToLaunchpad(); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵelementStart(4, "label", 4);
        ɵngcc0.ɵɵtext(5, "Tile Name: ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "div", 5);
        ɵngcc0.ɵɵelement(7, "input", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 3);
        ɵngcc0.ɵɵelementStart(9, "label", 7);
        ɵngcc0.ɵɵtext(10, "AppId: ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "div", 5);
        ɵngcc0.ɵɵelement(12, "input", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "div", 3);
        ɵngcc0.ɵɵelementStart(14, "label", 9);
        ɵngcc0.ɵɵtext(15, "AppUrl: ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 5);
        ɵngcc0.ɵɵelement(17, "input", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "div", 3);
        ɵngcc0.ɵɵelementStart(19, "label", 11);
        ɵngcc0.ɵɵtext(20, "Launchpad: ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(21, "div", 5);
        ɵngcc0.ɵɵelementStart(22, "p-dropdown", 12);
        ɵngcc0.ɵɵpipe(23, "translate");
        ɵngcc0.ɵɵtemplate(24, AddToLaunchpadComponent_ng_template_24_Template, 5, 2, "ng-template", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(25, "div", 3);
        ɵngcc0.ɵɵelementStart(26, "label", 14);
        ɵngcc0.ɵɵtext(27);
        ɵngcc0.ɵɵpipe(28, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(29, "div", 5);
        ɵngcc0.ɵɵelement(30, "input", 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(31, "div", 3);
        ɵngcc0.ɵɵelementStart(32, "label", 16);
        ɵngcc0.ɵɵtext(33, "Icon: ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(34, "div", 5);
        ɵngcc0.ɵɵelementStart(35, "p-autoComplete", 17);
        ɵngcc0.ɵɵlistener("completeMethod", function AddToLaunchpadComponent_Template_p_autoComplete_completeMethod_35_listener($event) { return ctx.filterIcons($event); });
        ɵngcc0.ɵɵpipe(36, "translate");
        ɵngcc0.ɵɵtemplate(37, AddToLaunchpadComponent_ng_template_37_Template, 4, 4, "ng-template", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(38, "p-footer", 18);
        ɵngcc0.ɵɵelement(39, "button", 19);
        ɵngcc0.ɵɵpipe(40, "translate");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleMap(ɵngcc0.ɵɵpureFunction0(21, _c22));
        ɵngcc0.ɵɵproperty("contentStyle", ɵngcc0.ɵɵpureFunction0(22, _c1))("visible", ctx.display)("modal", true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.launchpadForm);
        ɵngcc0.ɵɵadvance(21);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(23, 13, "LAUNCHPAD.SELECT_LAUNCHPAD"));
        ɵngcc0.ɵɵproperty("options", ctx.launchpads);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵtextInterpolate1("", ɵngcc0.ɵɵpipeBind1(28, 15, "LAUNCHPAD.TILE_TYPE"), ": ");
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ɵngcc0.ɵɵpipeBind1(36, 17, "LAUNCHPAD.SELECT_ICON"));
        ɵngcc0.ɵɵproperty("suggestions", ctx.filteredIcons);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵpropertyInterpolate("label", ɵngcc0.ɵɵpipeBind1(40, 19, "LAUNCHPAD.SAVE"));
        ɵngcc0.ɵɵproperty("disabled", !ctx.launchpadForm.valid);
    } }, directives: [ɵngcc8.Dialog, ɵngcc9.ɵangular_packages_forms_forms_ba, ɵngcc9.NgControlStatusGroup, ɵngcc9.FormGroupDirective, ɵngcc9.DefaultValueAccessor, ɵngcc9.NgControlStatus, ɵngcc9.FormControlName, ɵngcc10.InputText, ɵngcc21.Dropdown, ɵngcc11.PrimeTemplate, ɵngcc22.AutoComplete, ɵngcc11.Footer, ɵngcc6.ButtonDirective], pipes: [ɵngcc16.TranslatePipe], styles: [".custom-launchpad-container[_ngcontent-%COMP%]{display:flex}.custom-launchpad-container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:last-of-type{margin-left:auto}.submit[_ngcontent-%COMP%]{padding:.5em 0;margin-top:20px}.submit[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-top:.5em;width:100%}.custom-item-container[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{display:inline-block}.custom-item-container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{float:left;margin-right:5px}"] });
AddToLaunchpadComponent.ctorParameters = () => [
    { type: IconsService },
    { type: FormBuilder },
    { type: LaunchpadService },
    { type: undefined, decorators: [{ type: Inject, args: [AUTH_SERVICE,] }] },
    { type: MessageService },
    { type: ConfigurationService }
];
AddToLaunchpadComponent.propDecorators = {
    display: [{ type: Input }],
    appId: [{ type: Input }],
    closed: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AddToLaunchpadComponent, [{
        type: Component,
        args: [{
                selector: 'tk-add-to-launchpad',
                template: "<p-dialog\n  header=\"Add to Favourites\"\n  [contentStyle]=\"{ overflow: 'visible' }\"\n  [style]=\"{ width: '700px', 'max-height': '600px' }\"\n  [(visible)]=\"display\"\n  (onHide)=\"close($event)\"\n  [modal]=\"true\"\n>\n  <form [formGroup]=\"launchpadForm\" (ngSubmit)=\"addToLaunchpad()\">\n    <div class=\"p-fluid modal-content\">\n      <div class=\"p-field p-grid\">\n        <label for=\"name\" class=\"p-col-12 p-md-3\">Tile Name: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"name\" id=\"name\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appId\" class=\"p-col-12 p-md-3\">AppId: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appId\" id=\"appId\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"appUrl\" class=\"p-col-12 p-md-3\">AppUrl: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input formControlName=\"appUrl\" id=\"appUrl\" type=\"text\" pInputText />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"launchpad\" class=\"p-col-12 p-md-3\">Launchpad: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-dropdown\n            inputId=\"launchpad\"\n            [options]=\"launchpads\"\n            formControlName=\"launchpad\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_LAUNCHPAD' | translate }}\"\n          >\n            <ng-template let-item pTemplate=\"item\">\n              <span class=\"custom-launchpad-container\">\n                <span> {{ item.name }} </span>\n                <span>\n                  {{ item.type }}\n                </span>\n              </span>\n            </ng-template>\n          </p-dropdown>\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"type\" class=\"p-col-12 p-md-3\">{{ \"LAUNCHPAD.TILE_TYPE\" | translate }}: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <input id=\"text\" type=\"text\" pInputText formControlName=\"type\" value=\"FAVOURITE\" readonly />\n        </div>\n      </div>\n      <div class=\"p-field p-grid\">\n        <label for=\"icon\" class=\"p-col-12 p-md-3\">Icon: </label>\n        <div class=\"p-col-12 p-md-9\">\n          <p-autoComplete\n            [suggestions]=\"filteredIcons\"\n            inputId=\"icon\"\n            formControlName=\"icon\"\n            (completeMethod)=\"filterIcons($event)\"\n            placeholder=\"{{ 'LAUNCHPAD.SELECT_ICON' | translate }}\"\n            forceSelection=\"true\"\n            completeOnFocus=\"true\"\n          >\n            <ng-template let-icon pTemplate=\"item\">\n              <div class=\"custom-item-container\">\n                <div>{{ icon }}</div>\n                <span class=\"pi pi-{{icon}}\"></span>\n              </div>\n            </ng-template>\n          </p-autoComplete>\n        </div>\n      </div>\n    </div>\n    <p-footer class=\"submit\">\n      <button\n        pButton\n        type=\"submit\"\n        label=\"{{ 'LAUNCHPAD.SAVE' | translate }}\"\n        [disabled]=\"!launchpadForm.valid\"\n      ></button>\n    </p-footer>\n  </form>\n</p-dialog>\n",
                styles: [".custom-launchpad-container{display:flex}.custom-launchpad-container span:last-of-type{margin-left:auto}.submit{padding:.5em 0;margin-top:20px}.submit button{margin-top:.5em;width:100%}.custom-item-container div{display:inline-block}.custom-item-container span{float:left;margin-right:5px}"]
            }]
    }], function () { return [{ type: IconsService }, { type: ɵngcc9.FormBuilder }, { type: LaunchpadService }, { type: undefined, decorators: [{
                type: Inject,
                args: [AUTH_SERVICE]
            }] }, { type: ɵngcc11.MessageService }, { type: ConfigurationService }]; }, { closed: [{
            type: Output
        }], display: [{
            type: Input
        }], appId: [{
            type: Input
        }] }); })();

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class TooltipAriaDirective extends Tooltip {
    constructor(el, zone) {
        super(el, zone);
        this.el = el;
        this.zone = zone;
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            switch (this.tooltipEvent) {
                case 'hover':
                    this.initHoverForTooltipEvent();
                    break;
                case 'focus':
                    this.initFocusForTooltipEvent();
                    break;
                case 'hover|focus':
                    this.initHoverForTooltipEvent();
                    this.initFocusForTooltipEvent();
                    break;
                case 'focus|hover':
                    this.initHoverForTooltipEvent();
                    this.initFocusForTooltipEvent();
                    break;
            }
        });
    }
    initHoverForTooltipEvent() {
        this.mouseEnterListener = this.onMouseEnter.bind(this);
        this.mouseLeaveListener = this.onMouseLeave.bind(this);
        this.clickListener = this.onClick.bind(this);
        this.el.nativeElement.addEventListener('mouseenter', this.mouseEnterListener);
        this.el.nativeElement.addEventListener('mouseleave', this.mouseLeaveListener);
        this.el.nativeElement.addEventListener('click', this.clickListener);
    }
    initFocusForTooltipEvent() {
        this.focusListener = this.onFocus.bind(this);
        this.blurListener = this.onBlur.bind(this);
        this.el.nativeElement.addEventListener('focus', this.focusListener);
        this.el.nativeElement.addEventListener('blur', this.blurListener);
    }
    set pTooltipText(text) {
        this.text = text;
    }
}
TooltipAriaDirective.ɵfac = function TooltipAriaDirective_Factory(t) { return new (t || TooltipAriaDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
TooltipAriaDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TooltipAriaDirective, selectors: [["", "pTooltip-aria", ""]], inputs: { pTooltipText: ["pTooltip-aria", "pTooltipText"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
TooltipAriaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
TooltipAriaDirective.propDecorators = {
    pTooltipText: [{ type: Input, args: ['pTooltip-aria',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipAriaDirective, [{
        type: Directive,
        args: [{ selector: '[pTooltip-aria]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { pTooltipText: [{
            type: Input,
            args: ['pTooltip-aria']
        }] }); })();

function HttpLoaderFactory2(http) {
    return new TranslateHttpLoader(http, './portal-lib/assets/i18n/');
}
function StandardTranslateHttpLoader(http) {
    return new MultiTranslateHttpLoader(http, [
        { prefix: './assets/i18n/', suffix: '.json' },
        { prefix: './portal-lib/assets/i18n/', suffix: '.json' },
    ]);
}
const ɵ0$1 = tkitPortalInitializer;
class TkitPortalModule {
}
TkitPortalModule.ɵfac = function TkitPortalModule_Factory(t) { return new (t || TkitPortalModule)(); };
TkitPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TkitPortalModule });
TkitPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [
        useHttpCacheLocalStorage,
        DialogService,
        {
            provide: HTTP_INTERCEPTORS,
            useClass: HttpProgressInterceptor,
            multi: true
        },
        {
            provide: APP_INITIALIZER,
            useFactory: ɵ0$1,
            multi: true,
            deps: [ConfigurationService, TranslateService, AUTH_SERVICE]
        },
    ], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            // KeycloakAngularModule,
            // primeng
            // TODO do not import all!!!
            AutoCompleteModule,
            BreadcrumbModule,
            ButtonModule,
            CalendarModule,
            CardModule,
            CheckboxModule,
            ConfirmDialogModule,
            DialogModule,
            DynamicDialogModule,
            DropdownModule,
            InputSwitchModule,
            InputTextModule,
            InputTextareaModule,
            MenuModule,
            MessageModule,
            MessagesModule,
            OverlayPanelModule,
            PanelModule,
            PanelMenuModule,
            RatingModule,
            RippleModule,
            ScrollPanelModule,
            SkeletonModule,
            TableModule,
            ToastModule,
            ToggleButtonModule,
            TooltipModule,
            // end primeng modules
            HttpClientModule,
            HttpCacheInterceptorModule.forRoot(),
            TranslateModule,
        ], FormsModule,
        // reexport primeng
        AutoCompleteModule,
        BreadcrumbModule,
        ButtonModule,
        CalendarModule,
        CardModule,
        CheckboxModule,
        ConfirmDialogModule,
        DialogModule,
        DynamicDialogModule,
        DropdownModule,
        InputSwitchModule,
        InputTextModule,
        InputTextareaModule,
        MenuModule,
        MessageModule,
        MessagesModule,
        OverlayPanelModule,
        PaginatorModule,
        PanelModule,
        PanelMenuModule,
        RatingModule,
        RippleModule,
        SelectButtonModule,
        SkeletonModule,
        TableModule,
        ToastModule,
        ToggleButtonModule,
        TooltipModule,
        // angular common
        HttpClientModule,
        HttpCacheInterceptorModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TkitPortalModule, { declarations: function () { return [PortalViewportComponent, ToolbarItemComponent, AppMenuComponent, AppSubMenuComponent, HeaderComponent, AppFooterComponent, HelpEditDialogComponent, BreadcrumbComponent, AppInlineProfileComponent, HttpProgressLoaderComponent, PortalPageComponent, PanelHeaderComponent, CollapsibleDirective, ActionDirective, TooltipAriaDirective, NoHelpInfoComponent, PortalSearchPageComponent, LoadingComponent, TkIfPermDirective, SearchBarComponent, ResultTextComponent, FeedbackComponent, AddToLaunchpadComponent, SupportTicketComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        // KeycloakAngularModule,
        // primeng
        // TODO do not import all!!!
        AutoCompleteModule,
        BreadcrumbModule,
        ButtonModule,
        CalendarModule,
        CardModule,
        CheckboxModule,
        ConfirmDialogModule,
        DialogModule,
        DynamicDialogModule,
        DropdownModule,
        InputSwitchModule,
        InputTextModule,
        InputTextareaModule,
        MenuModule,
        MessageModule,
        MessagesModule,
        OverlayPanelModule,
        PanelModule,
        PanelMenuModule,
        RatingModule,
        RippleModule,
        ScrollPanelModule,
        SkeletonModule,
        TableModule,
        ToastModule,
        ToggleButtonModule,
        TooltipModule,
        // end primeng modules
        HttpClientModule, ɵngcc26.HttpCacheInterceptorModule, TranslateModule]; }, exports: function () { return [FormsModule,
        // reexport primeng
        AutoCompleteModule,
        BreadcrumbModule,
        ButtonModule,
        CalendarModule,
        CardModule,
        CheckboxModule,
        ConfirmDialogModule,
        DialogModule,
        DynamicDialogModule,
        DropdownModule,
        InputSwitchModule,
        InputTextModule,
        InputTextareaModule,
        MenuModule,
        MessageModule,
        MessagesModule,
        OverlayPanelModule,
        PaginatorModule,
        PanelModule,
        PanelMenuModule,
        RatingModule,
        RippleModule,
        SelectButtonModule,
        SkeletonModule,
        TableModule,
        ToastModule,
        ToggleButtonModule,
        TooltipModule,
        // angular common
        HttpClientModule,
        HttpCacheInterceptorModule, PortalViewportComponent, PortalPageComponent, PortalSearchPageComponent, PanelHeaderComponent, ToolbarItemComponent, LoadingComponent, CollapsibleDirective, ActionDirective, TooltipAriaDirective, TkIfPermDirective, ResultTextComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TkitPortalModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    PortalViewportComponent,
                    ToolbarItemComponent,
                    AppMenuComponent,
                    AppSubMenuComponent,
                    HeaderComponent,
                    AppFooterComponent,
                    HelpEditDialogComponent,
                    BreadcrumbComponent,
                    AppInlineProfileComponent,
                    HttpProgressLoaderComponent,
                    PortalPageComponent,
                    PanelHeaderComponent,
                    CollapsibleDirective,
                    ActionDirective,
                    TooltipAriaDirective,
                    NoHelpInfoComponent,
                    PortalSearchPageComponent,
                    LoadingComponent,
                    TkIfPermDirective,
                    SearchBarComponent,
                    ResultTextComponent,
                    FeedbackComponent,
                    AddToLaunchpadComponent,
                    SupportTicketComponent,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    // KeycloakAngularModule,
                    // primeng
                    // TODO do not import all!!!
                    AutoCompleteModule,
                    BreadcrumbModule,
                    ButtonModule,
                    CalendarModule,
                    CardModule,
                    CheckboxModule,
                    ConfirmDialogModule,
                    DialogModule,
                    DynamicDialogModule,
                    DropdownModule,
                    InputSwitchModule,
                    InputTextModule,
                    InputTextareaModule,
                    MenuModule,
                    MessageModule,
                    MessagesModule,
                    OverlayPanelModule,
                    PanelModule,
                    PanelMenuModule,
                    RatingModule,
                    RippleModule,
                    ScrollPanelModule,
                    SkeletonModule,
                    TableModule,
                    ToastModule,
                    ToggleButtonModule,
                    TooltipModule,
                    // end primeng modules
                    HttpClientModule,
                    HttpCacheInterceptorModule.forRoot(),
                    TranslateModule,
                ],
                exports: [
                    FormsModule,
                    // reexport primeng
                    AutoCompleteModule,
                    BreadcrumbModule,
                    ButtonModule,
                    CalendarModule,
                    CardModule,
                    CheckboxModule,
                    ConfirmDialogModule,
                    DialogModule,
                    DynamicDialogModule,
                    DropdownModule,
                    InputSwitchModule,
                    InputTextModule,
                    InputTextareaModule,
                    MenuModule,
                    MessageModule,
                    MessagesModule,
                    OverlayPanelModule,
                    PaginatorModule,
                    PanelModule,
                    PanelMenuModule,
                    RatingModule,
                    RippleModule,
                    SelectButtonModule,
                    SkeletonModule,
                    TableModule,
                    ToastModule,
                    ToggleButtonModule,
                    TooltipModule,
                    // angular common
                    HttpClientModule,
                    HttpCacheInterceptorModule,
                    // our components
                    PortalViewportComponent,
                    PortalPageComponent,
                    PortalSearchPageComponent,
                    PanelHeaderComponent,
                    ToolbarItemComponent,
                    LoadingComponent,
                    CollapsibleDirective,
                    ActionDirective,
                    TooltipAriaDirective,
                    TkIfPermDirective,
                    ResultTextComponent,
                ],
                entryComponents: [NoHelpInfoComponent],
                providers: [
                    useHttpCacheLocalStorage,
                    DialogService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: HttpProgressInterceptor,
                        multi: true
                    },
                    {
                        provide: APP_INITIALIZER,
                        useFactory: ɵ0$1,
                        multi: true,
                        deps: [ConfigurationService, TranslateService, AUTH_SERVICE]
                    },
                ]
            }]
    }], null, null); })();

function provideParent(component, parentType) {
    return {
        provide: parentType || PortalSearchPage,
        useExisting: forwardRef(() => component)
    };
}

/*
 * Public API Surface of portal-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { APP_CONFIG, AUTH_SERVICE, ActionDirective, AuthModule, BreadcrumbService, CollapsibleDirective, ConfigurationService, DEFAULT_AVATAR_URL, HttpLoaderFactory2, LoadingComponent, MockAuthModule, PanelHeaderComponent, PhoneType, PortalPageComponent, PortalSearchPage, PortalSearchPageComponent, PortalViewportComponent, ResultTextComponent, StandardTranslateHttpLoader, StateService, TkIfPermDirective, TkitPortalModule, ToolbarItemComponent, TooltipAriaDirective, UserProfileService, initializer, isTkitPage, provideParent, ɵ0$1 as ɵ0, MockAuthService as ɵa, KeycloakAuthService as ɵb, SupportTicketComponent as ɵba, HttpProgressInterceptor as ɵbb, tkitPortalInitializer as ɵbc, PortalApiService as ɵc, HelpPageAPIService as ɵd, ThemeService as ɵe, MenuService as ɵf, MenuApiService as ɵg, FeedbackApiService as ɵh, SupportTicketApiService as ɵi, AppMenuComponent as ɵj, AppSubMenuComponent as ɵk, HeaderComponent as ɵl, AppFooterComponent as ɵm, HelpEditDialogComponent as ɵn, BreadcrumbComponent as ɵo, AppInlineProfileComponent as ɵp, HttpProgressLoaderComponent as ɵq, HttpProgressLoaderService as ɵr, NoHelpInfoComponent as ɵs, SearchTemplateAPIService as ɵt, SearchBarComponent as ɵu, PortalItemService as ɵv, FeedbackComponent as ɵw, AddToLaunchpadComponent as ɵx, IconsService as ɵy, LaunchpadService as ɵz };

//# sourceMappingURL=portal-lib.js.map